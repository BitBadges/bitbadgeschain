syntax = "proto3";
package offers;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "offers/params.proto";
import "offers/tx.proto";

// this line is used by starport scaffolding # 1

// import "cosmos_proto/cosmos.proto";

option go_package = "bitbadgeschain/x/offers/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/bitbadgeschain/offers/params";
  }

  rpc GetProposal(QueryGetProposalRequest) returns (QueryGetProposalResponse) {
    option (google.api.http).get = "/bitbadgeschain/offers/proposal/{id}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryGetProposalRequest {
  string id = 1  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

message QueryGetProposalResponse {
  Proposal proposal = 1;
}

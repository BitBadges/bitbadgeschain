syntax = "proto3";
package bitbadges.bitbadgeschain.badges;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "badges/params.proto";
// this line is used by starport scaffolding # 1
import "badges/collections.proto";
import "badges/balances.proto";
import "badges/transfers.proto";
import "badges/address_mappings.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types";


// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/params";
  }

  // Queries a badge collection by ID.
	rpc GetCollection(QueryGetCollectionRequest) returns (QueryGetCollectionResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_collection/{collectionId}";
	}

  rpc GetAddressMapping(QueryGetAddressMappingRequest) returns (QueryGetAddressMappingResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_address_mapping/{mappingId}";
  }

  rpc GetApprovalsTracker(QueryGetApprovalsTrackerRequest) returns (QueryGetApprovalsTrackerResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_approvals_tracker/{collectionId}/{approvalLevel}/{approverAddress}/{approvalId}/{trackerType}/{approvedAddress}";
  }

  rpc GetNumUsedForMerkleChallenge(QueryGetNumUsedForMerkleChallengeRequest) returns (QueryGetNumUsedForMerkleChallengeResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_num_used_for_challenge/{collectionId}/{approvalLevel}/{approverAddress}/{challengeId}/{leafIndex}";
  }

  // Queries an addresses balance for a badge collection, specified by its ID.
	rpc GetBalance(QueryGetBalanceRequest) returns (QueryGetBalanceResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_balance/{collectionId}/{address}";
	}

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCollectionRequest {
  string collectionId = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
    ];
}

message QueryGetCollectionResponse {
  BadgeCollection collection = 1;
}

message QueryGetBalanceRequest {
  string collectionId = 1  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  string address = 2;
}

message QueryGetBalanceResponse {
  UserBalanceStore balance = 1;
}

message QueryGetAddressMappingRequest {
  string mappingId = 1 ;
}

message QueryGetAddressMappingResponse {
  AddressMapping mapping = 1;
}

message QueryGetApprovalsTrackerRequest {
  string collectionId = 5 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  string approvalLevel = 2; //"collection" or "incoming" or "outgoing"
  string approverAddress = 3; //if approvalLevel is "collection", leave blank
  string approvalId = 1; 
  string trackerType = 4;; //"overall", "to", "from", "initiatedBy"
  string approvedAddress = 6; //if trackerType is "overall", leave blank
}

message QueryGetApprovalsTrackerResponse {
  ApprovalsTracker tracker = 1;
}

message QueryGetNumUsedForMerkleChallengeRequest {
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  string approvalLevel = 2; //"collection" or "incoming" or "outgoing"
  string approverAddress = 3; //if approvalLevel is "collection", leave blank
  string challengeId = 4;
  string leafIndex = 5 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false]; 
}

message QueryGetNumUsedForMerkleChallengeResponse {
  string numUsed = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3

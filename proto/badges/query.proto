syntax = "proto3";
package bitbadges.bitbadgeschain.badges;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "badges/params.proto";
// this line is used by starport scaffolding # 1
import "badges/collections.proto";
import "badges/balances.proto";
import "badges/transfers.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types";


// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/params";
  }

    // Queries a badge collection by ID.
	rpc GetCollection(QueryGetCollectionRequest) returns (QueryGetCollectionResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_collection/{collectionId}";
	}

  // Queries a claim by collection ID and claim ID.
	rpc GetClaimNumProcessed(QueryGetClaimNumProcessedRequest) returns (QueryGetClaimNumProcessedResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_claim/{collectionId}/{claimId}";
	}

  // Has a specific claim been used?
	rpc IsClaimDataUsed(QueryIsClaimDataUsedRequest) returns (QueryIsClaimDataUsedResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/is_claim_data_used/{collectionId}/{claimId}/{claimData}";
	}

  // Queries an addresses balance for a badge collection, specified by its ID.
	rpc GetBalance(QueryGetBalanceRequest) returns (QueryGetBalanceResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_balance/{collectionId}/{address}";
	}

  // Queries an address by its account number.
	rpc GetAddressById(QueryGetAddressByIdRequest) returns (QueryGetAddressByIdResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_address_by_id/{id}";
	}


  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCollectionRequest {
  string collectionId = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
    ];
}

message QueryGetCollectionResponse {
  BadgeCollection collection = 1;
}

message QueryGetClaimNumProcessedRequest {
  string collectionId = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  string claimId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
}

message QueryGetClaimNumProcessedResponse {
  string numProcessed = 1 [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
    ];
}

message QueryGetAddressByIdRequest {
  string id = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
}

message QueryGetAddressByIdResponse {
  string address = 1;
}

message QueryGetBalanceRequest {
  string collectionId = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  string address = 2;
}

message QueryGetBalanceResponse {
  UserBalanceStore balance = 1;
}

message QueryIsClaimDataUsedRequest {
    string collectionId = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
    string claimId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
    string claimData = 3;
}

message QueryIsClaimDataUsedResponse {
    bool used = 1;
}
// this line is used by starport scaffolding # 3

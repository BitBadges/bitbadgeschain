syntax = "proto3";
package badges;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "badges/params.proto";
// this line is used by starport scaffolding # 1
import "badges/collections.proto";
import "badges/balances.proto";
import "badges/transfers.proto";
import "badges/address_lists.proto";
import "badges/dynamic_stores.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types";


// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/params";
  }

  // Queries a collection by ID.
	rpc GetCollection(QueryGetCollectionRequest) returns (QueryGetCollectionResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_collection/{collectionId}";
	}

  // Queries an address list by ID.
  rpc GetAddressList(QueryGetAddressListRequest) returns (QueryGetAddressListResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_address_list/{listId}";
  }

  // Queries an approvals tracker by ID.
  rpc GetApprovalTracker(QueryGetApprovalTrackerRequest) returns (QueryGetApprovalTrackerResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_approvals_tracker/{collectionId}/{approvalLevel}/{approverAddress}/{amountTrackerId}/{trackerType}/{approvedAddress}";
  }

  // Queries the number of times a given leaf has been used for a given merkle challenge.
  rpc GetChallengeTracker(QueryGetChallengeTrackerRequest) returns (QueryGetChallengeTrackerResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_challenge_tracker/{collectionId}/{approvalLevel}/{approverAddress}/{challengeTrackerId}/{leafIndex}";
  }

  // Queries the number of times a given signature has been used for a given ETH signature challenge.
  rpc GetETHSignatureTracker(QueryGetETHSignatureTrackerRequest) returns (QueryGetETHSignatureTrackerResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_eth_signature_tracker/{collectionId}/{approvalLevel}/{approverAddress}/{approvalId}/{challengeTrackerId}/{signature}";
  }

  // Queries an addresses balance for a collection, specified by its ID.
	rpc GetBalance(QueryGetBalanceRequest) returns (QueryGetBalanceResponse) {
		option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_balance/{collectionId}/{address}";
	}

  // Queries a dynamic store by ID.
  rpc GetDynamicStore(QueryGetDynamicStoreRequest) returns (QueryGetDynamicStoreResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_dynamic_store/{storeId}";
  }

  // Queries a dynamic store value by store ID and address.
  rpc GetDynamicStoreValue(QueryGetDynamicStoreValueRequest) returns (QueryGetDynamicStoreValueResponse) {
    option (google.api.http).get = "/bitbadges/bitbadgeschain/badges/get_dynamic_store_value/{storeId}/{address}";
	}

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCollectionRequest {
  string collectionId = 1  ;
}

message QueryGetCollectionResponse {
  TokenCollection collection = 1;
}

message QueryGetBalanceRequest {
  string collectionId = 1  ;
  string address = 2;
}

message QueryGetBalanceResponse {
  UserBalanceStore balance = 1;
}

message QueryGetAddressListRequest {
  string listId = 1 ;
}

message QueryGetAddressListResponse {
  AddressList list = 1;
}

message QueryGetApprovalTrackerRequest {
  string collectionId = 5 ;
  string approvalLevel = 2; //"collection" or "incoming" or "outgoing"
  string approverAddress = 3; //if approvalLevel is "collection", leave blank
  string approvalId = 7;
  string amountTrackerId = 1; 
  string trackerType = 4;; //"overall", "to", "from", "initiatedBy"
  string approvedAddress = 6; //if trackerType is "overall", leave blank
}

message QueryGetApprovalTrackerResponse {
  ApprovalTracker tracker = 1;
}

message QueryGetChallengeTrackerRequest {
  string collectionId = 1 ;
  string approvalLevel = 2; //"collection" or "incoming" or "outgoing"
  string approverAddress = 3; //if approvalLevel is "collection", leave blank
  string approvalId = 6;
  string challengeTrackerId = 4;
  string leafIndex = 5 ; 
}

message QueryGetChallengeTrackerResponse {
  string numUsed = 1 ;
}

message QueryGetDynamicStoreRequest {
  string storeId = 1;
}

message QueryGetDynamicStoreResponse {
  DynamicStore store = 1;
}

message QueryGetDynamicStoreValueRequest {
  string storeId = 1;
  string address = 2;
}

message QueryGetDynamicStoreValueResponse {
  DynamicStoreValue value = 1;
}

message QueryGetETHSignatureTrackerRequest {
  string collectionId = 1;
  string approvalLevel = 2; //"collection" or "incoming" or "outgoing"
  string approverAddress = 3; //if approvalLevel is "collection", leave blank
  string approvalId = 4;
  string challengeTrackerId = 5;
  string signature = 6;
}

message QueryGetETHSignatureTrackerResponse {
  string numUsed = 1;
}

// this line is used by starport scaffolding # 3

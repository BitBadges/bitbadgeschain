syntax = "proto3";
package trevormil.bitbadgeschain.badges;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "badges/params.proto";
// this line is used by starport scaffolding # 1
import "badges/badges.proto";
import "badges/balances.proto";

option go_package = "github.com/trevormil/bitbadgeschain/x/badges/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/trevormil/bitbadgeschain/badges/params";
  }
  // Queries a list of GetBadge items.
	rpc GetBadge(QueryGetBadgeRequest) returns (QueryGetBadgeResponse) {
		option (google.api.http).get = "/trevormil/bitbadgeschain/badges/get_badge/{id}";
	}
// Queries a list of GetBalance items.
	rpc GetBalance(QueryGetBalanceRequest) returns (QueryGetBalanceResponse) {
		option (google.api.http).get = "/trevormil/bitbadgeschain/badges/get_balance/{badgeId}/{address}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetBadgeRequest {
  uint64 id = 1;
}

message QueryGetBadgeResponse {
  BitBadge badge = 1;
}

message QueryGetBalanceRequest {
  uint64 badgeId = 1;
  uint64 address = 2;
}

message QueryGetBalanceResponse {
  UserBalanceInfo balanceInfo = 1;
}

// this line is used by starport scaffolding # 3

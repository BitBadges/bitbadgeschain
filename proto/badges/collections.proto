syntax = "proto3";
package bitbadges.bitbadgeschain.badges;

import "google/protobuf/any.proto";
import "badges/transfers.proto";
import "badges/balances.proto";
import "badges/permissions.proto";
import "badges/metadata.proto";
import "badges/timelines.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types";

// A BadgeCollection is the top level object for a collection of badges. 
// It defines everything about the collection, such as the manager, metadata, etc.
//
// All collections are identified by a collectionId assigned by the blockchain, which is a uint64 that increments (i.e. first collection has ID 1).
//
// All collections also have a manager who is responsible for managing the collection. 
// They can be granted certain permissions, such as the ability to mint new badges.
//
// Certain fields are timeline-based, which means they may have different values at different block heights. 
// We fetch the value according to the current time.
// For example, we may set the manager to be Alice from Time1 to Time2, and then set the manager to be Bob from Time2 to Time3.
//
// Collections may have different balance types: standard vs off-chain vs inherited. See documentation for differences.
message BadgeCollection {
  // The collectionId is the unique identifier for this collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // The collection metadata is the metadata for the collection itself.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 2;
  // The badge metadata is the metadata for each badge in the collection.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 3;
  
  // The balancesType is the type of balances this collection uses (standard, off-chain, or inherited).
  string balancesType = 4;
  // The off-chain balances metadata defines where to fetch the balances for collections with off-chain balances.
  repeated OffChainBalancesMetadataTimeline offChainBalancesMetadataTimeline = 5;

  // The custom data field is an arbitrary field that can be used to store any data.
  repeated CustomDataTimeline customDataTimeline = 7;
  
  // The manager is the address of the manager of this collection.
  repeated ManagerTimeline managerTimeline = 8;
  
  // The permissions define what the manager of the collection can do or not do.
  CollectionPermissions collectionPermissions = 9;
  
  // The approved transfers defines the transferability of the collection for collections with standard balances.
  // This defines it on a collection-level. All transfers must be explicitly allowed on the collection-level, or else, they will fail.
  // 
  // Collection approved transfers can optionally specify to override the user approvals for a transfer (e.g. forcefully revoke a badge).
  // If user approvals are not overriden, then a transfer must also satisfy the From user's approved outgoing transfers and the To user's approved incoming transfers.
  repeated CollectionApprovedTransfer collectionApprovedTransfers = 10;
  
  // Standards allow us to define a standard for the collection. This lets others know how to interpret the fields of the collection.
  repeated StandardsTimeline standardsTimeline = 11;

  // The isArchivedTimeline defines whether the collection is archived or not. 
  // When a collection is archived, it is read-only and no transactions can be processed.
  repeated IsArchivedTimeline isArchivedTimeline = 12;

  // The contractAddressTimeline defines the contract address for the collection (if it has a corresponding contract).
  repeated ContractAddressTimeline contractAddressTimeline = 13;

  // The defaultUserApprovedOutgoingTransfersTimeline defines the default user approved outgoing transfers for an uninitialized user balance. 
  // The user can change this value at any time.
  repeated UserApprovedOutgoingTransfer defaultUserApprovedOutgoingTransfers = 14;

  // The defaultUserApprovedIncomingTransfers defines the default user approved incoming transfers for an uninitialized user balance.
  // The user can change this value at any time.
  //
  // Ex: Set this to disallow all incoming transfers by default, making the user have to opt-in to receiving the badge.
  repeated UserApprovedIncomingTransfer defaultUserApprovedIncomingTransfers = 15;

  UserPermissions defaultUserPermissions = 16;

  string createdBy = 17;
}
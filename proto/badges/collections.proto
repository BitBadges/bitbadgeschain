syntax = "proto3";
package bitbadges.bitbadgeschain.badges;

import "google/protobuf/any.proto";
import "badges/transfers.proto";
import "badges/balances.proto";
import "badges/permissions.proto";
import "badges/metadata.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types";

message CollectionMetadataTimeline {
  CollectionMetadata collectionMetadata = 1;
  repeated IdRange times = 2;
}

message BadgeMetadataTimeline {
  repeated BadgeMetadata badgeMetadata = 1;
  repeated IdRange times = 2;
}

message OffChainBalancesMetadataTimeline {
  OffChainBalancesMetadata offChainBalancesMetadata = 1;
  repeated IdRange times = 2;
}

message InheritedBalancesTimeline {
  repeated InheritedBalance inheritedBalances = 1;
  repeated IdRange times = 2;
}

message CustomDataTimeline {
  string customData = 1;
  repeated IdRange times = 2;
}

message ManagerTimeline {
  string manager = 1;
  repeated IdRange times = 2;
}

message CollectionApprovedTransferTimeline {
  repeated CollectionApprovedTransfer approvedTransfers = 1;
  repeated IdRange times = 2;
}

message IsArchivedTimeline {
  bool isArchived = 1;
  repeated IdRange times = 2;
}

message ContractAddressTimeline {
  string contractAddress = 1;
  repeated IdRange times = 2;
}

message StandardTimeline {
  string standard = 1;
  repeated IdRange times = 2;
}

// BadgeCollection defines a standard collection of badges.
message BadgeCollection {
  // The collectionId defines the unique identifier of the BadgeCollection classification, similar to the contract address of ERC721.
  // This is assigned by the chain itself. All ids start at 1 and increments by 1 each created collection.
  string collectionId = 1 [
    (gogoproto.customtype) = "Uint", 
    (gogoproto.nullable) = false
  ];

  //The parent collection id. If 0, then this is a root collection (i.e. not inherited from any parent collection).
  //If not 0, then this is a subcollection of the parent collection.
  string parentCollectionId = 2 [
    (gogoproto.customtype) = "Uint", 
    (gogoproto.nullable) = false
  ];

  // The URI where to fetch the collection's metadata.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 3;

  // An array of BadgeMetadataUri objects for where to fetch the badge metadata.
  // Each BadgeMetadataUri object has a uri and an array of badgeId ranges (see BadgeMetadataUri type).
  // The uri can include {id} in the URI which is a placeholder to be replaced by each badge's unique id.
  // To fetch the metadata for a speciifc badge, the first match is always used.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 4;

  string balancesType = 5 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];

  // The URI where to fetch the collection's balances.  
  // Leave blank if balances are to be stored on-chain.
  repeated OffChainBalancesMetadataTimeline offChainBalancesMetadataTimeline = 6;

  // Defines where to fetch the balances for each badge.
  repeated InheritedBalancesTimeline inheritedBalancesTimeline = 7;

  // These are arbitrary bytes can be used to store anything on-chain about the badge (often used for a permanent hash).
  // This can be updatable or not depending on the permissions set. Max 256 bytes allowed.
  // Parse this data according to the standards defined in the standards array.
  repeated CustomDataTimeline customDataTimeline = 8;

  repeated ManagerTimeline managerTimeline = 9;

  //Defines the permissions for the collection.
  CollectionPermissions permissions = 10;

  //This is the part of the collection that defines the transferability, approvals, and claims
  //for the collection.
  repeated CollectionApprovedTransferTimeline approvedTransfersTimeline = 11;

  //Badge ids start at 1. Each badge created will increment this by 1. Can't overflow.
  string nextBadgeId = 12  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];

  //This is a map of the current unminted badge supplys by ID. 
  //Consider this the balance of the 'Mint' address. Once a badge is minted, it is removed from this map.
  repeated Balance unmintedSupplys = 13;

  //This is a map of the total badge supplys in circulation by ID.
  repeated Balance totalSupplys = 14;

  //Defines what standard this badge should implement (see standards documentation).
  repeated StandardTimeline standardsTimeline = 15;

  // Defines if the collection is isFrozen or not. Frozen collections can't be updated (all Msgs will fail).
  // This can be useful for security reasons, archiving, or to set universal genesis conditions for subcollections.
  // Subcollections will have a choice to inherit this setting or not.
  repeated IsArchivedTimeline isArchivedTimeline = 16;

  string nextTransferTrackerId = 17 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];

  // The address of a contract that implements additional functionality for this collection.
  // Can point to a contract on another chain or on the BitBadges chain (depending on if it needs access to edit the collection or not).
  // Prefix with eth: for Ethereum. If no prefix, then it is assumed to be on the BitBadges chain.
  repeated ContractAddressTimeline contractAddressTimeline = 18;
}
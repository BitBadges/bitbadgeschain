syntax = "proto3";
package badges.v8;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "badges/v8/params.proto";

import "badges/v8/transfers.proto";
import "badges/v8/balances.proto";
import "badges/v8/permissions.proto";
import "badges/v8/metadata.proto";
import "badges/v8/collections.proto";
import "badges/v8/address_lists.proto";
import "badges/v8/timelines.proto";

import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types/v8";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc UniversalUpdateCollection      (MsgUniversalUpdateCollection) returns (MsgUniversalUpdateCollectionResponse);
  rpc CreateAddressLists (MsgCreateAddressLists) returns (MsgCreateAddressListsResponse);
  rpc TransferBadges(MsgTransferBadges) returns (MsgTransferBadgesResponse);
  rpc UpdateUserApprovals(MsgUpdateUserApprovals) returns (MsgUpdateUserApprovalsResponse);
  rpc DeleteCollection(MsgDeleteCollection) returns (MsgDeleteCollectionResponse);
  rpc UpdateCollection      (MsgUpdateCollection) returns (MsgUpdateCollectionResponse);
  rpc CreateCollection      (MsgCreateCollection) returns (MsgCreateCollectionResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "badges/v8/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message CosmosCoinWrapperPathAddObject {
  string denom = 1;
  repeated UintRange ownershipTimes = 2;
  repeated UintRange badgeIds = 3;
  string symbol = 4;
  repeated DenomUnit denomUnits = 5;
}

// MsgUniversalUpdateCollection is used to define MsgServer types for all requests and responses for Msgs of the badges module.
// It is a universal interface that can be used for both creating and updating collections.
// We have it defined for legacy purposes, but it is recommended to use MsgCreateCollection and MsgUpdateCollection instead.
message MsgUniversalUpdateCollection {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v8/UniversalUpdateCollection";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection (0 for new collection).
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // Type of balances "Standard" or "Off-Chain - Indexed" or "Off-Chain - Non-Indexed" or "Non-Public".
  string balancesType = 3;

  //The default balances for the user
  UserBalanceStore defaultBalances = 4;

  // Indicates if the valid badge IDs should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateValidBadgeIds = 5;

  // New badge IDs to add to this collection
  repeated UintRange validBadgeIds = 6; 

  // Indicates if collection permissions should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionPermissions = 7;
  
  // New collection permissions to set.
  CollectionPermissions collectionPermissions = 8;
  
  // Indicates if the manager timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateManagerTimeline = 9;
  
  // New manager timeline to set.
  repeated ManagerTimeline managerTimeline = 10;
  
  // Indicates if the collection metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionMetadataTimeline = 11;
  
  // New collection metadata timeline to set.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 12;
  
  // Indicates if the badge metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateBadgeMetadataTimeline = 13;
  
  // New badge metadata timeline to set.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 14;
  
  // Indicates if the off-chain balances metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateOffChainBalancesMetadataTimeline = 15;
  
  // New off-chain balances metadata timeline to set.
  repeated OffChainBalancesMetadataTimeline offChainBalancesMetadataTimeline = 16;
  
  // Indicates if the custom data timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCustomDataTimeline = 17;
  
  // New custom data timeline to set.
  repeated CustomDataTimeline customDataTimeline = 18;
  
  // Indicates if collection approvals should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionApprovals = 21;
  
  // New collection approvals to set.
  repeated CollectionApproval collectionApprovals = 22;
  
  // Indicates if the standards timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateStandardsTimeline = 23;
  
  // New standards timeline to set.
  repeated StandardsTimeline standardsTimeline = 24;
  
  // Indicates if the isArchived timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateIsArchivedTimeline = 25;
  
  // New isArchived timeline to set.
  repeated IsArchivedTimeline isArchivedTimeline = 26;

  // Coins to be transferred to the mint escrow address.
  repeated cosmos.base.v1beta1.Coin mintEscrowCoinsToTransfer = 27;

  // IBC wrapper paths to add.
  repeated CosmosCoinWrapperPathAddObject cosmosCoinWrapperPathsToAdd = 28;
}

// MsgUniversalUpdateCollectionResponse is the response to MsgUniversalUpdateCollection.
message MsgUniversalUpdateCollectionResponse {
  // ID of the badge collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgUpdateCollection is used to update a collection.
message MsgUpdateCollection {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v8/UpdateCollection";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection (0 for new collection).
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // Indicates if the valid badge IDs should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateValidBadgeIds = 3;

  // New badge IDs to add to this collection
  repeated UintRange validBadgeIds = 4;
  
  // Indicates if collection permissions should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionPermissions = 7;
  
  // New collection permissions to set.
  CollectionPermissions collectionPermissions = 8;
  
  // Indicates if the manager timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateManagerTimeline = 9;
  
  // New manager timeline to set.
  repeated ManagerTimeline managerTimeline = 10;
  
  // Indicates if the collection metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionMetadataTimeline = 11;
  
  // New collection metadata timeline to set.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 12;
  
  // Indicates if the badge metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateBadgeMetadataTimeline = 13;
  
  // New badge metadata timeline to set.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 14;
  
  // Indicates if the off-chain balances metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateOffChainBalancesMetadataTimeline = 15;
  
  // New off-chain balances metadata timeline to set.
  repeated OffChainBalancesMetadataTimeline offChainBalancesMetadataTimeline = 16;
  
  // Indicates if the custom data timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCustomDataTimeline = 17;
  
  // New custom data timeline to set.
  repeated CustomDataTimeline customDataTimeline = 18;
  
  // Indicates if collection approvals should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionApprovals = 21;
  
  // New collection approvals to set.
  repeated CollectionApproval collectionApprovals = 22;
  
  // Indicates if the standards timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateStandardsTimeline = 23;
  
  // New standards timeline to set.
  repeated StandardsTimeline standardsTimeline = 24;
  
  // Indicates if the isArchived timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateIsArchivedTimeline = 27;
  
  // New isArchived timeline to set.
  repeated IsArchivedTimeline isArchivedTimeline = 28;

  // Coins to be transferred to the mint escrow address.
  repeated cosmos.base.v1beta1.Coin mintEscrowCoinsToTransfer = 29;

  // IBC wrapper paths to add.
  repeated CosmosCoinWrapperPathAddObject cosmosCoinWrapperPathsToAdd = 30;
}

// MsgUpdateCollectionResponse is the response to MsgUpdateCollection.
message MsgUpdateCollectionResponse {
  // ID of the badge collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgCreateCollection is used to create a new collection.
message MsgCreateCollection {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v8/CreateCollection";

  // Address of the creator.
  string creator = 1;
  
  // Type of balances "Standard" or "Off-Chain - Indexed" or "Off-Chain - Non-Indexed" or "Non-Public".
  string balancesType = 2;
  
  //The default balances for the user
  UserBalanceStore defaultBalances = 4;

  // New badge IDs to add to this collection
  repeated UintRange validBadgeIds = 5; 
  
  // Collection permissions.
  CollectionPermissions collectionPermissions = 6;
  
  // Manager timeline entries.
  repeated ManagerTimeline managerTimeline = 7;
  
  // Collection metadata timeline entries.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 8;
  
  // Badge metadata timeline entries.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 9;
  
  // Off-chain balances metadata timeline entries.
  repeated OffChainBalancesMetadataTimeline offChainBalancesMetadataTimeline = 10;
  
  // Custom data timeline entries.
  repeated CustomDataTimeline customDataTimeline = 11;
  
  // Collection approvals.
  repeated CollectionApproval collectionApprovals = 12;
  
  // Standards timeline entries.
  repeated StandardsTimeline standardsTimeline = 13;
  
  // isArchived timeline entries.
  repeated IsArchivedTimeline isArchivedTimeline = 14;

  // Coins to be transferred to the mint escrow address.
  repeated cosmos.base.v1beta1.Coin mintEscrowCoinsToTransfer = 16;

  // IBC wrapper paths to add.
  repeated CosmosCoinWrapperPathAddObject cosmosCoinWrapperPathsToAdd = 17;
}

// MsgCreateCollectionResponse is the response to MsgCreateCollection.
message MsgCreateCollectionResponse {
  // ID of the badge collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgCreateAddressLists is used to create address lists.
message MsgCreateAddressLists {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v8/CreateAddressLists";

  // Address of the creator.
  string creator = 1;
  
  // Address lists to create.
  repeated AddressList addressLists = 2;
}

// MsgCreateAddressListsResponse is the response to MsgCreateAddressLists.
message MsgCreateAddressListsResponse {}

// MsgTransferBadges is used to transfer badges.
message MsgTransferBadges {
  option (cosmos.msg.v1.signer) = "creator";
    option (amino.name) = "badges/v8/TransferBadges";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // Transfers to execute.
  repeated Transfer transfers = 3;
}

// MsgTransferBadgesResponse is the response to MsgTransferBadges.
message MsgTransferBadgesResponse {}

// MsgDeleteCollection is used to delete a collection.
message MsgDeleteCollection {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v8/DeleteCollection";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgDeleteCollectionResponse is the response to MsgDeleteCollection.
message MsgDeleteCollectionResponse {}

// MsgUpdateUserApprovals is used to update user approvals.
message MsgUpdateUserApprovals {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v8/UpdateUserApprovals";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // Indicates if outgoing approvals should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateOutgoingApprovals = 3;
  
  // New outgoing approvals to set. 
  repeated UserOutgoingApproval outgoingApprovals = 4;
  
  // Indicates if incoming approvals should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateIncomingApprovals = 5;
  
  // New incoming approvals to set.
  repeated UserIncomingApproval incomingApprovals = 6;
  
  // Indicates if auto-approve settings for self-initiated outgoing transfers should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateAutoApproveSelfInitiatedOutgoingTransfers = 7;
  
  // Auto-approve setting for self-initiated outgoing transfers.
  bool autoApproveSelfInitiatedOutgoingTransfers = 8;
  
  // Indicates if auto-approve settings for self-initiated incoming transfers should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateAutoApproveSelfInitiatedIncomingTransfers = 9;
  
  // Auto-approve setting for self-initiated incoming transfers.
  bool autoApproveSelfInitiatedIncomingTransfers = 10;

  // Indicates if auto-approve settings for all incoming transfers should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateAutoApproveAllIncomingTransfers = 11;

  // Auto-approve setting for all incoming transfers.
  bool autoApproveAllIncomingTransfers = 12;

  // Indicates if user permissions should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateUserPermissions = 13;
  
  // New user permissions to set.
  UserPermissions userPermissions = 14;
}

// MsgUpdateUserApprovalsResponse is the response to MsgUpdateUserApprovals.
message MsgUpdateUserApprovalsResponse {}



// this line is used by starport scaffolding # proto/tx/message

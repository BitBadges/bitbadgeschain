syntax = "proto3";
package badges.v14;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "badges/v14/params.proto";

import "badges/v14/transfers.proto";
import "badges/v14/balances.proto";
import "badges/v14/permissions.proto";
import "badges/v14/metadata.proto";
import "badges/v14/collections.proto";
import "badges/v14/address_lists.proto";
import "badges/v14/timelines.proto";
import "badges/v14/dynamic_stores.proto";

import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types/v14";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc UniversalUpdateCollection      (MsgUniversalUpdateCollection) returns (MsgUniversalUpdateCollectionResponse);
  rpc CreateAddressLists (MsgCreateAddressLists) returns (MsgCreateAddressListsResponse);
  rpc TransferBadges(MsgTransferBadges) returns (MsgTransferBadgesResponse);
  rpc UpdateUserApprovals(MsgUpdateUserApprovals) returns (MsgUpdateUserApprovalsResponse);
  rpc SetIncomingApproval(MsgSetIncomingApproval) returns (MsgSetIncomingApprovalResponse);
  rpc DeleteIncomingApproval(MsgDeleteIncomingApproval) returns (MsgDeleteIncomingApprovalResponse);
  rpc SetOutgoingApproval(MsgSetOutgoingApproval) returns (MsgSetOutgoingApprovalResponse);
  rpc DeleteOutgoingApproval(MsgDeleteOutgoingApproval) returns (MsgDeleteOutgoingApprovalResponse);
  rpc PurgeApprovals(MsgPurgeApprovals) returns (MsgPurgeApprovalsResponse);
  rpc DeleteCollection(MsgDeleteCollection) returns (MsgDeleteCollectionResponse);
  rpc UpdateCollection      (MsgUpdateCollection) returns (MsgUpdateCollectionResponse);
  rpc CreateCollection      (MsgCreateCollection) returns (MsgCreateCollectionResponse);
  rpc CreateDynamicStore    (MsgCreateDynamicStore) returns (MsgCreateDynamicStoreResponse);
  rpc UpdateDynamicStore    (MsgUpdateDynamicStore) returns (MsgUpdateDynamicStoreResponse);
  rpc DeleteDynamicStore    (MsgDeleteDynamicStore) returns (MsgDeleteDynamicStoreResponse);
  rpc SetDynamicStoreValue  (MsgSetDynamicStoreValue) returns (MsgSetDynamicStoreValueResponse);
  rpc IncrementStoreValue   (MsgIncrementStoreValue) returns (MsgIncrementStoreValueResponse);
  rpc DecrementStoreValue   (MsgDecrementStoreValue) returns (MsgDecrementStoreValueResponse);
  
  // Helper message types for UniversalUpdateCollection subsets
  rpc SetValidBadgeIds(MsgSetValidBadgeIds) returns (MsgSetValidBadgeIdsResponse);
  rpc SetManager(MsgSetManager) returns (MsgSetManagerResponse);
  rpc SetCollectionMetadata(MsgSetCollectionMetadata) returns (MsgSetCollectionMetadataResponse);
  rpc SetBadgeMetadata(MsgSetBadgeMetadata) returns (MsgSetBadgeMetadataResponse);
  rpc SetCustomData(MsgSetCustomData) returns (MsgSetCustomDataResponse);
  rpc SetStandards(MsgSetStandards) returns (MsgSetStandardsResponse);
  rpc SetCollectionApprovals(MsgSetCollectionApprovals) returns (MsgSetCollectionApprovalsResponse);
  rpc SetIsArchived(MsgSetIsArchived) returns (MsgSetIsArchivedResponse);
}

//Used for WASM bindings and JSON parsing
message BadgeCustomMsgType {
  MsgCreateAddressLists createAddressListsMsg = 1;
  MsgUniversalUpdateCollection universalUpdateCollectionMsg = 2;
  MsgDeleteCollection deleteCollectionMsg = 3;
  MsgTransferBadges transferBadgesMsg = 4;
  MsgUpdateUserApprovals updateUserApprovalsMsg = 5;
  MsgUpdateCollection updateCollectionMsg = 6;
  MsgCreateCollection createCollectionMsg = 7;
  MsgCreateDynamicStore createDynamicStoreMsg = 8;
  MsgUpdateDynamicStore updateDynamicStoreMsg = 9;
  MsgDeleteDynamicStore deleteDynamicStoreMsg = 10;
  MsgSetDynamicStoreValue setDynamicStoreValueMsg = 11;
  MsgIncrementStoreValue incrementStoreValueMsg = 12;
  MsgDecrementStoreValue decrementStoreValueMsg = 13;
  MsgSetIncomingApproval setIncomingApprovalMsg = 14;
  MsgDeleteIncomingApproval deleteIncomingApprovalMsg = 15;
  MsgSetOutgoingApproval setOutgoingApprovalMsg = 16;
  MsgDeleteOutgoingApproval deleteOutgoingApprovalMsg = 17;
  MsgPurgeApprovals purgeApprovalsMsg = 18;
  
  // Helper message types for UniversalUpdateCollection subsets
  MsgSetValidBadgeIds setValidBadgeIdsMsg = 19;
  MsgSetManager setManagerMsg = 20;
  MsgSetCollectionMetadata setCollectionMetadataMsg = 21;
  MsgSetBadgeMetadata setBadgeMetadataMsg = 22;
  MsgSetCustomData setCustomDataMsg = 23;
  MsgSetStandards setStandardsMsg = 24;
  MsgSetCollectionApprovals setCollectionApprovalsMsg = 25;
  MsgSetIsArchived setIsArchivedMsg = 26;
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "badges/v14/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message CosmosCoinWrapperPathAddObject {
  string denom = 1;
  repeated Balance balances = 2;
  string symbol = 3;
  repeated DenomUnit denomUnits = 4;
  bool allowOverrideWithAnyValidToken = 5;
  bool allowCosmosWrapping = 6;
}

// MsgUniversalUpdateCollection is used to define MsgServer types for all requests and responses for Msgs of the badges module.
// It is a universal interface that can be used for both creating and updating collections.
// We have it defined for legacy purposes, but it is recommended to use MsgCreateCollection and MsgUpdateCollection instead.
message MsgUniversalUpdateCollection {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/UniversalUpdateCollection";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection (0 for new collection).
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];

  //The default balances for the user
  UserBalanceStore defaultBalances = 3;

  // Indicates if the valid token IDs should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateValidBadgeIds = 4;

  // New token IDs to add to this collection
  repeated UintRange validBadgeIds = 5; 

  // Indicates if collection permissions should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionPermissions = 6;
  
  // New collection permissions to set.
  CollectionPermissions collectionPermissions = 7;
  
  // Indicates if the manager timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateManagerTimeline = 8;
  
  // New manager timeline to set.
  repeated ManagerTimeline managerTimeline = 9;
  
  // Indicates if the collection metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionMetadataTimeline = 10;
  
  // New collection metadata timeline to set.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 11;
  
  // Indicates if the token metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateBadgeMetadataTimeline = 12;
  
  // New token metadata timeline to set.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 13;
  
  
  // Indicates if the custom data timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCustomDataTimeline = 14;
  
  // New custom data timeline to set.
  repeated CustomDataTimeline customDataTimeline = 15;
  
  // Indicates if collection approvals should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionApprovals = 16;
  
  // New collection approvals to set.
  repeated CollectionApproval collectionApprovals = 17;
  
  // Indicates if the standards timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateStandardsTimeline = 18;
  
  // New standards timeline to set.
  repeated StandardsTimeline standardsTimeline = 19;
  
  // Indicates if the isArchived timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateIsArchivedTimeline = 20;
  
  // New isArchived timeline to set.
  repeated IsArchivedTimeline isArchivedTimeline = 21;

  // Coins to be transferred to the mint escrow address.
  repeated cosmos.base.v1beta1.Coin mintEscrowCoinsToTransfer = 22;

  // IBC wrapper paths to add.
  repeated CosmosCoinWrapperPathAddObject cosmosCoinWrapperPathsToAdd = 23;

  // Collection-level invariants that cannot be broken.
  // These are set upon genesis and cannot be modified.
  CollectionInvariants invariants = 24;
}

// MsgUniversalUpdateCollectionResponse is the response to MsgUniversalUpdateCollection.
message MsgUniversalUpdateCollectionResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgUpdateCollection is used to update a collection.
message MsgUpdateCollection {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/UpdateCollection";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection (0 for new collection).
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // Indicates if the valid token IDs should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateValidBadgeIds = 3;

  // New token IDs to add to this collection
  repeated UintRange validBadgeIds = 4;
  
  // Indicates if collection permissions should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionPermissions = 5;
  
  // New collection permissions to set.
  CollectionPermissions collectionPermissions = 6;
  
  // Indicates if the manager timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateManagerTimeline = 7;
  
  // New manager timeline to set.
  repeated ManagerTimeline managerTimeline = 8;
  
  // Indicates if the collection metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionMetadataTimeline = 9;
  
  // New collection metadata timeline to set.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 10;
  
  // Indicates if the token metadata timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateBadgeMetadataTimeline = 11;
  
  // New token metadata timeline to set.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 12;
  
  
  // Indicates if the custom data timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCustomDataTimeline = 13;
  
  // New custom data timeline to set.
  repeated CustomDataTimeline customDataTimeline = 14;
  
  // Indicates if collection approvals should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateCollectionApprovals = 15;
  
  // New collection approvals to set.
  repeated CollectionApproval collectionApprovals = 16;
  
  // Indicates if the standards timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateStandardsTimeline = 17;
  
  // New standards timeline to set.
  repeated StandardsTimeline standardsTimeline = 18;
  
  // Indicates if the isArchived timeline should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateIsArchivedTimeline = 19;
  
  // New isArchived timeline to set.
  repeated IsArchivedTimeline isArchivedTimeline = 20;

  // Coins to be transferred to the mint escrow address.
  repeated cosmos.base.v1beta1.Coin mintEscrowCoinsToTransfer = 21;

  // IBC wrapper paths to add.
  repeated CosmosCoinWrapperPathAddObject cosmosCoinWrapperPathsToAdd = 22;

  // Collection-level invariants that cannot be broken.
  // These are set upon genesis and cannot be modified.
  CollectionInvariants invariants = 23;
}

// MsgUpdateCollectionResponse is the response to MsgUpdateCollection.
message MsgUpdateCollectionResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgCreateCollection is used to create a new collection.
message MsgCreateCollection {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/CreateCollection";

  // Address of the creator.
  string creator = 1;
  
  //The default balances for the user
  UserBalanceStore defaultBalances = 2;

  // New token IDs to add to this collection
  repeated UintRange validBadgeIds = 3; 
  
  // Collection permissions.
  CollectionPermissions collectionPermissions = 4;
  
  // Manager timeline entries.
  repeated ManagerTimeline managerTimeline = 5;
  
  // Collection metadata timeline entries.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 6;
  
  // Token metadata timeline entries.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 7;
  
  // Custom data timeline entries.
  repeated CustomDataTimeline customDataTimeline = 8;
  
  // Collection approvals.
  repeated CollectionApproval collectionApprovals = 9;
  
  // Standards timeline entries.
  repeated StandardsTimeline standardsTimeline = 10;
  
  // isArchived timeline entries.
  repeated IsArchivedTimeline isArchivedTimeline = 11;

  // Coins to be transferred to the mint escrow address.
  repeated cosmos.base.v1beta1.Coin mintEscrowCoinsToTransfer = 12;

  // IBC wrapper paths to add.
  repeated CosmosCoinWrapperPathAddObject cosmosCoinWrapperPathsToAdd = 13;

  // Collection-level invariants that cannot be broken.
  CollectionInvariants invariants = 14;
}

// MsgCreateCollectionResponse is the response to MsgCreateCollection.
message MsgCreateCollectionResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgCreateAddressLists is used to create address lists.
message MsgCreateAddressLists {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/CreateAddressLists";

  // Address of the creator.
  string creator = 1;
  
  // Address lists to create.
  repeated AddressList addressLists = 2;
}

// MsgCreateAddressListsResponse is the response to MsgCreateAddressLists.
message MsgCreateAddressListsResponse {}

// MsgTransferBadges is used to transfer tokens.
message MsgTransferBadges {
  option (cosmos.msg.v1.signer) = "creator";
    option (amino.name) = "badges/v14/TransferBadges";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // Transfers to execute.
  repeated Transfer transfers = 3;
}

// MsgTransferBadgesResponse is the response to MsgTransferBadges.
message MsgTransferBadgesResponse {}

// MsgDeleteCollection is used to delete a collection.
message MsgDeleteCollection {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/DeleteCollection";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgDeleteCollectionResponse is the response to MsgDeleteCollection.
message MsgDeleteCollectionResponse {}

// MsgUpdateUserApprovals is used to update user approvals.
message MsgUpdateUserApprovals {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/UpdateUserApprovals";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2  [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // Indicates if outgoing approvals should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateOutgoingApprovals = 3;
  
  // New outgoing approvals to set. 
  repeated UserOutgoingApproval outgoingApprovals = 4;
  
  // Indicates if incoming approvals should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateIncomingApprovals = 5;
  
  // New incoming approvals to set.
  repeated UserIncomingApproval incomingApprovals = 6;
  
  // Indicates if auto-approve settings for self-initiated outgoing transfers should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateAutoApproveSelfInitiatedOutgoingTransfers = 7;
  
  // Auto-approve setting for self-initiated outgoing transfers.
  bool autoApproveSelfInitiatedOutgoingTransfers = 8;
  
  // Indicates if auto-approve settings for self-initiated incoming transfers should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateAutoApproveSelfInitiatedIncomingTransfers = 9;
  
  // Auto-approve setting for self-initiated incoming transfers.
  bool autoApproveSelfInitiatedIncomingTransfers = 10;

  // Indicates if auto-approve settings for all incoming transfers should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateAutoApproveAllIncomingTransfers = 11;

  // Auto-approve setting for all incoming transfers.
  bool autoApproveAllIncomingTransfers = 12;

  // Indicates if user permissions should be updated. If true, we set to value in this Msg. If false, we keep existing value.
  bool updateUserPermissions = 13;
  
  // New user permissions to set.
  UserPermissions userPermissions = 14;
}

// MsgUpdateUserApprovalsResponse is the response to MsgUpdateUserApprovals.
message MsgUpdateUserApprovalsResponse {}

// MsgSetIncomingApproval is a helper message to set a single incoming approval.
message MsgSetIncomingApproval {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetIncomingApproval";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // The incoming approval to set.
  UserIncomingApproval approval = 3;
}

// MsgSetIncomingApprovalResponse is the response to MsgSetIncomingApproval.
message MsgSetIncomingApprovalResponse {}

// MsgDeleteIncomingApproval is a helper message to delete a single incoming approval.
message MsgDeleteIncomingApproval {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/DeleteIncomingApproval";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // The ID of the approval to delete.
  string approvalId = 3;
}

// MsgDeleteIncomingApprovalResponse is the response to MsgDeleteIncomingApproval.
message MsgDeleteIncomingApprovalResponse {}

// MsgSetOutgoingApproval is a helper message to set a single outgoing approval.
message MsgSetOutgoingApproval {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetOutgoingApproval";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // The outgoing approval to set.
  UserOutgoingApproval approval = 3;
}

// MsgSetOutgoingApprovalResponse is the response to MsgSetOutgoingApproval.
message MsgSetOutgoingApprovalResponse {}

// MsgDeleteOutgoingApproval is a helper message to delete a single outgoing approval.
message MsgDeleteOutgoingApproval {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/DeleteOutgoingApproval";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // The ID of the approval to delete.
  string approvalId = 3;
}

// MsgDeleteOutgoingApprovalResponse is the response to MsgDeleteOutgoingApproval.
message MsgDeleteOutgoingApprovalResponse {}

// MsgPurgeApprovals is a helper message to purge expired approvals.
message MsgPurgeApprovals {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/PurgeApprovals";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // Whether to purge expired approvals (approvals with no future valid transfer times).
  bool purgeExpired = 3;
  
  // Address of the user whose approvals to purge. If empty, defaults to creator.
  string approverAddress = 4;
  
  // Whether to purge counterparty approvals (approvals where the creator is the only initiator).
  bool purgeCounterpartyApprovals = 5;
  
  // Specific approvals to purge. If empty, purges all applicable approvals based on other flags.
  repeated ApprovalIdentifierDetails approvalsToPurge = 6;
}

// MsgPurgeApprovalsResponse is the response to MsgPurgeApprovals.
message MsgPurgeApprovalsResponse {
  // Number of approvals purged.
  string numPurged = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgCreateDynamicStore is used to create a new dynamic store.
message MsgCreateDynamicStore {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/CreateDynamicStore";

  // Address of the creator.
  string creator = 1;
  // The default value for uninitialized addresses (number of uses).
  string defaultValue = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgCreateDynamicStoreResponse is the response to MsgCreateDynamicStore.
message MsgCreateDynamicStoreResponse {
  // ID of the dynamic store.
  string storeId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgUpdateDynamicStore is used to update an existing dynamic store.
message MsgUpdateDynamicStore {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/UpdateDynamicStore";

  // Address of the creator.
  string creator = 1;
  // ID of the dynamic store to update.
  string storeId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  // The new default value for uninitialized addresses (optional, only set if updating).
  string defaultValue = 3 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgUpdateDynamicStoreResponse is the response to MsgUpdateDynamicStore.
message MsgUpdateDynamicStoreResponse {}

// MsgDeleteDynamicStore is used to delete a dynamic store.
message MsgDeleteDynamicStore {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/DeleteDynamicStore";

  // Address of the creator.
  string creator = 1;
  
  // ID of the dynamic store to delete.
  string storeId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgDeleteDynamicStoreResponse is the response to MsgDeleteDynamicStore.
message MsgDeleteDynamicStoreResponse {}

// MsgSetDynamicStoreValue is used to set a usage count for a specific address in a dynamic store.
message MsgSetDynamicStoreValue {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetDynamicStoreValue";

  // Address of the creator.
  string creator = 1;
  
  // ID of the dynamic store.
  string storeId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // The address for which to set the value.
  string address = 3;
  
  // The usage count to set (number of times this address can use the approval).
  string value = 4 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgSetDynamicStoreValueResponse is the response to MsgSetDynamicStoreValue.
message MsgSetDynamicStoreValueResponse {}

// MsgIncrementStoreValue is used to increment a usage count for a specific address in a dynamic store.
message MsgIncrementStoreValue {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/IncrementStoreValue";

  // Address of the creator.
  string creator = 1;
  
  // ID of the dynamic store.
  string storeId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // The address for which to increment the value.
  string address = 3;
  
  // The amount to increment by.
  string amount = 4 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgIncrementStoreValueResponse is the response to MsgIncrementStoreValue.
message MsgIncrementStoreValueResponse {}

// MsgDecrementStoreValue is used to decrement a usage count for a specific address in a dynamic store.
message MsgDecrementStoreValue {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/DecrementStoreValue";

  // Address of the creator.
  string creator = 1;
  
  // ID of the dynamic store.
  string storeId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // The address for which to decrement the value.
  string address = 3;
  
  // The amount to decrement by.
  string amount = 4 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // If true, set to zero on underflow. If false, throw error on underflow.
  bool setToZeroOnUnderflow = 5;
}

// MsgDecrementStoreValueResponse is the response to MsgDecrementStoreValue.
message MsgDecrementStoreValueResponse {}

// Helper message types for UniversalUpdateCollection subsets
// These are convenience messages that set specific subsets of the UniversalUpdateCollection message

// MsgSetValidBadgeIds sets the validBadgeIds and canUpdateValidBadgeIds permission
message MsgSetValidBadgeIds {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetValidBadgeIds";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // New token IDs to add to this collection
  repeated UintRange validBadgeIds = 3;
  
  // Permission to update valid token IDs
  repeated BadgeIdsActionPermission canUpdateValidBadgeIds = 4;
}

// MsgSetValidBadgeIdsResponse is the response to MsgSetValidBadgeIds.
message MsgSetValidBadgeIdsResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgSetManager sets the manager timeline and canUpdateManager permission
message MsgSetManager {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetManager";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // New manager timeline to set.
  repeated ManagerTimeline managerTimeline = 3;
  
  // Permission to update manager timeline
  repeated TimedUpdatePermission canUpdateManager = 4;
}

// MsgSetManagerResponse is the response to MsgSetManager.
message MsgSetManagerResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgSetCollectionMetadata sets the collection metadata timeline and canUpdateCollectionMetadata permission
message MsgSetCollectionMetadata {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetCollectionMetadata";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // New collection metadata timeline to set.
  repeated CollectionMetadataTimeline collectionMetadataTimeline = 3;
  
  // Permission to update collection metadata timeline
  repeated TimedUpdatePermission canUpdateCollectionMetadata = 4;
}

// MsgSetCollectionMetadataResponse is the response to MsgSetCollectionMetadata.
message MsgSetCollectionMetadataResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgSetBadgeMetadata sets the token metadata timeline and canUpdateBadgeMetadata permission
message MsgSetBadgeMetadata {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetBadgeMetadata";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // New token metadata timeline to set.
  repeated BadgeMetadataTimeline badgeMetadataTimeline = 3;
  
  // Permission to update token metadata timeline
  repeated TimedUpdateWithBadgeIdsPermission canUpdateBadgeMetadata = 4;
}

// MsgSetBadgeMetadataResponse is the response to MsgSetBadgeMetadata.
message MsgSetBadgeMetadataResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgSetCustomData sets the custom data timeline and canUpdateCustomData permission
message MsgSetCustomData {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetCustomData";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // New custom data timeline to set.
  repeated CustomDataTimeline customDataTimeline = 3;
  
  // Permission to update custom data timeline
  repeated TimedUpdatePermission canUpdateCustomData = 4;
}

// MsgSetCustomDataResponse is the response to MsgSetCustomData.
message MsgSetCustomDataResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgSetStandards sets the standards timeline and canUpdateStandards permission
message MsgSetStandards {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetStandards";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // New standards timeline to set.
  repeated StandardsTimeline standardsTimeline = 3;
  
  // Permission to update standards timeline
  repeated TimedUpdatePermission canUpdateStandards = 4;
}

// MsgSetStandardsResponse is the response to MsgSetStandards.
message MsgSetStandardsResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgSetCollectionApprovals sets the collection approvals and canUpdateCollectionApprovals permission
message MsgSetCollectionApprovals {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetCollectionApprovals";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // New collection approvals to set.
  repeated CollectionApproval collectionApprovals = 3;
  
  // Permission to update collection approvals
  repeated CollectionApprovalPermission canUpdateCollectionApprovals = 4;
}

// MsgSetCollectionApprovalsResponse is the response to MsgSetCollectionApprovals.
message MsgSetCollectionApprovalsResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

// MsgSetIsArchived sets the isArchived timeline and canArchiveCollection permission
message MsgSetIsArchived {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "badges/v14/SetIsArchived";

  // Address of the creator.
  string creator = 1;
  
  // ID of the collection.
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  
  // New isArchived timeline to set.
  repeated IsArchivedTimeline isArchivedTimeline = 3;
  
  // Permission to archive collection
  repeated TimedUpdatePermission canArchiveCollection = 4;
}

// MsgSetIsArchivedResponse is the response to MsgSetIsArchived.
message MsgSetIsArchivedResponse {
  // ID of the collection.
  string collectionId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
}

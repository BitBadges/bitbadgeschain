syntax = "proto3";
package bitbadges.bitbadgeschain.badges;

// this line is used by starport scaffolding # proto/tx/import
import "badges/ranges.proto";
import "badges/uris.proto";
import "badges/balances.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types";

// Msg defines the Msg service.
service Msg {
    rpc NewBadge(MsgNewBadge) returns (MsgNewBadgeResponse);
    rpc NewSubBadge(MsgNewSubBadge) returns (MsgNewSubBadgeResponse);
    rpc TransferBadge(MsgTransferBadge) returns (MsgTransferBadgeResponse);
    rpc RequestTransferBadge(MsgRequestTransferBadge) returns (MsgRequestTransferBadgeResponse);
    rpc HandlePendingTransfer(MsgHandlePendingTransfer) returns (MsgHandlePendingTransferResponse);
    rpc SetApproval(MsgSetApproval) returns (MsgSetApprovalResponse);
    rpc RevokeBadge(MsgRevokeBadge) returns (MsgRevokeBadgeResponse);
    rpc FreezeAddress(MsgFreezeAddress) returns (MsgFreezeAddressResponse);
    rpc UpdateUris(MsgUpdateUris) returns (MsgUpdateUrisResponse);
    rpc UpdatePermissions(MsgUpdatePermissions) returns (MsgUpdatePermissionsResponse);
    rpc TransferManager(MsgTransferManager) returns (MsgTransferManagerResponse);
    rpc RequestTransferManager(MsgRequestTransferManager) returns (MsgRequestTransferManagerResponse);
    rpc SelfDestructBadge(MsgSelfDestructBadge) returns (MsgSelfDestructBadgeResponse);
    rpc PruneBalances(MsgPruneBalances) returns (MsgPruneBalancesResponse);
    rpc UpdateBytes(MsgUpdateBytes) returns (MsgUpdateBytesResponse);
    rpc RegisterAddresses(MsgRegisterAddresses) returns (MsgRegisterAddressesResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

//The types defined in these files are used to define the MsgServer types for all requests and responses for Msgs of the badges module.

message SubassetSupplyAndAmount {
    uint64 supply = 1;
    uint64 amount = 2;
}

message MsgNewBadge {
    // See badges.proto for more details about these MsgNewBadge fields. Defines the badge details. Leave unneeded fields empty.
    string creator = 1; 
    UriObject uri = 2;
    uint64 permissions = 4;
    string arbitraryBytes = 5;
    uint64 defaultSubassetSupply = 6;
    repeated IdRange freezeAddressRanges = 9;
    uint64 standard = 10; 

    //Subasset supplys and amounts to create. For each idx, we create amounts[idx] subbadges each with a supply of supplys[idx].
    //If supply[idx] == 0, we assume default supply. amountsToCreate[idx] can't equal 0.
    repeated SubassetSupplyAndAmount subassetSupplysAndAmounts = 7;

    repeated WhitelistMintInfo whitelistedRecipients = 11;
}

message MsgNewBadgeResponse {
    uint64 id = 1; //ID of created badge
}

message MsgNewSubBadge {
    string creator = 1;
    uint64 badgeId = 2;

    //Subasset supplys and amounts to create must be same length. For each idx, we create amounts[idx] subbadges each with a supply of supplys[idx].
    //If supply[idx] == 0, we assume default supply. amountsToCreate[idx] can't equal 0.
    repeated SubassetSupplyAndAmount subassetSupplysAndAmounts = 7;
}

message MsgNewSubBadgeResponse {
    uint64 nextSubassetId = 1; //ID of next subbadgeId after creating all subbadges.
}

//For each amount, for each toAddress, we will attempt to transfer all the subbadgeIds for the badge with ID badgeId.
message MsgTransferBadge {
    string creator = 1;
    uint64 from = 2;
    repeated uint64 toAddresses = 3;
    repeated uint64 amounts = 4;
    uint64 badgeId = 5;
    repeated IdRange subbadgeRanges = 6;
    uint64 expirationTime = 7; //If 0, never expires and assumed to be the max possible time.
    uint64 cantCancelBeforeTime = 8; //If 0, always cancellable. Must be <= expirationTime.
}

message MsgTransferBadgeResponse {}

//For each amount, for each toAddress, we will request a transfer all the subbadgeIds for the badge with ID badgeId. Other party must approve / reject the transfer request.
message MsgRequestTransferBadge {
    string creator = 1;
    uint64 from = 2;
    uint64 amount = 4;
    uint64 badgeId = 5;
    repeated IdRange subbadgeRanges = 6;
    uint64 expirationTime = 7; //If 0, never expires and assumed to be the max possible time.
    uint64 cantCancelBeforeTime = 8; //If 0, always cancellable. Must be <= expirationTime.
}

message MsgRequestTransferBadgeResponse {}

//For all pending transfers of the badge where ThisPendingNonce is within some nonceRange in nonceRanges, we accept or deny the pending transfer.
message MsgHandlePendingTransfer {
    string creator = 1;
    bool accept = 2;
    uint64 badgeId = 3;
    repeated IdRange nonceRanges = 4;
    bool forcefulAccept = 5; //Forceful accept is an option to accept the transfer forcefully instead of just marking it as approved.
}

message MsgHandlePendingTransferResponse {}

//Sets an approval (no add or remove), just set it for an address.
message MsgSetApproval {
    string creator = 1;
    uint64 amount = 2;
    uint64 address = 3;
    uint64 badgeId = 4;
    repeated IdRange subbadgeRanges = 5;
}

message MsgSetApprovalResponse {}

//For each address and for each amount, revoke badge.
message MsgRevokeBadge {
    string creator = 1;
    repeated uint64 addresses = 2;
    repeated uint64 amounts = 3;
    uint64 badgeId = 4;
    repeated IdRange subbadgeRanges = 5;
}

message MsgRevokeBadgeResponse {}

//Add or remove addreses from the freeze address range
message MsgFreezeAddress {
  string creator = 1;
  repeated IdRange addressRanges = 2;
  uint64 badgeId = 3;
  bool  add = 4;
}

message MsgFreezeAddressResponse {
}

//Update badge Uris with new URI object, if permitted.
message MsgUpdateUris {
  string creator = 1;
  uint64 badgeId = 2;
  UriObject uri = 3;
}

message MsgUpdateUrisResponse {
}

//Update badge permissions with new permissions, if permitted.
message MsgUpdatePermissions {
  string creator = 1;
  uint64 badgeId = 2;
  uint64 permissions = 3;
}

message MsgUpdatePermissionsResponse {
}

//Transfer manager to this address. Recipient must have made a request.
message MsgTransferManager {
  string creator = 1;
  uint64 badgeId = 2;
  uint64 address = 3;
}

message MsgTransferManagerResponse {
}

//Add / remove request for manager to be transferred. 
message MsgRequestTransferManager {
  string creator = 1;
  uint64 badgeId = 2;
  bool add = 3;
}

message MsgRequestTransferManagerResponse {
}

//Self destructs the badge, if permitted.
message MsgSelfDestructBadge {
  string creator = 1;
  uint64 badgeId = 2;
}

message MsgSelfDestructBadgeResponse {
}

//Prunes balances of self destructed badges. Can be called by anyone
message MsgPruneBalances {
  string creator = 1;
  repeated uint64 badgeIds = 2;
  repeated uint64 addresses = 3;
}

message MsgPruneBalancesResponse {
}

//Update badge bytes, if permitted
message MsgUpdateBytes {
  string creator = 1;
  uint64 badgeId = 2;
  string newBytes = 3;
}

message MsgUpdateBytesResponse {
}

message MsgRegisterAddresses {
  string creator = 1;
  repeated string addressesToRegister = 2;
}

message MsgRegisterAddressesResponse {
    IdRange registeredAddressNumbers = 1;
}

// this line is used by starport scaffolding # proto/tx/message

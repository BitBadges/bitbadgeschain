syntax = "proto3";
package bitbadges.bitbadgeschain.badges;

// this line is used by starport scaffolding # proto/tx/import
import "badges/ranges.proto";
import "badges/balances.proto";
import "badges/claims.proto";
import "badges/badges.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types";

// Msg defines the Msg service.
service Msg {
    rpc NewCollection(MsgNewCollection) returns (MsgNewCollectionResponse);
    rpc MintAndDistributeBadges(MsgMintAndDistributeBadges) returns (MsgMintAndDistributeBadgesResponse);
    rpc TransferBadge(MsgTransferBadge) returns (MsgTransferBadgeResponse);
    rpc SetApproval(MsgSetApproval) returns (MsgSetApprovalResponse);
    rpc UpdateAllowedTransfers(MsgUpdateAllowedTransfers) returns (MsgUpdateAllowedTransfersResponse);
    rpc UpdateUris(MsgUpdateUris) returns (MsgUpdateUrisResponse);
    rpc UpdatePermissions(MsgUpdatePermissions) returns (MsgUpdatePermissionsResponse);
    rpc TransferManager(MsgTransferManager) returns (MsgTransferManagerResponse);
    rpc RequestTransferManager(MsgRequestTransferManager) returns (MsgRequestTransferManagerResponse);
    rpc UpdateBytes(MsgUpdateBytes) returns (MsgUpdateBytesResponse);
    rpc ClaimBadge(MsgClaimBadge) returns (MsgClaimBadgeResponse);
    rpc DeleteCollection(MsgDeleteCollection) returns (MsgDeleteCollectionResponse);
    // this line is used by starport scaffolding # proto/tx/rpc
}

//The types defined in these files are used to define the MsgServer types for all requests and responses for Msgs of the badges module.

//BadgeSupplyAndAmount is used to define the supply and amount of badges to create.
//We create x amount of badges each with a supply of y.
message BadgeSupplyAndAmount {
    string supply = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];;
    string amount = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];;
}

//Upon badge creation, the manager will first be minted these badges, and then, they will subsequently be transferred to these addresses according to permissions.ForcefulTransfers.
//Used to only need one signature for MsgNewBadge.
message Transfer {
    repeated string toAddresses = 1;
    repeated Balance balances = 2;
}

message MsgNewCollection {
    // See badges.proto for more details about these MsgNewBadge fields. Defines the badge details. Leave unneeded fields empty.
    string creator = 1; 
    string collectionUri = 2;
    repeated BadgeUri badgeUris = 3;
    string balancesUri = 4;

    string permissions = 5  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
    string bytes = 6;
    repeated TransferMapping allowedTransfers = 7;
    repeated TransferMapping managerApprovedTransfers = 8;
    string standard = 9  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
    
    //Badge supplys and amounts to create. For each idx, we create amounts[idx] badges each with a supply of supplys[idx].
    //If supply[idx] == 0, we assume default supply. amountsToCreate[idx] can't equal 0.
    repeated BadgeSupplyAndAmount badgeSupplys = 10;
    repeated Transfer transfers = 11;
    repeated Claim claims = 12;
}

message MsgNewCollectionResponse {
    string collectionId = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ]; //ID of created badge collection
}

//This handles both minting more of existing badges and creating new badges.
message MsgMintAndDistributeBadges {
    string creator = 1;
    string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
    repeated BadgeSupplyAndAmount badgeSupplys = 3;
    repeated Transfer transfers = 4;
    repeated Claim claims = 5;
    string collectionUri = 6;
    repeated BadgeUri badgeUris = 7;
    string balancesUri = 8;
}

message MsgMintAndDistributeBadgesResponse {
    string nextBadgeId = 1  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ]; //ID of next badgeId after creating all badges.
}

//For each amount, for each toAddress, we will attempt to transfer all the badgeIds for the badge with ID badgeId.
message MsgTransferBadge {
    string creator = 1;
    string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
    string from = 3;
    repeated Transfer transfers = 4;
}

message MsgTransferBadgeResponse {}

//Sets an approval (no add or remove), just set it for an address.
message MsgSetApproval {
    string creator = 1;
    string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
    string address = 3; //The address that are approved to transfer the balances.
    repeated Balance balances = 4; //approval balances for every badgeId
}

message MsgSetApprovalResponse {}


message MsgUpdateAllowedTransfers {
  string creator = 1;
  string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  repeated TransferMapping allowedTransfers = 3;
}

message MsgUpdateAllowedTransfersResponse {
}

//Update badge Uris with new URI object, if permitted.
message MsgUpdateUris {
  string creator = 1;
  string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  string collectionUri = 3;
  repeated BadgeUri badgeUris = 4;
  string balancesUri = 5;
}

message MsgUpdateUrisResponse {
}

//Update badge permissions with new permissions, if permitted.
message MsgUpdatePermissions {
  string creator = 1;
  string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  string permissions = 3  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
}

message MsgUpdatePermissionsResponse {
}

//Transfer manager to this address. Recipient must have made a request.
message MsgTransferManager {
  string creator = 1;
  string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  string address = 3;
}

message MsgTransferManagerResponse {
}

//Add / remove request for manager to be transferred. 
message MsgRequestTransferManager {
  string creator = 1;
  string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  bool addRequest = 3;
}

message MsgRequestTransferManagerResponse {
}

//Update badge bytes, if permitted
message MsgUpdateBytes {
  string creator = 1;
  string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  string bytes = 3;
}

message MsgUpdateBytesResponse {
}

message ClaimProofItem {
    string aunt = 1;
    bool onRight = 2;
}

//Consistent with tendermint/crypto merkle tree
message ClaimProof {
    string leaf = 1;
    repeated ClaimProofItem aunts = 2;
}

message ChallengeSolution {
  ClaimProof proof = 1;
}

message MsgClaimBadge {
  string creator = 1;
  string claimId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  string collectionId = 3  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
  repeated ChallengeSolution solutions = 4;
}

message MsgClaimBadgeResponse {}

message MsgDeleteCollection {
  string creator = 1;
  string collectionId = 2  [
      (gogoproto.customtype) = "Uint", 
      (gogoproto.nullable) = false
      
    ];
}

message MsgDeleteCollectionResponse {
}

// this line is used by starport scaffolding # proto/tx/message

syntax = "proto3";
package bitbadges.bitbadgeschain.badges;

// this line is used by starport scaffolding # proto/tx/import
import "badges/ranges.proto";
import "badges/balances.proto";
import "badges/claims.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/badges/types";

// Msg defines the Msg service.
service Msg {
    rpc NewCollection(MsgNewCollection) returns (MsgNewCollectionResponse);
    rpc MintBadge(MsgMintBadge) returns (MsgMintBadgeResponse);
    rpc TransferBadge(MsgTransferBadge) returns (MsgTransferBadgeResponse);
    rpc SetApproval(MsgSetApproval) returns (MsgSetApprovalResponse);
    rpc UpdateDisallowedTransfers(MsgUpdateDisallowedTransfers) returns (MsgUpdateDisallowedTransfersResponse);
    rpc UpdateUris(MsgUpdateUris) returns (MsgUpdateUrisResponse);
    rpc UpdatePermissions(MsgUpdatePermissions) returns (MsgUpdatePermissionsResponse);
    rpc TransferManager(MsgTransferManager) returns (MsgTransferManagerResponse);
    rpc RequestTransferManager(MsgRequestTransferManager) returns (MsgRequestTransferManagerResponse);
    rpc UpdateBytes(MsgUpdateBytes) returns (MsgUpdateBytesResponse);
    rpc RegisterAddresses(MsgRegisterAddresses) returns (MsgRegisterAddressesResponse);
    rpc ClaimBadge(MsgClaimBadge) returns (MsgClaimBadgeResponse);
    // this line is used by starport scaffolding # proto/tx/rpc
}

//The types defined in these files are used to define the MsgServer types for all requests and responses for Msgs of the badges module.

//BadgeSupplyAndAmount is used to define the supply and amount of badges to create.
//We create x amount of badges each with a supply of y.
message BadgeSupplyAndAmount {
    uint64 supply = 1;
    uint64 amount = 2;
}

//Upon badge creation, the manager will first be minted these badges, and then, they will subsequently be transferred to these addresses according to permissions.ForcefulTransfers.
//Used to only need one signature for MsgNewBadge.
message Transfers {
    repeated uint64 toAddresses = 1;
    repeated Balance balances = 2;
}

message MsgNewCollection {
    // See badges.proto for more details about these MsgNewBadge fields. Defines the badge details. Leave unneeded fields empty.
    string creator = 1; 
    string collectionUri = 2;
    string badgeUri = 3;

    uint64 permissions = 4;
    string bytes = 5;
    repeated TransferMapping disallowedTransfers = 6;
    repeated TransferMapping managerApprovedTransfers = 7;
    uint64 standard = 8; 
    //Badge supplys and amounts to create. For each idx, we create amounts[idx] badges each with a supply of supplys[idx].
    //If supply[idx] == 0, we assume default supply. amountsToCreate[idx] can't equal 0.
    repeated BadgeSupplyAndAmount badgeSupplys = 9;
    repeated Transfers transfers = 10;
    repeated Claim claims = 11;
}

message MsgNewCollectionResponse {
    uint64 collectionId = 1; //ID of created badge collection
}

//This handles both minting more of existing badges and creating new badges.
message MsgMintBadge {
    string creator = 1;
    uint64 collectionId = 2;
    repeated BadgeSupplyAndAmount badgeSupplys = 3;
    repeated Transfers transfers = 4;
    repeated Claim claims = 5;
}

message MsgMintBadgeResponse {
    uint64 nextBadgeId = 1; //ID of next badgeId after creating all badges.
}

//For each amount, for each toAddress, we will attempt to transfer all the badgeIds for the badge with ID badgeId.
message MsgTransferBadge {
    string creator = 1;
    uint64 collectionId = 2;
    uint64 from = 3;
    repeated Transfers transfers = 4;
}

message MsgTransferBadgeResponse {}

//Sets an approval (no add or remove), just set it for an address.
message MsgSetApproval {
    string creator = 1;
    uint64 collectionId = 2;
    uint64 address = 3; //The address that are approved to transfer the balances.
    repeated Balance balances = 4; //approval balances for every badgeId
}

message MsgSetApprovalResponse {}


message MsgUpdateDisallowedTransfers {
  string creator = 1;
  uint64 collectionId = 2;
  repeated TransferMapping disallowedTransfers = 3;
}

message MsgUpdateDisallowedTransfersResponse {
}

//Update badge Uris with new URI object, if permitted.
message MsgUpdateUris {
  string creator = 1;
  uint64 collectionId = 2;
  string collectionUri = 3;
  string badgeUri = 4;
}

message MsgUpdateUrisResponse {
}

//Update badge permissions with new permissions, if permitted.
message MsgUpdatePermissions {
  string creator = 1;
  uint64 collectionId = 2;
  uint64 permissions = 3;
}

message MsgUpdatePermissionsResponse {
}

//Transfer manager to this address. Recipient must have made a request.
message MsgTransferManager {
  string creator = 1;
  uint64 collectionId = 2;
  uint64 address = 3;
}

message MsgTransferManagerResponse {
}

//Add / remove request for manager to be transferred. 
message MsgRequestTransferManager {
  string creator = 1;
  uint64 collectionId = 2;
  bool addRequest = 3;
}

message MsgRequestTransferManagerResponse {
}

//Update badge bytes, if permitted
message MsgUpdateBytes {
  string creator = 1;
  uint64 collectionId = 2;
  string newBytes = 3;
}

message MsgUpdateBytesResponse {
}

message MsgRegisterAddresses {
  string creator = 1;
  repeated string addressesToRegister = 2;
}

message MsgRegisterAddressesResponse {
    IdRange registeredAddressNumbers = 1;
}


//Consistent with tendermint/crypto merkle tree
message Proof {
    uint64          total     = 1;
    uint64          index     = 2;
    string           leafHash = 3;
    repeated string  aunts     = 4;
}

message MsgClaimBadge {
    string creator = 1;
    uint64 claimId = 2;
    uint64 collectionId = 3;
    string leaf = 4;
    Proof proof = 5;
}
  
message MsgClaimBadgeResponse {}

// this line is used by starport scaffolding # proto/tx/message

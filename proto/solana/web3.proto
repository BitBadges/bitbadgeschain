syntax = "proto3";
package solana;

import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "bitbadgeschain/chain-handlers/solana/types";

// ExtensionOptionsWeb3Tx is an extension option that specifies the typed chain id,
// the fee payer as well as its signature data.
message ExtensionOptionsWeb3TxSolana {
  option (gogoproto.goproto_getters) = false;
  option (amino.name) = "solana/ExtensionOptionsWeb3TxSolana";


  // typed_data_chain_id is used only in EIP712 Domain and should match
  // Ethereum network ID in a Web3 provider (e.g. Metamask).
  uint64 typed_data_chain_id = 1
      [(gogoproto.jsontag) = "typedDataChainID,omitempty", (gogoproto.customname) = "TypedDataChainID"];

  // fee_payer is an account address for the fee payer. It will be validated
  // during EIP712 signature checking.
  string fee_payer = 2 [(gogoproto.jsontag) = "feePayer,omitempty"];

  // fee_payer_sig is a signature data from the fee paying account,
  // allows to perform fee delegation when using EIP712 Domain.
  bytes fee_payer_sig = 3 [(gogoproto.jsontag) = "feePayerSig,omitempty"];

  // chain should be "Solana"
  string chain = 4 [(gogoproto.jsontag) = "chain,omitempty"];

  // sol_address is the address of the solana account. 
  // Used for indexing purposes because we can't natively go from a cosmos address (what is used on-chain) to a solana address
  // without knowing the solana address in the first place. This is because conversion to cosmos requires a hash of the solana address.
  string sol_address = 5 [(gogoproto.jsontag) = "solAddress,omitempty"];
}

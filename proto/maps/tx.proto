syntax = "proto3";

package maps;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "maps/permissions.proto";
import "maps/timelines.proto";
import "maps/balances.proto";
import "maps/params.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/maps/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateMap (MsgCreateMap) returns (MsgCreateMapResponse);
  rpc UpdateMap (MsgUpdateMap) returns (MsgUpdateMapResponse);
  rpc DeleteMap (MsgDeleteMap) returns (MsgDeleteMapResponse);
  rpc SetValue (MsgSetValue) returns (MsgSetValueResponse);
}


// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "maps/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MapCustomMsgType {
  MsgSetValue setValueMsg = 1;
  MsgCreateMap createMapMsg = 2;
  MsgUpdateMap updateMapMsg = 3;
  MsgDeleteMap deleteMapMsg = 4;
}

message ValueStore {
  string key = 1;
  string value = 2;
  string lastSetBy = 3;
}

message MapUpdateCriteria {
  //All ID slots are only updatable by manager
  bool managerOnly = 1;
  //ID slots are only updatable by badge ID owner of this collection (>1 balance at current time)
  string collectionId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  //Keys are address based and can only be updated by that respective address
  bool creatorOnly = 3;
  //Claim slots. Can unclaim by setting to blank. Uses lastSetBy.
  bool firstComeFirstServe = 4;
}

message ValueOptions {
  bool noDuplicates = 1;
  bool permanentOnceSet = 2;
  bool expectUint = 3;
  bool expectBoolean = 4;
  bool expectAddress = 5;
  bool expectUri = 6;
}

message MapPermissions {
  repeated TimedUpdatePermission canUpdateMetadata = 1;
  repeated TimedUpdatePermission canUpdateManager = 2;
  repeated ActionPermission canDeleteMap = 3;
}


message Map {
  string creator = 1;
  string mapId = 2; 

  string inheritManagerTimelineFrom = 3 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  repeated ManagerTimeline managerTimeline = 4;

  //config options that will not change at all
  MapUpdateCriteria updateCriteria = 5;
  ValueOptions valueOptions = 6;
  string defaultValue = 7;

  repeated MapMetadataTimeline metadataTimeline = 10;

  MapPermissions permissions = 11;
}

message MsgCreateMap {  
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "maps/CreateMap";
  
  string creator = 1;
  string mapId = 2; 

  string inheritManagerTimelineFrom = 3 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  repeated ManagerTimeline managerTimeline = 4;

  //config options that will not change at all
  MapUpdateCriteria updateCriteria = 5;
  ValueOptions valueOptions = 6;
  string defaultValue = 7;

  repeated MapMetadataTimeline metadataTimeline = 9;

  MapPermissions permissions = 10;
}

message MsgCreateMapResponse {}

message MsgUpdateMap {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "maps/UpdateMap";

  string creator = 1;
  string mapId = 2;

  bool updateManagerTimeline = 3;
  repeated ManagerTimeline managerTimeline = 4;

  bool updateMetadataTimeline = 7;
  repeated MapMetadataTimeline metadataTimeline = 8;

  bool updatePermissions = 9;
  MapPermissions permissions = 10;
}

message MsgUpdateMapResponse {}

message MsgDeleteMap {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "maps/DeleteMap";

  string creator = 1;
  string mapId = 2;
}

message MsgDeleteMapResponse {}

message SetOptions {
  bool useMostRecentCollectionId = 1;
}

message MsgSetValue {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "maps/SetValue";

  string creator = 1;
  string mapId = 2;
  string key = 3;
  string value = 4;
  SetOptions options = 5;
}

message MsgSetValueResponse {}
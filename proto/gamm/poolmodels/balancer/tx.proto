syntax = "proto3";
package gamm.poolmodels.balancer;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "gamm/poolmodels/balancer/balancerPool.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/gamm/poolmodels/balancer";

service Msg {
  rpc CreateBalancerPool(MsgCreateBalancerPool)
      returns (MsgCreateBalancerPoolResponse);
}

// ===================== MsgCreatePool
message MsgCreateBalancerPool {
  option (amino.name) = "osmosis/gamm/create-balancer-pool";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  gamm.poolmodels.balancer.PoolParams pool_params = 2
      [ (gogoproto.moretags) = "yaml:\"pool_params\"" ];

  repeated gamm.poolmodels.balancer.PoolAsset pool_assets = 3
      [ (gogoproto.nullable) = false ];

  string future_pool_governor = 4
      [ (gogoproto.moretags) = "yaml:\"future_pool_governor\"" ];
}

// Returns the poolID
message MsgCreateBalancerPoolResponse {
  uint64 pool_id = 1 [ (gogoproto.customname) = "PoolID" ];
}

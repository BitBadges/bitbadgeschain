syntax = "proto3";
package wasmx;

import "gogoproto/gogo.proto";

option go_package = "github.com/bitbadges/bitbadgeschain/x/wasmx/types";

// Msg defines the wasmx Msg service.
service Msg {
  rpc ExecuteContractCompat(MsgExecuteContractCompat) returns (MsgExecuteContractCompatResponse);
  rpc InstantiateContractCompat(MsgInstantiateContractCompat) returns (MsgInstantiateContractCompatResponse);
}

// MsgExecuteContractCompat submits the given message data to a smart contract, compatible with EIP712
message MsgExecuteContractCompat {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // Contract is the address of the smart contract
  string contract = 2;
  // Msg json encoded message to be passed to the contract
  string msg = 3;
  // Funds coins that are transferred to the contract on execution
  string funds = 4;
}

// MsgExecuteContractCompatResponse returns execution result data.
message MsgExecuteContractCompatResponse {
    // Data contains bytes to returned from the contract
    bytes data = 1;
}

message MsgInstantiateContractCompat {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // Code ID obtained from store wasm code
  string codeId = 2 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  // Label is a human-readable string for labelling the contract
  string label = 3;
  // Funds coins that are transferred to the contract on instantiation
  string funds = 4;
}

// MsgInstantiateContractCompatResponse returns store result data.
message MsgInstantiateContractCompatResponse {
  string address = 1;
  bytes data = 2;
}
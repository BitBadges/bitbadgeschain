syntax = "proto3";
package wasmx;

option go_package = "github.com/bitbadges/bitbadgeschain/x/wasmx/types";

// Msg defines the wasmx Msg service.
service Msg {
  rpc ExecuteContractCompat(MsgExecuteContractCompat) returns (MsgExecuteContractCompatResponse);
  rpc StoreCodeCompat(MsgStoreCodeCompat) returns (MsgStoreCodeCompatResponse);
}

// MsgExecuteContractCompat submits the given message data to a smart contract, compatible with EIP712
message MsgExecuteContractCompat {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // Contract is the address of the smart contract
  string contract = 2;
  // Msg json encoded message to be passed to the contract
  string msg = 3;
  // Funds coins that are transferred to the contract on execution
  string funds = 4;
}

// MsgExecuteContractCompatResponse returns execution result data.
message MsgExecuteContractCompatResponse {
    // Data contains bytes to returned from the contract
    bytes data = 1;
}

// MsgStoreCodeCompat submits the given message data to a smart contract, compatible with EIP712
message MsgStoreCodeCompat {
  // Sender is the that actor that signed the messages
  string sender = 1;
  // WasmByteCode is the raw wasm bytes
  string hexWasmByteCode = 2;
}

// MsgStoreCodeCompatResponse returns store result data.
message MsgStoreCodeCompatResponse {
  // CodeID is the reference to the stored WASM code
  string codeId = 1 [(gogoproto.customtype) = "Uint", (gogoproto.nullable) = false];
  // Checksum is the sha256 hash of the stored code
  bytes checksum = 2;
}
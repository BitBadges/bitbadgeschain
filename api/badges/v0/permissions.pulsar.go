// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package v0

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_CollectionPermissions_1_list)(nil)

type _CollectionPermissions_1_list struct {
	list *[]*ActionPermission
}

func (x *_CollectionPermissions_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ActionPermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ActionPermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_1_list) AppendMutable() protoreflect.Value {
	v := new(ActionPermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_1_list) NewElement() protoreflect.Value {
	v := new(ActionPermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_2_list)(nil)

type _CollectionPermissions_2_list struct {
	list *[]*TimedUpdatePermission
}

func (x *_CollectionPermissions_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_2_list) AppendMutable() protoreflect.Value {
	v := new(TimedUpdatePermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_2_list) NewElement() protoreflect.Value {
	v := new(TimedUpdatePermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_3_list)(nil)

type _CollectionPermissions_3_list struct {
	list *[]*TimedUpdatePermission
}

func (x *_CollectionPermissions_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_3_list) AppendMutable() protoreflect.Value {
	v := new(TimedUpdatePermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_3_list) NewElement() protoreflect.Value {
	v := new(TimedUpdatePermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_4_list)(nil)

type _CollectionPermissions_4_list struct {
	list *[]*TimedUpdatePermission
}

func (x *_CollectionPermissions_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_4_list) AppendMutable() protoreflect.Value {
	v := new(TimedUpdatePermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_4_list) NewElement() protoreflect.Value {
	v := new(TimedUpdatePermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_5_list)(nil)

type _CollectionPermissions_5_list struct {
	list *[]*TimedUpdatePermission
}

func (x *_CollectionPermissions_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_5_list) AppendMutable() protoreflect.Value {
	v := new(TimedUpdatePermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_5_list) NewElement() protoreflect.Value {
	v := new(TimedUpdatePermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_6_list)(nil)

type _CollectionPermissions_6_list struct {
	list *[]*TimedUpdatePermission
}

func (x *_CollectionPermissions_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_6_list) AppendMutable() protoreflect.Value {
	v := new(TimedUpdatePermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_6_list) NewElement() protoreflect.Value {
	v := new(TimedUpdatePermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_7_list)(nil)

type _CollectionPermissions_7_list struct {
	list *[]*TimedUpdatePermission
}

func (x *_CollectionPermissions_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdatePermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_7_list) AppendMutable() protoreflect.Value {
	v := new(TimedUpdatePermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_7_list) NewElement() protoreflect.Value {
	v := new(TimedUpdatePermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_8_list)(nil)

type _CollectionPermissions_8_list struct {
	list *[]*BadgeIdsActionPermission
}

func (x *_CollectionPermissions_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BadgeIdsActionPermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BadgeIdsActionPermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_8_list) AppendMutable() protoreflect.Value {
	v := new(BadgeIdsActionPermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_8_list) NewElement() protoreflect.Value {
	v := new(BadgeIdsActionPermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_9_list)(nil)

type _CollectionPermissions_9_list struct {
	list *[]*TimedUpdateWithBadgeIdsPermission
}

func (x *_CollectionPermissions_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdateWithBadgeIdsPermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TimedUpdateWithBadgeIdsPermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_9_list) AppendMutable() protoreflect.Value {
	v := new(TimedUpdateWithBadgeIdsPermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_9_list) NewElement() protoreflect.Value {
	v := new(TimedUpdateWithBadgeIdsPermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionPermissions_10_list)(nil)

type _CollectionPermissions_10_list struct {
	list *[]*CollectionApprovalPermission
}

func (x *_CollectionPermissions_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionPermissions_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionPermissions_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CollectionApprovalPermission)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionPermissions_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CollectionApprovalPermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionPermissions_10_list) AppendMutable() protoreflect.Value {
	v := new(CollectionApprovalPermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionPermissions_10_list) NewElement() protoreflect.Value {
	v := new(CollectionApprovalPermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionPermissions_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_CollectionPermissions                                   protoreflect.MessageDescriptor
	fd_CollectionPermissions_canDeleteCollection               protoreflect.FieldDescriptor
	fd_CollectionPermissions_canArchiveCollection              protoreflect.FieldDescriptor
	fd_CollectionPermissions_canUpdateOffChainBalancesMetadata protoreflect.FieldDescriptor
	fd_CollectionPermissions_canUpdateStandards                protoreflect.FieldDescriptor
	fd_CollectionPermissions_canUpdateCustomData               protoreflect.FieldDescriptor
	fd_CollectionPermissions_canUpdateManager                  protoreflect.FieldDescriptor
	fd_CollectionPermissions_canUpdateCollectionMetadata       protoreflect.FieldDescriptor
	fd_CollectionPermissions_canUpdateValidBadgeIds            protoreflect.FieldDescriptor
	fd_CollectionPermissions_canUpdateBadgeMetadata            protoreflect.FieldDescriptor
	fd_CollectionPermissions_canUpdateCollectionApprovals      protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_CollectionPermissions = File_badges_v0_permissions_proto.Messages().ByName("CollectionPermissions")
	fd_CollectionPermissions_canDeleteCollection = md_CollectionPermissions.Fields().ByName("canDeleteCollection")
	fd_CollectionPermissions_canArchiveCollection = md_CollectionPermissions.Fields().ByName("canArchiveCollection")
	fd_CollectionPermissions_canUpdateOffChainBalancesMetadata = md_CollectionPermissions.Fields().ByName("canUpdateOffChainBalancesMetadata")
	fd_CollectionPermissions_canUpdateStandards = md_CollectionPermissions.Fields().ByName("canUpdateStandards")
	fd_CollectionPermissions_canUpdateCustomData = md_CollectionPermissions.Fields().ByName("canUpdateCustomData")
	fd_CollectionPermissions_canUpdateManager = md_CollectionPermissions.Fields().ByName("canUpdateManager")
	fd_CollectionPermissions_canUpdateCollectionMetadata = md_CollectionPermissions.Fields().ByName("canUpdateCollectionMetadata")
	fd_CollectionPermissions_canUpdateValidBadgeIds = md_CollectionPermissions.Fields().ByName("canUpdateValidBadgeIds")
	fd_CollectionPermissions_canUpdateBadgeMetadata = md_CollectionPermissions.Fields().ByName("canUpdateBadgeMetadata")
	fd_CollectionPermissions_canUpdateCollectionApprovals = md_CollectionPermissions.Fields().ByName("canUpdateCollectionApprovals")
}

var _ protoreflect.Message = (*fastReflection_CollectionPermissions)(nil)

type fastReflection_CollectionPermissions CollectionPermissions

func (x *CollectionPermissions) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CollectionPermissions)(x)
}

func (x *CollectionPermissions) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CollectionPermissions_messageType fastReflection_CollectionPermissions_messageType
var _ protoreflect.MessageType = fastReflection_CollectionPermissions_messageType{}

type fastReflection_CollectionPermissions_messageType struct{}

func (x fastReflection_CollectionPermissions_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CollectionPermissions)(nil)
}
func (x fastReflection_CollectionPermissions_messageType) New() protoreflect.Message {
	return new(fastReflection_CollectionPermissions)
}
func (x fastReflection_CollectionPermissions_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CollectionPermissions
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CollectionPermissions) Descriptor() protoreflect.MessageDescriptor {
	return md_CollectionPermissions
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CollectionPermissions) Type() protoreflect.MessageType {
	return _fastReflection_CollectionPermissions_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CollectionPermissions) New() protoreflect.Message {
	return new(fastReflection_CollectionPermissions)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CollectionPermissions) Interface() protoreflect.ProtoMessage {
	return (*CollectionPermissions)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CollectionPermissions) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.CanDeleteCollection) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_1_list{list: &x.CanDeleteCollection})
		if !f(fd_CollectionPermissions_canDeleteCollection, value) {
			return
		}
	}
	if len(x.CanArchiveCollection) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_2_list{list: &x.CanArchiveCollection})
		if !f(fd_CollectionPermissions_canArchiveCollection, value) {
			return
		}
	}
	if len(x.CanUpdateOffChainBalancesMetadata) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_3_list{list: &x.CanUpdateOffChainBalancesMetadata})
		if !f(fd_CollectionPermissions_canUpdateOffChainBalancesMetadata, value) {
			return
		}
	}
	if len(x.CanUpdateStandards) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_4_list{list: &x.CanUpdateStandards})
		if !f(fd_CollectionPermissions_canUpdateStandards, value) {
			return
		}
	}
	if len(x.CanUpdateCustomData) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_5_list{list: &x.CanUpdateCustomData})
		if !f(fd_CollectionPermissions_canUpdateCustomData, value) {
			return
		}
	}
	if len(x.CanUpdateManager) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_6_list{list: &x.CanUpdateManager})
		if !f(fd_CollectionPermissions_canUpdateManager, value) {
			return
		}
	}
	if len(x.CanUpdateCollectionMetadata) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_7_list{list: &x.CanUpdateCollectionMetadata})
		if !f(fd_CollectionPermissions_canUpdateCollectionMetadata, value) {
			return
		}
	}
	if len(x.CanUpdateValidBadgeIds) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_8_list{list: &x.CanUpdateValidBadgeIds})
		if !f(fd_CollectionPermissions_canUpdateValidBadgeIds, value) {
			return
		}
	}
	if len(x.CanUpdateBadgeMetadata) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_9_list{list: &x.CanUpdateBadgeMetadata})
		if !f(fd_CollectionPermissions_canUpdateBadgeMetadata, value) {
			return
		}
	}
	if len(x.CanUpdateCollectionApprovals) != 0 {
		value := protoreflect.ValueOfList(&_CollectionPermissions_10_list{list: &x.CanUpdateCollectionApprovals})
		if !f(fd_CollectionPermissions_canUpdateCollectionApprovals, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CollectionPermissions) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.CollectionPermissions.canDeleteCollection":
		return len(x.CanDeleteCollection) != 0
	case "badges.v0.CollectionPermissions.canArchiveCollection":
		return len(x.CanArchiveCollection) != 0
	case "badges.v0.CollectionPermissions.canUpdateOffChainBalancesMetadata":
		return len(x.CanUpdateOffChainBalancesMetadata) != 0
	case "badges.v0.CollectionPermissions.canUpdateStandards":
		return len(x.CanUpdateStandards) != 0
	case "badges.v0.CollectionPermissions.canUpdateCustomData":
		return len(x.CanUpdateCustomData) != 0
	case "badges.v0.CollectionPermissions.canUpdateManager":
		return len(x.CanUpdateManager) != 0
	case "badges.v0.CollectionPermissions.canUpdateCollectionMetadata":
		return len(x.CanUpdateCollectionMetadata) != 0
	case "badges.v0.CollectionPermissions.canUpdateValidBadgeIds":
		return len(x.CanUpdateValidBadgeIds) != 0
	case "badges.v0.CollectionPermissions.canUpdateBadgeMetadata":
		return len(x.CanUpdateBadgeMetadata) != 0
	case "badges.v0.CollectionPermissions.canUpdateCollectionApprovals":
		return len(x.CanUpdateCollectionApprovals) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionPermissions does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CollectionPermissions) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.CollectionPermissions.canDeleteCollection":
		x.CanDeleteCollection = nil
	case "badges.v0.CollectionPermissions.canArchiveCollection":
		x.CanArchiveCollection = nil
	case "badges.v0.CollectionPermissions.canUpdateOffChainBalancesMetadata":
		x.CanUpdateOffChainBalancesMetadata = nil
	case "badges.v0.CollectionPermissions.canUpdateStandards":
		x.CanUpdateStandards = nil
	case "badges.v0.CollectionPermissions.canUpdateCustomData":
		x.CanUpdateCustomData = nil
	case "badges.v0.CollectionPermissions.canUpdateManager":
		x.CanUpdateManager = nil
	case "badges.v0.CollectionPermissions.canUpdateCollectionMetadata":
		x.CanUpdateCollectionMetadata = nil
	case "badges.v0.CollectionPermissions.canUpdateValidBadgeIds":
		x.CanUpdateValidBadgeIds = nil
	case "badges.v0.CollectionPermissions.canUpdateBadgeMetadata":
		x.CanUpdateBadgeMetadata = nil
	case "badges.v0.CollectionPermissions.canUpdateCollectionApprovals":
		x.CanUpdateCollectionApprovals = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionPermissions does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CollectionPermissions) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.CollectionPermissions.canDeleteCollection":
		if len(x.CanDeleteCollection) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_1_list{})
		}
		listValue := &_CollectionPermissions_1_list{list: &x.CanDeleteCollection}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canArchiveCollection":
		if len(x.CanArchiveCollection) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_2_list{})
		}
		listValue := &_CollectionPermissions_2_list{list: &x.CanArchiveCollection}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canUpdateOffChainBalancesMetadata":
		if len(x.CanUpdateOffChainBalancesMetadata) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_3_list{})
		}
		listValue := &_CollectionPermissions_3_list{list: &x.CanUpdateOffChainBalancesMetadata}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canUpdateStandards":
		if len(x.CanUpdateStandards) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_4_list{})
		}
		listValue := &_CollectionPermissions_4_list{list: &x.CanUpdateStandards}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canUpdateCustomData":
		if len(x.CanUpdateCustomData) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_5_list{})
		}
		listValue := &_CollectionPermissions_5_list{list: &x.CanUpdateCustomData}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canUpdateManager":
		if len(x.CanUpdateManager) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_6_list{})
		}
		listValue := &_CollectionPermissions_6_list{list: &x.CanUpdateManager}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canUpdateCollectionMetadata":
		if len(x.CanUpdateCollectionMetadata) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_7_list{})
		}
		listValue := &_CollectionPermissions_7_list{list: &x.CanUpdateCollectionMetadata}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canUpdateValidBadgeIds":
		if len(x.CanUpdateValidBadgeIds) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_8_list{})
		}
		listValue := &_CollectionPermissions_8_list{list: &x.CanUpdateValidBadgeIds}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canUpdateBadgeMetadata":
		if len(x.CanUpdateBadgeMetadata) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_9_list{})
		}
		listValue := &_CollectionPermissions_9_list{list: &x.CanUpdateBadgeMetadata}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionPermissions.canUpdateCollectionApprovals":
		if len(x.CanUpdateCollectionApprovals) == 0 {
			return protoreflect.ValueOfList(&_CollectionPermissions_10_list{})
		}
		listValue := &_CollectionPermissions_10_list{list: &x.CanUpdateCollectionApprovals}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionPermissions does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CollectionPermissions) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.CollectionPermissions.canDeleteCollection":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_1_list)
		x.CanDeleteCollection = *clv.list
	case "badges.v0.CollectionPermissions.canArchiveCollection":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_2_list)
		x.CanArchiveCollection = *clv.list
	case "badges.v0.CollectionPermissions.canUpdateOffChainBalancesMetadata":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_3_list)
		x.CanUpdateOffChainBalancesMetadata = *clv.list
	case "badges.v0.CollectionPermissions.canUpdateStandards":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_4_list)
		x.CanUpdateStandards = *clv.list
	case "badges.v0.CollectionPermissions.canUpdateCustomData":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_5_list)
		x.CanUpdateCustomData = *clv.list
	case "badges.v0.CollectionPermissions.canUpdateManager":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_6_list)
		x.CanUpdateManager = *clv.list
	case "badges.v0.CollectionPermissions.canUpdateCollectionMetadata":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_7_list)
		x.CanUpdateCollectionMetadata = *clv.list
	case "badges.v0.CollectionPermissions.canUpdateValidBadgeIds":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_8_list)
		x.CanUpdateValidBadgeIds = *clv.list
	case "badges.v0.CollectionPermissions.canUpdateBadgeMetadata":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_9_list)
		x.CanUpdateBadgeMetadata = *clv.list
	case "badges.v0.CollectionPermissions.canUpdateCollectionApprovals":
		lv := value.List()
		clv := lv.(*_CollectionPermissions_10_list)
		x.CanUpdateCollectionApprovals = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionPermissions does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CollectionPermissions) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.CollectionPermissions.canDeleteCollection":
		if x.CanDeleteCollection == nil {
			x.CanDeleteCollection = []*ActionPermission{}
		}
		value := &_CollectionPermissions_1_list{list: &x.CanDeleteCollection}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canArchiveCollection":
		if x.CanArchiveCollection == nil {
			x.CanArchiveCollection = []*TimedUpdatePermission{}
		}
		value := &_CollectionPermissions_2_list{list: &x.CanArchiveCollection}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canUpdateOffChainBalancesMetadata":
		if x.CanUpdateOffChainBalancesMetadata == nil {
			x.CanUpdateOffChainBalancesMetadata = []*TimedUpdatePermission{}
		}
		value := &_CollectionPermissions_3_list{list: &x.CanUpdateOffChainBalancesMetadata}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canUpdateStandards":
		if x.CanUpdateStandards == nil {
			x.CanUpdateStandards = []*TimedUpdatePermission{}
		}
		value := &_CollectionPermissions_4_list{list: &x.CanUpdateStandards}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canUpdateCustomData":
		if x.CanUpdateCustomData == nil {
			x.CanUpdateCustomData = []*TimedUpdatePermission{}
		}
		value := &_CollectionPermissions_5_list{list: &x.CanUpdateCustomData}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canUpdateManager":
		if x.CanUpdateManager == nil {
			x.CanUpdateManager = []*TimedUpdatePermission{}
		}
		value := &_CollectionPermissions_6_list{list: &x.CanUpdateManager}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canUpdateCollectionMetadata":
		if x.CanUpdateCollectionMetadata == nil {
			x.CanUpdateCollectionMetadata = []*TimedUpdatePermission{}
		}
		value := &_CollectionPermissions_7_list{list: &x.CanUpdateCollectionMetadata}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canUpdateValidBadgeIds":
		if x.CanUpdateValidBadgeIds == nil {
			x.CanUpdateValidBadgeIds = []*BadgeIdsActionPermission{}
		}
		value := &_CollectionPermissions_8_list{list: &x.CanUpdateValidBadgeIds}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canUpdateBadgeMetadata":
		if x.CanUpdateBadgeMetadata == nil {
			x.CanUpdateBadgeMetadata = []*TimedUpdateWithBadgeIdsPermission{}
		}
		value := &_CollectionPermissions_9_list{list: &x.CanUpdateBadgeMetadata}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionPermissions.canUpdateCollectionApprovals":
		if x.CanUpdateCollectionApprovals == nil {
			x.CanUpdateCollectionApprovals = []*CollectionApprovalPermission{}
		}
		value := &_CollectionPermissions_10_list{list: &x.CanUpdateCollectionApprovals}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionPermissions does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CollectionPermissions) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.CollectionPermissions.canDeleteCollection":
		list := []*ActionPermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_1_list{list: &list})
	case "badges.v0.CollectionPermissions.canArchiveCollection":
		list := []*TimedUpdatePermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_2_list{list: &list})
	case "badges.v0.CollectionPermissions.canUpdateOffChainBalancesMetadata":
		list := []*TimedUpdatePermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_3_list{list: &list})
	case "badges.v0.CollectionPermissions.canUpdateStandards":
		list := []*TimedUpdatePermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_4_list{list: &list})
	case "badges.v0.CollectionPermissions.canUpdateCustomData":
		list := []*TimedUpdatePermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_5_list{list: &list})
	case "badges.v0.CollectionPermissions.canUpdateManager":
		list := []*TimedUpdatePermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_6_list{list: &list})
	case "badges.v0.CollectionPermissions.canUpdateCollectionMetadata":
		list := []*TimedUpdatePermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_7_list{list: &list})
	case "badges.v0.CollectionPermissions.canUpdateValidBadgeIds":
		list := []*BadgeIdsActionPermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_8_list{list: &list})
	case "badges.v0.CollectionPermissions.canUpdateBadgeMetadata":
		list := []*TimedUpdateWithBadgeIdsPermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_9_list{list: &list})
	case "badges.v0.CollectionPermissions.canUpdateCollectionApprovals":
		list := []*CollectionApprovalPermission{}
		return protoreflect.ValueOfList(&_CollectionPermissions_10_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionPermissions does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CollectionPermissions) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.CollectionPermissions", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CollectionPermissions) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CollectionPermissions) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CollectionPermissions) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CollectionPermissions) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CollectionPermissions)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.CanDeleteCollection) > 0 {
			for _, e := range x.CanDeleteCollection {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanArchiveCollection) > 0 {
			for _, e := range x.CanArchiveCollection {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateOffChainBalancesMetadata) > 0 {
			for _, e := range x.CanUpdateOffChainBalancesMetadata {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateStandards) > 0 {
			for _, e := range x.CanUpdateStandards {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateCustomData) > 0 {
			for _, e := range x.CanUpdateCustomData {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateManager) > 0 {
			for _, e := range x.CanUpdateManager {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateCollectionMetadata) > 0 {
			for _, e := range x.CanUpdateCollectionMetadata {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateValidBadgeIds) > 0 {
			for _, e := range x.CanUpdateValidBadgeIds {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateBadgeMetadata) > 0 {
			for _, e := range x.CanUpdateBadgeMetadata {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateCollectionApprovals) > 0 {
			for _, e := range x.CanUpdateCollectionApprovals {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CollectionPermissions)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.CanUpdateCollectionApprovals) > 0 {
			for iNdEx := len(x.CanUpdateCollectionApprovals) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateCollectionApprovals[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.CanUpdateBadgeMetadata) > 0 {
			for iNdEx := len(x.CanUpdateBadgeMetadata) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateBadgeMetadata[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.CanUpdateValidBadgeIds) > 0 {
			for iNdEx := len(x.CanUpdateValidBadgeIds) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateValidBadgeIds[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.CanUpdateCollectionMetadata) > 0 {
			for iNdEx := len(x.CanUpdateCollectionMetadata) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateCollectionMetadata[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.CanUpdateManager) > 0 {
			for iNdEx := len(x.CanUpdateManager) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateManager[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.CanUpdateCustomData) > 0 {
			for iNdEx := len(x.CanUpdateCustomData) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateCustomData[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.CanUpdateStandards) > 0 {
			for iNdEx := len(x.CanUpdateStandards) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateStandards[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.CanUpdateOffChainBalancesMetadata) > 0 {
			for iNdEx := len(x.CanUpdateOffChainBalancesMetadata) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateOffChainBalancesMetadata[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.CanArchiveCollection) > 0 {
			for iNdEx := len(x.CanArchiveCollection) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanArchiveCollection[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.CanDeleteCollection) > 0 {
			for iNdEx := len(x.CanDeleteCollection) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanDeleteCollection[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CollectionPermissions)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CollectionPermissions: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CollectionPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanDeleteCollection", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanDeleteCollection = append(x.CanDeleteCollection, &ActionPermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanDeleteCollection[len(x.CanDeleteCollection)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanArchiveCollection", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanArchiveCollection = append(x.CanArchiveCollection, &TimedUpdatePermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanArchiveCollection[len(x.CanArchiveCollection)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateOffChainBalancesMetadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateOffChainBalancesMetadata = append(x.CanUpdateOffChainBalancesMetadata, &TimedUpdatePermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateOffChainBalancesMetadata[len(x.CanUpdateOffChainBalancesMetadata)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateStandards", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateStandards = append(x.CanUpdateStandards, &TimedUpdatePermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateStandards[len(x.CanUpdateStandards)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateCustomData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateCustomData = append(x.CanUpdateCustomData, &TimedUpdatePermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateCustomData[len(x.CanUpdateCustomData)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateManager", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateManager = append(x.CanUpdateManager, &TimedUpdatePermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateManager[len(x.CanUpdateManager)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateCollectionMetadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateCollectionMetadata = append(x.CanUpdateCollectionMetadata, &TimedUpdatePermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateCollectionMetadata[len(x.CanUpdateCollectionMetadata)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateValidBadgeIds", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateValidBadgeIds = append(x.CanUpdateValidBadgeIds, &BadgeIdsActionPermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateValidBadgeIds[len(x.CanUpdateValidBadgeIds)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateBadgeMetadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateBadgeMetadata = append(x.CanUpdateBadgeMetadata, &TimedUpdateWithBadgeIdsPermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateBadgeMetadata[len(x.CanUpdateBadgeMetadata)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateCollectionApprovals", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateCollectionApprovals = append(x.CanUpdateCollectionApprovals, &CollectionApprovalPermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateCollectionApprovals[len(x.CanUpdateCollectionApprovals)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_UserPermissions_1_list)(nil)

type _UserPermissions_1_list struct {
	list *[]*UserOutgoingApprovalPermission
}

func (x *_UserPermissions_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserPermissions_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserPermissions_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UserOutgoingApprovalPermission)
	(*x.list)[i] = concreteValue
}

func (x *_UserPermissions_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UserOutgoingApprovalPermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserPermissions_1_list) AppendMutable() protoreflect.Value {
	v := new(UserOutgoingApprovalPermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserPermissions_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserPermissions_1_list) NewElement() protoreflect.Value {
	v := new(UserOutgoingApprovalPermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserPermissions_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserPermissions_2_list)(nil)

type _UserPermissions_2_list struct {
	list *[]*UserIncomingApprovalPermission
}

func (x *_UserPermissions_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserPermissions_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserPermissions_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UserIncomingApprovalPermission)
	(*x.list)[i] = concreteValue
}

func (x *_UserPermissions_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UserIncomingApprovalPermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserPermissions_2_list) AppendMutable() protoreflect.Value {
	v := new(UserIncomingApprovalPermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserPermissions_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserPermissions_2_list) NewElement() protoreflect.Value {
	v := new(UserIncomingApprovalPermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserPermissions_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserPermissions_3_list)(nil)

type _UserPermissions_3_list struct {
	list *[]*ActionPermission
}

func (x *_UserPermissions_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserPermissions_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserPermissions_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ActionPermission)
	(*x.list)[i] = concreteValue
}

func (x *_UserPermissions_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ActionPermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserPermissions_3_list) AppendMutable() protoreflect.Value {
	v := new(ActionPermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserPermissions_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserPermissions_3_list) NewElement() protoreflect.Value {
	v := new(ActionPermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserPermissions_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserPermissions_4_list)(nil)

type _UserPermissions_4_list struct {
	list *[]*ActionPermission
}

func (x *_UserPermissions_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserPermissions_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserPermissions_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ActionPermission)
	(*x.list)[i] = concreteValue
}

func (x *_UserPermissions_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ActionPermission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserPermissions_4_list) AppendMutable() protoreflect.Value {
	v := new(ActionPermission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserPermissions_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserPermissions_4_list) NewElement() protoreflect.Value {
	v := new(ActionPermission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserPermissions_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_UserPermissions                                                    protoreflect.MessageDescriptor
	fd_UserPermissions_canUpdateOutgoingApprovals                         protoreflect.FieldDescriptor
	fd_UserPermissions_canUpdateIncomingApprovals                         protoreflect.FieldDescriptor
	fd_UserPermissions_canUpdateAutoApproveSelfInitiatedOutgoingTransfers protoreflect.FieldDescriptor
	fd_UserPermissions_canUpdateAutoApproveSelfInitiatedIncomingTransfers protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_UserPermissions = File_badges_v0_permissions_proto.Messages().ByName("UserPermissions")
	fd_UserPermissions_canUpdateOutgoingApprovals = md_UserPermissions.Fields().ByName("canUpdateOutgoingApprovals")
	fd_UserPermissions_canUpdateIncomingApprovals = md_UserPermissions.Fields().ByName("canUpdateIncomingApprovals")
	fd_UserPermissions_canUpdateAutoApproveSelfInitiatedOutgoingTransfers = md_UserPermissions.Fields().ByName("canUpdateAutoApproveSelfInitiatedOutgoingTransfers")
	fd_UserPermissions_canUpdateAutoApproveSelfInitiatedIncomingTransfers = md_UserPermissions.Fields().ByName("canUpdateAutoApproveSelfInitiatedIncomingTransfers")
}

var _ protoreflect.Message = (*fastReflection_UserPermissions)(nil)

type fastReflection_UserPermissions UserPermissions

func (x *UserPermissions) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UserPermissions)(x)
}

func (x *UserPermissions) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UserPermissions_messageType fastReflection_UserPermissions_messageType
var _ protoreflect.MessageType = fastReflection_UserPermissions_messageType{}

type fastReflection_UserPermissions_messageType struct{}

func (x fastReflection_UserPermissions_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UserPermissions)(nil)
}
func (x fastReflection_UserPermissions_messageType) New() protoreflect.Message {
	return new(fastReflection_UserPermissions)
}
func (x fastReflection_UserPermissions_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UserPermissions
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UserPermissions) Descriptor() protoreflect.MessageDescriptor {
	return md_UserPermissions
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UserPermissions) Type() protoreflect.MessageType {
	return _fastReflection_UserPermissions_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UserPermissions) New() protoreflect.Message {
	return new(fastReflection_UserPermissions)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UserPermissions) Interface() protoreflect.ProtoMessage {
	return (*UserPermissions)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UserPermissions) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.CanUpdateOutgoingApprovals) != 0 {
		value := protoreflect.ValueOfList(&_UserPermissions_1_list{list: &x.CanUpdateOutgoingApprovals})
		if !f(fd_UserPermissions_canUpdateOutgoingApprovals, value) {
			return
		}
	}
	if len(x.CanUpdateIncomingApprovals) != 0 {
		value := protoreflect.ValueOfList(&_UserPermissions_2_list{list: &x.CanUpdateIncomingApprovals})
		if !f(fd_UserPermissions_canUpdateIncomingApprovals, value) {
			return
		}
	}
	if len(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers) != 0 {
		value := protoreflect.ValueOfList(&_UserPermissions_3_list{list: &x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers})
		if !f(fd_UserPermissions_canUpdateAutoApproveSelfInitiatedOutgoingTransfers, value) {
			return
		}
	}
	if len(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers) != 0 {
		value := protoreflect.ValueOfList(&_UserPermissions_4_list{list: &x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers})
		if !f(fd_UserPermissions_canUpdateAutoApproveSelfInitiatedIncomingTransfers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UserPermissions) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.UserPermissions.canUpdateOutgoingApprovals":
		return len(x.CanUpdateOutgoingApprovals) != 0
	case "badges.v0.UserPermissions.canUpdateIncomingApprovals":
		return len(x.CanUpdateIncomingApprovals) != 0
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers":
		return len(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers) != 0
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers":
		return len(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.UserPermissions does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserPermissions) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.UserPermissions.canUpdateOutgoingApprovals":
		x.CanUpdateOutgoingApprovals = nil
	case "badges.v0.UserPermissions.canUpdateIncomingApprovals":
		x.CanUpdateIncomingApprovals = nil
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers":
		x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers = nil
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers":
		x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.UserPermissions does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UserPermissions) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.UserPermissions.canUpdateOutgoingApprovals":
		if len(x.CanUpdateOutgoingApprovals) == 0 {
			return protoreflect.ValueOfList(&_UserPermissions_1_list{})
		}
		listValue := &_UserPermissions_1_list{list: &x.CanUpdateOutgoingApprovals}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserPermissions.canUpdateIncomingApprovals":
		if len(x.CanUpdateIncomingApprovals) == 0 {
			return protoreflect.ValueOfList(&_UserPermissions_2_list{})
		}
		listValue := &_UserPermissions_2_list{list: &x.CanUpdateIncomingApprovals}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers":
		if len(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers) == 0 {
			return protoreflect.ValueOfList(&_UserPermissions_3_list{})
		}
		listValue := &_UserPermissions_3_list{list: &x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers":
		if len(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers) == 0 {
			return protoreflect.ValueOfList(&_UserPermissions_4_list{})
		}
		listValue := &_UserPermissions_4_list{list: &x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.UserPermissions does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserPermissions) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.UserPermissions.canUpdateOutgoingApprovals":
		lv := value.List()
		clv := lv.(*_UserPermissions_1_list)
		x.CanUpdateOutgoingApprovals = *clv.list
	case "badges.v0.UserPermissions.canUpdateIncomingApprovals":
		lv := value.List()
		clv := lv.(*_UserPermissions_2_list)
		x.CanUpdateIncomingApprovals = *clv.list
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers":
		lv := value.List()
		clv := lv.(*_UserPermissions_3_list)
		x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers = *clv.list
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers":
		lv := value.List()
		clv := lv.(*_UserPermissions_4_list)
		x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.UserPermissions does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserPermissions) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.UserPermissions.canUpdateOutgoingApprovals":
		if x.CanUpdateOutgoingApprovals == nil {
			x.CanUpdateOutgoingApprovals = []*UserOutgoingApprovalPermission{}
		}
		value := &_UserPermissions_1_list{list: &x.CanUpdateOutgoingApprovals}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserPermissions.canUpdateIncomingApprovals":
		if x.CanUpdateIncomingApprovals == nil {
			x.CanUpdateIncomingApprovals = []*UserIncomingApprovalPermission{}
		}
		value := &_UserPermissions_2_list{list: &x.CanUpdateIncomingApprovals}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers":
		if x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers == nil {
			x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers = []*ActionPermission{}
		}
		value := &_UserPermissions_3_list{list: &x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers":
		if x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers == nil {
			x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers = []*ActionPermission{}
		}
		value := &_UserPermissions_4_list{list: &x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.UserPermissions does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UserPermissions) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.UserPermissions.canUpdateOutgoingApprovals":
		list := []*UserOutgoingApprovalPermission{}
		return protoreflect.ValueOfList(&_UserPermissions_1_list{list: &list})
	case "badges.v0.UserPermissions.canUpdateIncomingApprovals":
		list := []*UserIncomingApprovalPermission{}
		return protoreflect.ValueOfList(&_UserPermissions_2_list{list: &list})
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers":
		list := []*ActionPermission{}
		return protoreflect.ValueOfList(&_UserPermissions_3_list{list: &list})
	case "badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers":
		list := []*ActionPermission{}
		return protoreflect.ValueOfList(&_UserPermissions_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserPermissions"))
		}
		panic(fmt.Errorf("message badges.v0.UserPermissions does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UserPermissions) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.UserPermissions", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UserPermissions) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserPermissions) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UserPermissions) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UserPermissions) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UserPermissions)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.CanUpdateOutgoingApprovals) > 0 {
			for _, e := range x.CanUpdateOutgoingApprovals {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateIncomingApprovals) > 0 {
			for _, e := range x.CanUpdateIncomingApprovals {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers) > 0 {
			for _, e := range x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers) > 0 {
			for _, e := range x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UserPermissions)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers) > 0 {
			for iNdEx := len(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers) > 0 {
			for iNdEx := len(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.CanUpdateIncomingApprovals) > 0 {
			for iNdEx := len(x.CanUpdateIncomingApprovals) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateIncomingApprovals[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.CanUpdateOutgoingApprovals) > 0 {
			for iNdEx := len(x.CanUpdateOutgoingApprovals) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CanUpdateOutgoingApprovals[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UserPermissions)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserPermissions: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateOutgoingApprovals", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateOutgoingApprovals = append(x.CanUpdateOutgoingApprovals, &UserOutgoingApprovalPermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateOutgoingApprovals[len(x.CanUpdateOutgoingApprovals)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateIncomingApprovals", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateIncomingApprovals = append(x.CanUpdateIncomingApprovals, &UserIncomingApprovalPermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateIncomingApprovals[len(x.CanUpdateIncomingApprovals)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateAutoApproveSelfInitiatedOutgoingTransfers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers = append(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers, &ActionPermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers[len(x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CanUpdateAutoApproveSelfInitiatedIncomingTransfers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers = append(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers, &ActionPermission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers[len(x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_CollectionApprovalPermission_4_list)(nil)

type _CollectionApprovalPermission_4_list struct {
	list *[]*UintRange
}

func (x *_CollectionApprovalPermission_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionApprovalPermission_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionApprovalPermission_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionApprovalPermission_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionApprovalPermission_4_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionApprovalPermission_4_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionApprovalPermission_5_list)(nil)

type _CollectionApprovalPermission_5_list struct {
	list *[]*UintRange
}

func (x *_CollectionApprovalPermission_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionApprovalPermission_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionApprovalPermission_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionApprovalPermission_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionApprovalPermission_5_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionApprovalPermission_5_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionApprovalPermission_6_list)(nil)

type _CollectionApprovalPermission_6_list struct {
	list *[]*UintRange
}

func (x *_CollectionApprovalPermission_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionApprovalPermission_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionApprovalPermission_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionApprovalPermission_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionApprovalPermission_6_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionApprovalPermission_6_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionApprovalPermission_10_list)(nil)

type _CollectionApprovalPermission_10_list struct {
	list *[]*UintRange
}

func (x *_CollectionApprovalPermission_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionApprovalPermission_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionApprovalPermission_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionApprovalPermission_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionApprovalPermission_10_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionApprovalPermission_10_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CollectionApprovalPermission_11_list)(nil)

type _CollectionApprovalPermission_11_list struct {
	list *[]*UintRange
}

func (x *_CollectionApprovalPermission_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CollectionApprovalPermission_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CollectionApprovalPermission_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_CollectionApprovalPermission_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CollectionApprovalPermission_11_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_11_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CollectionApprovalPermission_11_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CollectionApprovalPermission_11_list) IsValid() bool {
	return x.list != nil
}

var (
	md_CollectionApprovalPermission                           protoreflect.MessageDescriptor
	fd_CollectionApprovalPermission_fromListId                protoreflect.FieldDescriptor
	fd_CollectionApprovalPermission_toListId                  protoreflect.FieldDescriptor
	fd_CollectionApprovalPermission_initiatedByListId         protoreflect.FieldDescriptor
	fd_CollectionApprovalPermission_transferTimes             protoreflect.FieldDescriptor
	fd_CollectionApprovalPermission_badgeIds                  protoreflect.FieldDescriptor
	fd_CollectionApprovalPermission_ownershipTimes            protoreflect.FieldDescriptor
	fd_CollectionApprovalPermission_approvalId                protoreflect.FieldDescriptor
	fd_CollectionApprovalPermission_permanentlyPermittedTimes protoreflect.FieldDescriptor
	fd_CollectionApprovalPermission_permanentlyForbiddenTimes protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_CollectionApprovalPermission = File_badges_v0_permissions_proto.Messages().ByName("CollectionApprovalPermission")
	fd_CollectionApprovalPermission_fromListId = md_CollectionApprovalPermission.Fields().ByName("fromListId")
	fd_CollectionApprovalPermission_toListId = md_CollectionApprovalPermission.Fields().ByName("toListId")
	fd_CollectionApprovalPermission_initiatedByListId = md_CollectionApprovalPermission.Fields().ByName("initiatedByListId")
	fd_CollectionApprovalPermission_transferTimes = md_CollectionApprovalPermission.Fields().ByName("transferTimes")
	fd_CollectionApprovalPermission_badgeIds = md_CollectionApprovalPermission.Fields().ByName("badgeIds")
	fd_CollectionApprovalPermission_ownershipTimes = md_CollectionApprovalPermission.Fields().ByName("ownershipTimes")
	fd_CollectionApprovalPermission_approvalId = md_CollectionApprovalPermission.Fields().ByName("approvalId")
	fd_CollectionApprovalPermission_permanentlyPermittedTimes = md_CollectionApprovalPermission.Fields().ByName("permanentlyPermittedTimes")
	fd_CollectionApprovalPermission_permanentlyForbiddenTimes = md_CollectionApprovalPermission.Fields().ByName("permanentlyForbiddenTimes")
}

var _ protoreflect.Message = (*fastReflection_CollectionApprovalPermission)(nil)

type fastReflection_CollectionApprovalPermission CollectionApprovalPermission

func (x *CollectionApprovalPermission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CollectionApprovalPermission)(x)
}

func (x *CollectionApprovalPermission) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CollectionApprovalPermission_messageType fastReflection_CollectionApprovalPermission_messageType
var _ protoreflect.MessageType = fastReflection_CollectionApprovalPermission_messageType{}

type fastReflection_CollectionApprovalPermission_messageType struct{}

func (x fastReflection_CollectionApprovalPermission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CollectionApprovalPermission)(nil)
}
func (x fastReflection_CollectionApprovalPermission_messageType) New() protoreflect.Message {
	return new(fastReflection_CollectionApprovalPermission)
}
func (x fastReflection_CollectionApprovalPermission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CollectionApprovalPermission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CollectionApprovalPermission) Descriptor() protoreflect.MessageDescriptor {
	return md_CollectionApprovalPermission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CollectionApprovalPermission) Type() protoreflect.MessageType {
	return _fastReflection_CollectionApprovalPermission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CollectionApprovalPermission) New() protoreflect.Message {
	return new(fastReflection_CollectionApprovalPermission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CollectionApprovalPermission) Interface() protoreflect.ProtoMessage {
	return (*CollectionApprovalPermission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CollectionApprovalPermission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FromListId != "" {
		value := protoreflect.ValueOfString(x.FromListId)
		if !f(fd_CollectionApprovalPermission_fromListId, value) {
			return
		}
	}
	if x.ToListId != "" {
		value := protoreflect.ValueOfString(x.ToListId)
		if !f(fd_CollectionApprovalPermission_toListId, value) {
			return
		}
	}
	if x.InitiatedByListId != "" {
		value := protoreflect.ValueOfString(x.InitiatedByListId)
		if !f(fd_CollectionApprovalPermission_initiatedByListId, value) {
			return
		}
	}
	if len(x.TransferTimes) != 0 {
		value := protoreflect.ValueOfList(&_CollectionApprovalPermission_4_list{list: &x.TransferTimes})
		if !f(fd_CollectionApprovalPermission_transferTimes, value) {
			return
		}
	}
	if len(x.BadgeIds) != 0 {
		value := protoreflect.ValueOfList(&_CollectionApprovalPermission_5_list{list: &x.BadgeIds})
		if !f(fd_CollectionApprovalPermission_badgeIds, value) {
			return
		}
	}
	if len(x.OwnershipTimes) != 0 {
		value := protoreflect.ValueOfList(&_CollectionApprovalPermission_6_list{list: &x.OwnershipTimes})
		if !f(fd_CollectionApprovalPermission_ownershipTimes, value) {
			return
		}
	}
	if x.ApprovalId != "" {
		value := protoreflect.ValueOfString(x.ApprovalId)
		if !f(fd_CollectionApprovalPermission_approvalId, value) {
			return
		}
	}
	if len(x.PermanentlyPermittedTimes) != 0 {
		value := protoreflect.ValueOfList(&_CollectionApprovalPermission_10_list{list: &x.PermanentlyPermittedTimes})
		if !f(fd_CollectionApprovalPermission_permanentlyPermittedTimes, value) {
			return
		}
	}
	if len(x.PermanentlyForbiddenTimes) != 0 {
		value := protoreflect.ValueOfList(&_CollectionApprovalPermission_11_list{list: &x.PermanentlyForbiddenTimes})
		if !f(fd_CollectionApprovalPermission_permanentlyForbiddenTimes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CollectionApprovalPermission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.CollectionApprovalPermission.fromListId":
		return x.FromListId != ""
	case "badges.v0.CollectionApprovalPermission.toListId":
		return x.ToListId != ""
	case "badges.v0.CollectionApprovalPermission.initiatedByListId":
		return x.InitiatedByListId != ""
	case "badges.v0.CollectionApprovalPermission.transferTimes":
		return len(x.TransferTimes) != 0
	case "badges.v0.CollectionApprovalPermission.badgeIds":
		return len(x.BadgeIds) != 0
	case "badges.v0.CollectionApprovalPermission.ownershipTimes":
		return len(x.OwnershipTimes) != 0
	case "badges.v0.CollectionApprovalPermission.approvalId":
		return x.ApprovalId != ""
	case "badges.v0.CollectionApprovalPermission.permanentlyPermittedTimes":
		return len(x.PermanentlyPermittedTimes) != 0
	case "badges.v0.CollectionApprovalPermission.permanentlyForbiddenTimes":
		return len(x.PermanentlyForbiddenTimes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CollectionApprovalPermission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.CollectionApprovalPermission.fromListId":
		x.FromListId = ""
	case "badges.v0.CollectionApprovalPermission.toListId":
		x.ToListId = ""
	case "badges.v0.CollectionApprovalPermission.initiatedByListId":
		x.InitiatedByListId = ""
	case "badges.v0.CollectionApprovalPermission.transferTimes":
		x.TransferTimes = nil
	case "badges.v0.CollectionApprovalPermission.badgeIds":
		x.BadgeIds = nil
	case "badges.v0.CollectionApprovalPermission.ownershipTimes":
		x.OwnershipTimes = nil
	case "badges.v0.CollectionApprovalPermission.approvalId":
		x.ApprovalId = ""
	case "badges.v0.CollectionApprovalPermission.permanentlyPermittedTimes":
		x.PermanentlyPermittedTimes = nil
	case "badges.v0.CollectionApprovalPermission.permanentlyForbiddenTimes":
		x.PermanentlyForbiddenTimes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CollectionApprovalPermission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.CollectionApprovalPermission.fromListId":
		value := x.FromListId
		return protoreflect.ValueOfString(value)
	case "badges.v0.CollectionApprovalPermission.toListId":
		value := x.ToListId
		return protoreflect.ValueOfString(value)
	case "badges.v0.CollectionApprovalPermission.initiatedByListId":
		value := x.InitiatedByListId
		return protoreflect.ValueOfString(value)
	case "badges.v0.CollectionApprovalPermission.transferTimes":
		if len(x.TransferTimes) == 0 {
			return protoreflect.ValueOfList(&_CollectionApprovalPermission_4_list{})
		}
		listValue := &_CollectionApprovalPermission_4_list{list: &x.TransferTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionApprovalPermission.badgeIds":
		if len(x.BadgeIds) == 0 {
			return protoreflect.ValueOfList(&_CollectionApprovalPermission_5_list{})
		}
		listValue := &_CollectionApprovalPermission_5_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionApprovalPermission.ownershipTimes":
		if len(x.OwnershipTimes) == 0 {
			return protoreflect.ValueOfList(&_CollectionApprovalPermission_6_list{})
		}
		listValue := &_CollectionApprovalPermission_6_list{list: &x.OwnershipTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionApprovalPermission.approvalId":
		value := x.ApprovalId
		return protoreflect.ValueOfString(value)
	case "badges.v0.CollectionApprovalPermission.permanentlyPermittedTimes":
		if len(x.PermanentlyPermittedTimes) == 0 {
			return protoreflect.ValueOfList(&_CollectionApprovalPermission_10_list{})
		}
		listValue := &_CollectionApprovalPermission_10_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.CollectionApprovalPermission.permanentlyForbiddenTimes":
		if len(x.PermanentlyForbiddenTimes) == 0 {
			return protoreflect.ValueOfList(&_CollectionApprovalPermission_11_list{})
		}
		listValue := &_CollectionApprovalPermission_11_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionApprovalPermission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CollectionApprovalPermission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.CollectionApprovalPermission.fromListId":
		x.FromListId = value.Interface().(string)
	case "badges.v0.CollectionApprovalPermission.toListId":
		x.ToListId = value.Interface().(string)
	case "badges.v0.CollectionApprovalPermission.initiatedByListId":
		x.InitiatedByListId = value.Interface().(string)
	case "badges.v0.CollectionApprovalPermission.transferTimes":
		lv := value.List()
		clv := lv.(*_CollectionApprovalPermission_4_list)
		x.TransferTimes = *clv.list
	case "badges.v0.CollectionApprovalPermission.badgeIds":
		lv := value.List()
		clv := lv.(*_CollectionApprovalPermission_5_list)
		x.BadgeIds = *clv.list
	case "badges.v0.CollectionApprovalPermission.ownershipTimes":
		lv := value.List()
		clv := lv.(*_CollectionApprovalPermission_6_list)
		x.OwnershipTimes = *clv.list
	case "badges.v0.CollectionApprovalPermission.approvalId":
		x.ApprovalId = value.Interface().(string)
	case "badges.v0.CollectionApprovalPermission.permanentlyPermittedTimes":
		lv := value.List()
		clv := lv.(*_CollectionApprovalPermission_10_list)
		x.PermanentlyPermittedTimes = *clv.list
	case "badges.v0.CollectionApprovalPermission.permanentlyForbiddenTimes":
		lv := value.List()
		clv := lv.(*_CollectionApprovalPermission_11_list)
		x.PermanentlyForbiddenTimes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CollectionApprovalPermission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.CollectionApprovalPermission.transferTimes":
		if x.TransferTimes == nil {
			x.TransferTimes = []*UintRange{}
		}
		value := &_CollectionApprovalPermission_4_list{list: &x.TransferTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionApprovalPermission.badgeIds":
		if x.BadgeIds == nil {
			x.BadgeIds = []*UintRange{}
		}
		value := &_CollectionApprovalPermission_5_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionApprovalPermission.ownershipTimes":
		if x.OwnershipTimes == nil {
			x.OwnershipTimes = []*UintRange{}
		}
		value := &_CollectionApprovalPermission_6_list{list: &x.OwnershipTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionApprovalPermission.permanentlyPermittedTimes":
		if x.PermanentlyPermittedTimes == nil {
			x.PermanentlyPermittedTimes = []*UintRange{}
		}
		value := &_CollectionApprovalPermission_10_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionApprovalPermission.permanentlyForbiddenTimes":
		if x.PermanentlyForbiddenTimes == nil {
			x.PermanentlyForbiddenTimes = []*UintRange{}
		}
		value := &_CollectionApprovalPermission_11_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.CollectionApprovalPermission.fromListId":
		panic(fmt.Errorf("field fromListId of message badges.v0.CollectionApprovalPermission is not mutable"))
	case "badges.v0.CollectionApprovalPermission.toListId":
		panic(fmt.Errorf("field toListId of message badges.v0.CollectionApprovalPermission is not mutable"))
	case "badges.v0.CollectionApprovalPermission.initiatedByListId":
		panic(fmt.Errorf("field initiatedByListId of message badges.v0.CollectionApprovalPermission is not mutable"))
	case "badges.v0.CollectionApprovalPermission.approvalId":
		panic(fmt.Errorf("field approvalId of message badges.v0.CollectionApprovalPermission is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CollectionApprovalPermission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.CollectionApprovalPermission.fromListId":
		return protoreflect.ValueOfString("")
	case "badges.v0.CollectionApprovalPermission.toListId":
		return protoreflect.ValueOfString("")
	case "badges.v0.CollectionApprovalPermission.initiatedByListId":
		return protoreflect.ValueOfString("")
	case "badges.v0.CollectionApprovalPermission.transferTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_CollectionApprovalPermission_4_list{list: &list})
	case "badges.v0.CollectionApprovalPermission.badgeIds":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_CollectionApprovalPermission_5_list{list: &list})
	case "badges.v0.CollectionApprovalPermission.ownershipTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_CollectionApprovalPermission_6_list{list: &list})
	case "badges.v0.CollectionApprovalPermission.approvalId":
		return protoreflect.ValueOfString("")
	case "badges.v0.CollectionApprovalPermission.permanentlyPermittedTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_CollectionApprovalPermission_10_list{list: &list})
	case "badges.v0.CollectionApprovalPermission.permanentlyForbiddenTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_CollectionApprovalPermission_11_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.CollectionApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.CollectionApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CollectionApprovalPermission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.CollectionApprovalPermission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CollectionApprovalPermission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CollectionApprovalPermission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CollectionApprovalPermission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CollectionApprovalPermission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CollectionApprovalPermission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.FromListId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ToListId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InitiatedByListId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.TransferTimes) > 0 {
			for _, e := range x.TransferTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.BadgeIds) > 0 {
			for _, e := range x.BadgeIds {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OwnershipTimes) > 0 {
			for _, e := range x.OwnershipTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.ApprovalId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for _, e := range x.PermanentlyPermittedTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for _, e := range x.PermanentlyForbiddenTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CollectionApprovalPermission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for iNdEx := len(x.PermanentlyForbiddenTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyForbiddenTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for iNdEx := len(x.PermanentlyPermittedTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyPermittedTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.ApprovalId) > 0 {
			i -= len(x.ApprovalId)
			copy(dAtA[i:], x.ApprovalId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ApprovalId)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.OwnershipTimes) > 0 {
			for iNdEx := len(x.OwnershipTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OwnershipTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.BadgeIds) > 0 {
			for iNdEx := len(x.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BadgeIds[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.TransferTimes) > 0 {
			for iNdEx := len(x.TransferTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TransferTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.InitiatedByListId) > 0 {
			i -= len(x.InitiatedByListId)
			copy(dAtA[i:], x.InitiatedByListId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InitiatedByListId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ToListId) > 0 {
			i -= len(x.ToListId)
			copy(dAtA[i:], x.ToListId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ToListId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.FromListId) > 0 {
			i -= len(x.FromListId)
			copy(dAtA[i:], x.FromListId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FromListId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CollectionApprovalPermission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CollectionApprovalPermission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CollectionApprovalPermission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FromListId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FromListId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ToListId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ToListId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitiatedByListId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InitiatedByListId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransferTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TransferTimes = append(x.TransferTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TransferTimes[len(x.TransferTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BadgeIds = append(x.BadgeIds, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BadgeIds[len(x.BadgeIds)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OwnershipTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OwnershipTimes = append(x.OwnershipTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OwnershipTimes[len(x.OwnershipTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ApprovalId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ApprovalId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyPermittedTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyPermittedTimes = append(x.PermanentlyPermittedTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyPermittedTimes[len(x.PermanentlyPermittedTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyForbiddenTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyForbiddenTimes = append(x.PermanentlyForbiddenTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyForbiddenTimes[len(x.PermanentlyForbiddenTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_UserOutgoingApprovalPermission_3_list)(nil)

type _UserOutgoingApprovalPermission_3_list struct {
	list *[]*UintRange
}

func (x *_UserOutgoingApprovalPermission_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserOutgoingApprovalPermission_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserOutgoingApprovalPermission_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserOutgoingApprovalPermission_3_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserOutgoingApprovalPermission_3_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserOutgoingApprovalPermission_4_list)(nil)

type _UserOutgoingApprovalPermission_4_list struct {
	list *[]*UintRange
}

func (x *_UserOutgoingApprovalPermission_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserOutgoingApprovalPermission_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserOutgoingApprovalPermission_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserOutgoingApprovalPermission_4_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserOutgoingApprovalPermission_4_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserOutgoingApprovalPermission_5_list)(nil)

type _UserOutgoingApprovalPermission_5_list struct {
	list *[]*UintRange
}

func (x *_UserOutgoingApprovalPermission_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserOutgoingApprovalPermission_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserOutgoingApprovalPermission_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserOutgoingApprovalPermission_5_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserOutgoingApprovalPermission_5_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserOutgoingApprovalPermission_9_list)(nil)

type _UserOutgoingApprovalPermission_9_list struct {
	list *[]*UintRange
}

func (x *_UserOutgoingApprovalPermission_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserOutgoingApprovalPermission_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserOutgoingApprovalPermission_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserOutgoingApprovalPermission_9_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserOutgoingApprovalPermission_9_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserOutgoingApprovalPermission_10_list)(nil)

type _UserOutgoingApprovalPermission_10_list struct {
	list *[]*UintRange
}

func (x *_UserOutgoingApprovalPermission_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserOutgoingApprovalPermission_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserOutgoingApprovalPermission_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserOutgoingApprovalPermission_10_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserOutgoingApprovalPermission_10_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserOutgoingApprovalPermission_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_UserOutgoingApprovalPermission                           protoreflect.MessageDescriptor
	fd_UserOutgoingApprovalPermission_toListId                  protoreflect.FieldDescriptor
	fd_UserOutgoingApprovalPermission_initiatedByListId         protoreflect.FieldDescriptor
	fd_UserOutgoingApprovalPermission_transferTimes             protoreflect.FieldDescriptor
	fd_UserOutgoingApprovalPermission_badgeIds                  protoreflect.FieldDescriptor
	fd_UserOutgoingApprovalPermission_ownershipTimes            protoreflect.FieldDescriptor
	fd_UserOutgoingApprovalPermission_approvalId                protoreflect.FieldDescriptor
	fd_UserOutgoingApprovalPermission_permanentlyPermittedTimes protoreflect.FieldDescriptor
	fd_UserOutgoingApprovalPermission_permanentlyForbiddenTimes protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_UserOutgoingApprovalPermission = File_badges_v0_permissions_proto.Messages().ByName("UserOutgoingApprovalPermission")
	fd_UserOutgoingApprovalPermission_toListId = md_UserOutgoingApprovalPermission.Fields().ByName("toListId")
	fd_UserOutgoingApprovalPermission_initiatedByListId = md_UserOutgoingApprovalPermission.Fields().ByName("initiatedByListId")
	fd_UserOutgoingApprovalPermission_transferTimes = md_UserOutgoingApprovalPermission.Fields().ByName("transferTimes")
	fd_UserOutgoingApprovalPermission_badgeIds = md_UserOutgoingApprovalPermission.Fields().ByName("badgeIds")
	fd_UserOutgoingApprovalPermission_ownershipTimes = md_UserOutgoingApprovalPermission.Fields().ByName("ownershipTimes")
	fd_UserOutgoingApprovalPermission_approvalId = md_UserOutgoingApprovalPermission.Fields().ByName("approvalId")
	fd_UserOutgoingApprovalPermission_permanentlyPermittedTimes = md_UserOutgoingApprovalPermission.Fields().ByName("permanentlyPermittedTimes")
	fd_UserOutgoingApprovalPermission_permanentlyForbiddenTimes = md_UserOutgoingApprovalPermission.Fields().ByName("permanentlyForbiddenTimes")
}

var _ protoreflect.Message = (*fastReflection_UserOutgoingApprovalPermission)(nil)

type fastReflection_UserOutgoingApprovalPermission UserOutgoingApprovalPermission

func (x *UserOutgoingApprovalPermission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UserOutgoingApprovalPermission)(x)
}

func (x *UserOutgoingApprovalPermission) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UserOutgoingApprovalPermission_messageType fastReflection_UserOutgoingApprovalPermission_messageType
var _ protoreflect.MessageType = fastReflection_UserOutgoingApprovalPermission_messageType{}

type fastReflection_UserOutgoingApprovalPermission_messageType struct{}

func (x fastReflection_UserOutgoingApprovalPermission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UserOutgoingApprovalPermission)(nil)
}
func (x fastReflection_UserOutgoingApprovalPermission_messageType) New() protoreflect.Message {
	return new(fastReflection_UserOutgoingApprovalPermission)
}
func (x fastReflection_UserOutgoingApprovalPermission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UserOutgoingApprovalPermission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UserOutgoingApprovalPermission) Descriptor() protoreflect.MessageDescriptor {
	return md_UserOutgoingApprovalPermission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UserOutgoingApprovalPermission) Type() protoreflect.MessageType {
	return _fastReflection_UserOutgoingApprovalPermission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UserOutgoingApprovalPermission) New() protoreflect.Message {
	return new(fastReflection_UserOutgoingApprovalPermission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UserOutgoingApprovalPermission) Interface() protoreflect.ProtoMessage {
	return (*UserOutgoingApprovalPermission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UserOutgoingApprovalPermission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ToListId != "" {
		value := protoreflect.ValueOfString(x.ToListId)
		if !f(fd_UserOutgoingApprovalPermission_toListId, value) {
			return
		}
	}
	if x.InitiatedByListId != "" {
		value := protoreflect.ValueOfString(x.InitiatedByListId)
		if !f(fd_UserOutgoingApprovalPermission_initiatedByListId, value) {
			return
		}
	}
	if len(x.TransferTimes) != 0 {
		value := protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_3_list{list: &x.TransferTimes})
		if !f(fd_UserOutgoingApprovalPermission_transferTimes, value) {
			return
		}
	}
	if len(x.BadgeIds) != 0 {
		value := protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_4_list{list: &x.BadgeIds})
		if !f(fd_UserOutgoingApprovalPermission_badgeIds, value) {
			return
		}
	}
	if len(x.OwnershipTimes) != 0 {
		value := protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_5_list{list: &x.OwnershipTimes})
		if !f(fd_UserOutgoingApprovalPermission_ownershipTimes, value) {
			return
		}
	}
	if x.ApprovalId != "" {
		value := protoreflect.ValueOfString(x.ApprovalId)
		if !f(fd_UserOutgoingApprovalPermission_approvalId, value) {
			return
		}
	}
	if len(x.PermanentlyPermittedTimes) != 0 {
		value := protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_9_list{list: &x.PermanentlyPermittedTimes})
		if !f(fd_UserOutgoingApprovalPermission_permanentlyPermittedTimes, value) {
			return
		}
	}
	if len(x.PermanentlyForbiddenTimes) != 0 {
		value := protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_10_list{list: &x.PermanentlyForbiddenTimes})
		if !f(fd_UserOutgoingApprovalPermission_permanentlyForbiddenTimes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UserOutgoingApprovalPermission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.UserOutgoingApprovalPermission.toListId":
		return x.ToListId != ""
	case "badges.v0.UserOutgoingApprovalPermission.initiatedByListId":
		return x.InitiatedByListId != ""
	case "badges.v0.UserOutgoingApprovalPermission.transferTimes":
		return len(x.TransferTimes) != 0
	case "badges.v0.UserOutgoingApprovalPermission.badgeIds":
		return len(x.BadgeIds) != 0
	case "badges.v0.UserOutgoingApprovalPermission.ownershipTimes":
		return len(x.OwnershipTimes) != 0
	case "badges.v0.UserOutgoingApprovalPermission.approvalId":
		return x.ApprovalId != ""
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyPermittedTimes":
		return len(x.PermanentlyPermittedTimes) != 0
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyForbiddenTimes":
		return len(x.PermanentlyForbiddenTimes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserOutgoingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserOutgoingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserOutgoingApprovalPermission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.UserOutgoingApprovalPermission.toListId":
		x.ToListId = ""
	case "badges.v0.UserOutgoingApprovalPermission.initiatedByListId":
		x.InitiatedByListId = ""
	case "badges.v0.UserOutgoingApprovalPermission.transferTimes":
		x.TransferTimes = nil
	case "badges.v0.UserOutgoingApprovalPermission.badgeIds":
		x.BadgeIds = nil
	case "badges.v0.UserOutgoingApprovalPermission.ownershipTimes":
		x.OwnershipTimes = nil
	case "badges.v0.UserOutgoingApprovalPermission.approvalId":
		x.ApprovalId = ""
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyPermittedTimes":
		x.PermanentlyPermittedTimes = nil
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyForbiddenTimes":
		x.PermanentlyForbiddenTimes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserOutgoingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserOutgoingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UserOutgoingApprovalPermission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.UserOutgoingApprovalPermission.toListId":
		value := x.ToListId
		return protoreflect.ValueOfString(value)
	case "badges.v0.UserOutgoingApprovalPermission.initiatedByListId":
		value := x.InitiatedByListId
		return protoreflect.ValueOfString(value)
	case "badges.v0.UserOutgoingApprovalPermission.transferTimes":
		if len(x.TransferTimes) == 0 {
			return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_3_list{})
		}
		listValue := &_UserOutgoingApprovalPermission_3_list{list: &x.TransferTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserOutgoingApprovalPermission.badgeIds":
		if len(x.BadgeIds) == 0 {
			return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_4_list{})
		}
		listValue := &_UserOutgoingApprovalPermission_4_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserOutgoingApprovalPermission.ownershipTimes":
		if len(x.OwnershipTimes) == 0 {
			return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_5_list{})
		}
		listValue := &_UserOutgoingApprovalPermission_5_list{list: &x.OwnershipTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserOutgoingApprovalPermission.approvalId":
		value := x.ApprovalId
		return protoreflect.ValueOfString(value)
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyPermittedTimes":
		if len(x.PermanentlyPermittedTimes) == 0 {
			return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_9_list{})
		}
		listValue := &_UserOutgoingApprovalPermission_9_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyForbiddenTimes":
		if len(x.PermanentlyForbiddenTimes) == 0 {
			return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_10_list{})
		}
		listValue := &_UserOutgoingApprovalPermission_10_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserOutgoingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserOutgoingApprovalPermission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserOutgoingApprovalPermission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.UserOutgoingApprovalPermission.toListId":
		x.ToListId = value.Interface().(string)
	case "badges.v0.UserOutgoingApprovalPermission.initiatedByListId":
		x.InitiatedByListId = value.Interface().(string)
	case "badges.v0.UserOutgoingApprovalPermission.transferTimes":
		lv := value.List()
		clv := lv.(*_UserOutgoingApprovalPermission_3_list)
		x.TransferTimes = *clv.list
	case "badges.v0.UserOutgoingApprovalPermission.badgeIds":
		lv := value.List()
		clv := lv.(*_UserOutgoingApprovalPermission_4_list)
		x.BadgeIds = *clv.list
	case "badges.v0.UserOutgoingApprovalPermission.ownershipTimes":
		lv := value.List()
		clv := lv.(*_UserOutgoingApprovalPermission_5_list)
		x.OwnershipTimes = *clv.list
	case "badges.v0.UserOutgoingApprovalPermission.approvalId":
		x.ApprovalId = value.Interface().(string)
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyPermittedTimes":
		lv := value.List()
		clv := lv.(*_UserOutgoingApprovalPermission_9_list)
		x.PermanentlyPermittedTimes = *clv.list
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyForbiddenTimes":
		lv := value.List()
		clv := lv.(*_UserOutgoingApprovalPermission_10_list)
		x.PermanentlyForbiddenTimes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserOutgoingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserOutgoingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserOutgoingApprovalPermission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.UserOutgoingApprovalPermission.transferTimes":
		if x.TransferTimes == nil {
			x.TransferTimes = []*UintRange{}
		}
		value := &_UserOutgoingApprovalPermission_3_list{list: &x.TransferTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserOutgoingApprovalPermission.badgeIds":
		if x.BadgeIds == nil {
			x.BadgeIds = []*UintRange{}
		}
		value := &_UserOutgoingApprovalPermission_4_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserOutgoingApprovalPermission.ownershipTimes":
		if x.OwnershipTimes == nil {
			x.OwnershipTimes = []*UintRange{}
		}
		value := &_UserOutgoingApprovalPermission_5_list{list: &x.OwnershipTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyPermittedTimes":
		if x.PermanentlyPermittedTimes == nil {
			x.PermanentlyPermittedTimes = []*UintRange{}
		}
		value := &_UserOutgoingApprovalPermission_9_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyForbiddenTimes":
		if x.PermanentlyForbiddenTimes == nil {
			x.PermanentlyForbiddenTimes = []*UintRange{}
		}
		value := &_UserOutgoingApprovalPermission_10_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserOutgoingApprovalPermission.toListId":
		panic(fmt.Errorf("field toListId of message badges.v0.UserOutgoingApprovalPermission is not mutable"))
	case "badges.v0.UserOutgoingApprovalPermission.initiatedByListId":
		panic(fmt.Errorf("field initiatedByListId of message badges.v0.UserOutgoingApprovalPermission is not mutable"))
	case "badges.v0.UserOutgoingApprovalPermission.approvalId":
		panic(fmt.Errorf("field approvalId of message badges.v0.UserOutgoingApprovalPermission is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserOutgoingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserOutgoingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UserOutgoingApprovalPermission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.UserOutgoingApprovalPermission.toListId":
		return protoreflect.ValueOfString("")
	case "badges.v0.UserOutgoingApprovalPermission.initiatedByListId":
		return protoreflect.ValueOfString("")
	case "badges.v0.UserOutgoingApprovalPermission.transferTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_3_list{list: &list})
	case "badges.v0.UserOutgoingApprovalPermission.badgeIds":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_4_list{list: &list})
	case "badges.v0.UserOutgoingApprovalPermission.ownershipTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_5_list{list: &list})
	case "badges.v0.UserOutgoingApprovalPermission.approvalId":
		return protoreflect.ValueOfString("")
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyPermittedTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_9_list{list: &list})
	case "badges.v0.UserOutgoingApprovalPermission.permanentlyForbiddenTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserOutgoingApprovalPermission_10_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserOutgoingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserOutgoingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UserOutgoingApprovalPermission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.UserOutgoingApprovalPermission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UserOutgoingApprovalPermission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserOutgoingApprovalPermission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UserOutgoingApprovalPermission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UserOutgoingApprovalPermission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UserOutgoingApprovalPermission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ToListId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InitiatedByListId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.TransferTimes) > 0 {
			for _, e := range x.TransferTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.BadgeIds) > 0 {
			for _, e := range x.BadgeIds {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OwnershipTimes) > 0 {
			for _, e := range x.OwnershipTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.ApprovalId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for _, e := range x.PermanentlyPermittedTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for _, e := range x.PermanentlyForbiddenTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UserOutgoingApprovalPermission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for iNdEx := len(x.PermanentlyForbiddenTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyForbiddenTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for iNdEx := len(x.PermanentlyPermittedTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyPermittedTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.ApprovalId) > 0 {
			i -= len(x.ApprovalId)
			copy(dAtA[i:], x.ApprovalId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ApprovalId)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.OwnershipTimes) > 0 {
			for iNdEx := len(x.OwnershipTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OwnershipTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.BadgeIds) > 0 {
			for iNdEx := len(x.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BadgeIds[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.TransferTimes) > 0 {
			for iNdEx := len(x.TransferTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TransferTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.InitiatedByListId) > 0 {
			i -= len(x.InitiatedByListId)
			copy(dAtA[i:], x.InitiatedByListId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InitiatedByListId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ToListId) > 0 {
			i -= len(x.ToListId)
			copy(dAtA[i:], x.ToListId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ToListId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UserOutgoingApprovalPermission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserOutgoingApprovalPermission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserOutgoingApprovalPermission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ToListId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ToListId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitiatedByListId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InitiatedByListId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransferTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TransferTimes = append(x.TransferTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TransferTimes[len(x.TransferTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BadgeIds = append(x.BadgeIds, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BadgeIds[len(x.BadgeIds)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OwnershipTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OwnershipTimes = append(x.OwnershipTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OwnershipTimes[len(x.OwnershipTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ApprovalId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ApprovalId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyPermittedTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyPermittedTimes = append(x.PermanentlyPermittedTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyPermittedTimes[len(x.PermanentlyPermittedTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyForbiddenTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyForbiddenTimes = append(x.PermanentlyForbiddenTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyForbiddenTimes[len(x.PermanentlyForbiddenTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_UserIncomingApprovalPermission_3_list)(nil)

type _UserIncomingApprovalPermission_3_list struct {
	list *[]*UintRange
}

func (x *_UserIncomingApprovalPermission_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserIncomingApprovalPermission_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserIncomingApprovalPermission_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserIncomingApprovalPermission_3_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserIncomingApprovalPermission_3_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserIncomingApprovalPermission_4_list)(nil)

type _UserIncomingApprovalPermission_4_list struct {
	list *[]*UintRange
}

func (x *_UserIncomingApprovalPermission_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserIncomingApprovalPermission_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserIncomingApprovalPermission_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserIncomingApprovalPermission_4_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserIncomingApprovalPermission_4_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserIncomingApprovalPermission_5_list)(nil)

type _UserIncomingApprovalPermission_5_list struct {
	list *[]*UintRange
}

func (x *_UserIncomingApprovalPermission_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserIncomingApprovalPermission_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserIncomingApprovalPermission_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserIncomingApprovalPermission_5_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserIncomingApprovalPermission_5_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserIncomingApprovalPermission_9_list)(nil)

type _UserIncomingApprovalPermission_9_list struct {
	list *[]*UintRange
}

func (x *_UserIncomingApprovalPermission_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserIncomingApprovalPermission_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserIncomingApprovalPermission_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserIncomingApprovalPermission_9_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserIncomingApprovalPermission_9_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_UserIncomingApprovalPermission_10_list)(nil)

type _UserIncomingApprovalPermission_10_list struct {
	list *[]*UintRange
}

func (x *_UserIncomingApprovalPermission_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UserIncomingApprovalPermission_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_UserIncomingApprovalPermission_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UserIncomingApprovalPermission_10_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UserIncomingApprovalPermission_10_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UserIncomingApprovalPermission_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_UserIncomingApprovalPermission                           protoreflect.MessageDescriptor
	fd_UserIncomingApprovalPermission_fromListId                protoreflect.FieldDescriptor
	fd_UserIncomingApprovalPermission_initiatedByListId         protoreflect.FieldDescriptor
	fd_UserIncomingApprovalPermission_transferTimes             protoreflect.FieldDescriptor
	fd_UserIncomingApprovalPermission_badgeIds                  protoreflect.FieldDescriptor
	fd_UserIncomingApprovalPermission_ownershipTimes            protoreflect.FieldDescriptor
	fd_UserIncomingApprovalPermission_approvalId                protoreflect.FieldDescriptor
	fd_UserIncomingApprovalPermission_permanentlyPermittedTimes protoreflect.FieldDescriptor
	fd_UserIncomingApprovalPermission_permanentlyForbiddenTimes protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_UserIncomingApprovalPermission = File_badges_v0_permissions_proto.Messages().ByName("UserIncomingApprovalPermission")
	fd_UserIncomingApprovalPermission_fromListId = md_UserIncomingApprovalPermission.Fields().ByName("fromListId")
	fd_UserIncomingApprovalPermission_initiatedByListId = md_UserIncomingApprovalPermission.Fields().ByName("initiatedByListId")
	fd_UserIncomingApprovalPermission_transferTimes = md_UserIncomingApprovalPermission.Fields().ByName("transferTimes")
	fd_UserIncomingApprovalPermission_badgeIds = md_UserIncomingApprovalPermission.Fields().ByName("badgeIds")
	fd_UserIncomingApprovalPermission_ownershipTimes = md_UserIncomingApprovalPermission.Fields().ByName("ownershipTimes")
	fd_UserIncomingApprovalPermission_approvalId = md_UserIncomingApprovalPermission.Fields().ByName("approvalId")
	fd_UserIncomingApprovalPermission_permanentlyPermittedTimes = md_UserIncomingApprovalPermission.Fields().ByName("permanentlyPermittedTimes")
	fd_UserIncomingApprovalPermission_permanentlyForbiddenTimes = md_UserIncomingApprovalPermission.Fields().ByName("permanentlyForbiddenTimes")
}

var _ protoreflect.Message = (*fastReflection_UserIncomingApprovalPermission)(nil)

type fastReflection_UserIncomingApprovalPermission UserIncomingApprovalPermission

func (x *UserIncomingApprovalPermission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UserIncomingApprovalPermission)(x)
}

func (x *UserIncomingApprovalPermission) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UserIncomingApprovalPermission_messageType fastReflection_UserIncomingApprovalPermission_messageType
var _ protoreflect.MessageType = fastReflection_UserIncomingApprovalPermission_messageType{}

type fastReflection_UserIncomingApprovalPermission_messageType struct{}

func (x fastReflection_UserIncomingApprovalPermission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UserIncomingApprovalPermission)(nil)
}
func (x fastReflection_UserIncomingApprovalPermission_messageType) New() protoreflect.Message {
	return new(fastReflection_UserIncomingApprovalPermission)
}
func (x fastReflection_UserIncomingApprovalPermission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UserIncomingApprovalPermission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UserIncomingApprovalPermission) Descriptor() protoreflect.MessageDescriptor {
	return md_UserIncomingApprovalPermission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UserIncomingApprovalPermission) Type() protoreflect.MessageType {
	return _fastReflection_UserIncomingApprovalPermission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UserIncomingApprovalPermission) New() protoreflect.Message {
	return new(fastReflection_UserIncomingApprovalPermission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UserIncomingApprovalPermission) Interface() protoreflect.ProtoMessage {
	return (*UserIncomingApprovalPermission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UserIncomingApprovalPermission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FromListId != "" {
		value := protoreflect.ValueOfString(x.FromListId)
		if !f(fd_UserIncomingApprovalPermission_fromListId, value) {
			return
		}
	}
	if x.InitiatedByListId != "" {
		value := protoreflect.ValueOfString(x.InitiatedByListId)
		if !f(fd_UserIncomingApprovalPermission_initiatedByListId, value) {
			return
		}
	}
	if len(x.TransferTimes) != 0 {
		value := protoreflect.ValueOfList(&_UserIncomingApprovalPermission_3_list{list: &x.TransferTimes})
		if !f(fd_UserIncomingApprovalPermission_transferTimes, value) {
			return
		}
	}
	if len(x.BadgeIds) != 0 {
		value := protoreflect.ValueOfList(&_UserIncomingApprovalPermission_4_list{list: &x.BadgeIds})
		if !f(fd_UserIncomingApprovalPermission_badgeIds, value) {
			return
		}
	}
	if len(x.OwnershipTimes) != 0 {
		value := protoreflect.ValueOfList(&_UserIncomingApprovalPermission_5_list{list: &x.OwnershipTimes})
		if !f(fd_UserIncomingApprovalPermission_ownershipTimes, value) {
			return
		}
	}
	if x.ApprovalId != "" {
		value := protoreflect.ValueOfString(x.ApprovalId)
		if !f(fd_UserIncomingApprovalPermission_approvalId, value) {
			return
		}
	}
	if len(x.PermanentlyPermittedTimes) != 0 {
		value := protoreflect.ValueOfList(&_UserIncomingApprovalPermission_9_list{list: &x.PermanentlyPermittedTimes})
		if !f(fd_UserIncomingApprovalPermission_permanentlyPermittedTimes, value) {
			return
		}
	}
	if len(x.PermanentlyForbiddenTimes) != 0 {
		value := protoreflect.ValueOfList(&_UserIncomingApprovalPermission_10_list{list: &x.PermanentlyForbiddenTimes})
		if !f(fd_UserIncomingApprovalPermission_permanentlyForbiddenTimes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UserIncomingApprovalPermission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.UserIncomingApprovalPermission.fromListId":
		return x.FromListId != ""
	case "badges.v0.UserIncomingApprovalPermission.initiatedByListId":
		return x.InitiatedByListId != ""
	case "badges.v0.UserIncomingApprovalPermission.transferTimes":
		return len(x.TransferTimes) != 0
	case "badges.v0.UserIncomingApprovalPermission.badgeIds":
		return len(x.BadgeIds) != 0
	case "badges.v0.UserIncomingApprovalPermission.ownershipTimes":
		return len(x.OwnershipTimes) != 0
	case "badges.v0.UserIncomingApprovalPermission.approvalId":
		return x.ApprovalId != ""
	case "badges.v0.UserIncomingApprovalPermission.permanentlyPermittedTimes":
		return len(x.PermanentlyPermittedTimes) != 0
	case "badges.v0.UserIncomingApprovalPermission.permanentlyForbiddenTimes":
		return len(x.PermanentlyForbiddenTimes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserIncomingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserIncomingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserIncomingApprovalPermission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.UserIncomingApprovalPermission.fromListId":
		x.FromListId = ""
	case "badges.v0.UserIncomingApprovalPermission.initiatedByListId":
		x.InitiatedByListId = ""
	case "badges.v0.UserIncomingApprovalPermission.transferTimes":
		x.TransferTimes = nil
	case "badges.v0.UserIncomingApprovalPermission.badgeIds":
		x.BadgeIds = nil
	case "badges.v0.UserIncomingApprovalPermission.ownershipTimes":
		x.OwnershipTimes = nil
	case "badges.v0.UserIncomingApprovalPermission.approvalId":
		x.ApprovalId = ""
	case "badges.v0.UserIncomingApprovalPermission.permanentlyPermittedTimes":
		x.PermanentlyPermittedTimes = nil
	case "badges.v0.UserIncomingApprovalPermission.permanentlyForbiddenTimes":
		x.PermanentlyForbiddenTimes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserIncomingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserIncomingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UserIncomingApprovalPermission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.UserIncomingApprovalPermission.fromListId":
		value := x.FromListId
		return protoreflect.ValueOfString(value)
	case "badges.v0.UserIncomingApprovalPermission.initiatedByListId":
		value := x.InitiatedByListId
		return protoreflect.ValueOfString(value)
	case "badges.v0.UserIncomingApprovalPermission.transferTimes":
		if len(x.TransferTimes) == 0 {
			return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_3_list{})
		}
		listValue := &_UserIncomingApprovalPermission_3_list{list: &x.TransferTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserIncomingApprovalPermission.badgeIds":
		if len(x.BadgeIds) == 0 {
			return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_4_list{})
		}
		listValue := &_UserIncomingApprovalPermission_4_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserIncomingApprovalPermission.ownershipTimes":
		if len(x.OwnershipTimes) == 0 {
			return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_5_list{})
		}
		listValue := &_UserIncomingApprovalPermission_5_list{list: &x.OwnershipTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserIncomingApprovalPermission.approvalId":
		value := x.ApprovalId
		return protoreflect.ValueOfString(value)
	case "badges.v0.UserIncomingApprovalPermission.permanentlyPermittedTimes":
		if len(x.PermanentlyPermittedTimes) == 0 {
			return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_9_list{})
		}
		listValue := &_UserIncomingApprovalPermission_9_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.UserIncomingApprovalPermission.permanentlyForbiddenTimes":
		if len(x.PermanentlyForbiddenTimes) == 0 {
			return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_10_list{})
		}
		listValue := &_UserIncomingApprovalPermission_10_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserIncomingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserIncomingApprovalPermission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserIncomingApprovalPermission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.UserIncomingApprovalPermission.fromListId":
		x.FromListId = value.Interface().(string)
	case "badges.v0.UserIncomingApprovalPermission.initiatedByListId":
		x.InitiatedByListId = value.Interface().(string)
	case "badges.v0.UserIncomingApprovalPermission.transferTimes":
		lv := value.List()
		clv := lv.(*_UserIncomingApprovalPermission_3_list)
		x.TransferTimes = *clv.list
	case "badges.v0.UserIncomingApprovalPermission.badgeIds":
		lv := value.List()
		clv := lv.(*_UserIncomingApprovalPermission_4_list)
		x.BadgeIds = *clv.list
	case "badges.v0.UserIncomingApprovalPermission.ownershipTimes":
		lv := value.List()
		clv := lv.(*_UserIncomingApprovalPermission_5_list)
		x.OwnershipTimes = *clv.list
	case "badges.v0.UserIncomingApprovalPermission.approvalId":
		x.ApprovalId = value.Interface().(string)
	case "badges.v0.UserIncomingApprovalPermission.permanentlyPermittedTimes":
		lv := value.List()
		clv := lv.(*_UserIncomingApprovalPermission_9_list)
		x.PermanentlyPermittedTimes = *clv.list
	case "badges.v0.UserIncomingApprovalPermission.permanentlyForbiddenTimes":
		lv := value.List()
		clv := lv.(*_UserIncomingApprovalPermission_10_list)
		x.PermanentlyForbiddenTimes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserIncomingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserIncomingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserIncomingApprovalPermission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.UserIncomingApprovalPermission.transferTimes":
		if x.TransferTimes == nil {
			x.TransferTimes = []*UintRange{}
		}
		value := &_UserIncomingApprovalPermission_3_list{list: &x.TransferTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserIncomingApprovalPermission.badgeIds":
		if x.BadgeIds == nil {
			x.BadgeIds = []*UintRange{}
		}
		value := &_UserIncomingApprovalPermission_4_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserIncomingApprovalPermission.ownershipTimes":
		if x.OwnershipTimes == nil {
			x.OwnershipTimes = []*UintRange{}
		}
		value := &_UserIncomingApprovalPermission_5_list{list: &x.OwnershipTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserIncomingApprovalPermission.permanentlyPermittedTimes":
		if x.PermanentlyPermittedTimes == nil {
			x.PermanentlyPermittedTimes = []*UintRange{}
		}
		value := &_UserIncomingApprovalPermission_9_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserIncomingApprovalPermission.permanentlyForbiddenTimes":
		if x.PermanentlyForbiddenTimes == nil {
			x.PermanentlyForbiddenTimes = []*UintRange{}
		}
		value := &_UserIncomingApprovalPermission_10_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.UserIncomingApprovalPermission.fromListId":
		panic(fmt.Errorf("field fromListId of message badges.v0.UserIncomingApprovalPermission is not mutable"))
	case "badges.v0.UserIncomingApprovalPermission.initiatedByListId":
		panic(fmt.Errorf("field initiatedByListId of message badges.v0.UserIncomingApprovalPermission is not mutable"))
	case "badges.v0.UserIncomingApprovalPermission.approvalId":
		panic(fmt.Errorf("field approvalId of message badges.v0.UserIncomingApprovalPermission is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserIncomingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserIncomingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UserIncomingApprovalPermission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.UserIncomingApprovalPermission.fromListId":
		return protoreflect.ValueOfString("")
	case "badges.v0.UserIncomingApprovalPermission.initiatedByListId":
		return protoreflect.ValueOfString("")
	case "badges.v0.UserIncomingApprovalPermission.transferTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_3_list{list: &list})
	case "badges.v0.UserIncomingApprovalPermission.badgeIds":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_4_list{list: &list})
	case "badges.v0.UserIncomingApprovalPermission.ownershipTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_5_list{list: &list})
	case "badges.v0.UserIncomingApprovalPermission.approvalId":
		return protoreflect.ValueOfString("")
	case "badges.v0.UserIncomingApprovalPermission.permanentlyPermittedTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_9_list{list: &list})
	case "badges.v0.UserIncomingApprovalPermission.permanentlyForbiddenTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_UserIncomingApprovalPermission_10_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.UserIncomingApprovalPermission"))
		}
		panic(fmt.Errorf("message badges.v0.UserIncomingApprovalPermission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UserIncomingApprovalPermission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.UserIncomingApprovalPermission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UserIncomingApprovalPermission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserIncomingApprovalPermission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UserIncomingApprovalPermission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UserIncomingApprovalPermission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UserIncomingApprovalPermission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.FromListId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InitiatedByListId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.TransferTimes) > 0 {
			for _, e := range x.TransferTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.BadgeIds) > 0 {
			for _, e := range x.BadgeIds {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OwnershipTimes) > 0 {
			for _, e := range x.OwnershipTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.ApprovalId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for _, e := range x.PermanentlyPermittedTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for _, e := range x.PermanentlyForbiddenTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UserIncomingApprovalPermission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for iNdEx := len(x.PermanentlyForbiddenTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyForbiddenTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for iNdEx := len(x.PermanentlyPermittedTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyPermittedTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.ApprovalId) > 0 {
			i -= len(x.ApprovalId)
			copy(dAtA[i:], x.ApprovalId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ApprovalId)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.OwnershipTimes) > 0 {
			for iNdEx := len(x.OwnershipTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OwnershipTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.BadgeIds) > 0 {
			for iNdEx := len(x.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BadgeIds[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.TransferTimes) > 0 {
			for iNdEx := len(x.TransferTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TransferTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.InitiatedByListId) > 0 {
			i -= len(x.InitiatedByListId)
			copy(dAtA[i:], x.InitiatedByListId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InitiatedByListId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.FromListId) > 0 {
			i -= len(x.FromListId)
			copy(dAtA[i:], x.FromListId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FromListId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UserIncomingApprovalPermission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserIncomingApprovalPermission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserIncomingApprovalPermission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FromListId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FromListId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitiatedByListId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InitiatedByListId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransferTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TransferTimes = append(x.TransferTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TransferTimes[len(x.TransferTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BadgeIds = append(x.BadgeIds, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BadgeIds[len(x.BadgeIds)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OwnershipTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OwnershipTimes = append(x.OwnershipTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OwnershipTimes[len(x.OwnershipTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ApprovalId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ApprovalId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyPermittedTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyPermittedTimes = append(x.PermanentlyPermittedTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyPermittedTimes[len(x.PermanentlyPermittedTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyForbiddenTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyForbiddenTimes = append(x.PermanentlyForbiddenTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyForbiddenTimes[len(x.PermanentlyForbiddenTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_BadgeIdsActionPermission_1_list)(nil)

type _BadgeIdsActionPermission_1_list struct {
	list *[]*UintRange
}

func (x *_BadgeIdsActionPermission_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BadgeIdsActionPermission_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_BadgeIdsActionPermission_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_BadgeIdsActionPermission_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_BadgeIdsActionPermission_1_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BadgeIdsActionPermission_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_BadgeIdsActionPermission_1_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BadgeIdsActionPermission_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BadgeIdsActionPermission_2_list)(nil)

type _BadgeIdsActionPermission_2_list struct {
	list *[]*UintRange
}

func (x *_BadgeIdsActionPermission_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BadgeIdsActionPermission_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_BadgeIdsActionPermission_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_BadgeIdsActionPermission_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_BadgeIdsActionPermission_2_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BadgeIdsActionPermission_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_BadgeIdsActionPermission_2_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BadgeIdsActionPermission_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BadgeIdsActionPermission_3_list)(nil)

type _BadgeIdsActionPermission_3_list struct {
	list *[]*UintRange
}

func (x *_BadgeIdsActionPermission_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BadgeIdsActionPermission_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_BadgeIdsActionPermission_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_BadgeIdsActionPermission_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_BadgeIdsActionPermission_3_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BadgeIdsActionPermission_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_BadgeIdsActionPermission_3_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BadgeIdsActionPermission_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_BadgeIdsActionPermission                           protoreflect.MessageDescriptor
	fd_BadgeIdsActionPermission_badgeIds                  protoreflect.FieldDescriptor
	fd_BadgeIdsActionPermission_permanentlyPermittedTimes protoreflect.FieldDescriptor
	fd_BadgeIdsActionPermission_permanentlyForbiddenTimes protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_BadgeIdsActionPermission = File_badges_v0_permissions_proto.Messages().ByName("BadgeIdsActionPermission")
	fd_BadgeIdsActionPermission_badgeIds = md_BadgeIdsActionPermission.Fields().ByName("badgeIds")
	fd_BadgeIdsActionPermission_permanentlyPermittedTimes = md_BadgeIdsActionPermission.Fields().ByName("permanentlyPermittedTimes")
	fd_BadgeIdsActionPermission_permanentlyForbiddenTimes = md_BadgeIdsActionPermission.Fields().ByName("permanentlyForbiddenTimes")
}

var _ protoreflect.Message = (*fastReflection_BadgeIdsActionPermission)(nil)

type fastReflection_BadgeIdsActionPermission BadgeIdsActionPermission

func (x *BadgeIdsActionPermission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BadgeIdsActionPermission)(x)
}

func (x *BadgeIdsActionPermission) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BadgeIdsActionPermission_messageType fastReflection_BadgeIdsActionPermission_messageType
var _ protoreflect.MessageType = fastReflection_BadgeIdsActionPermission_messageType{}

type fastReflection_BadgeIdsActionPermission_messageType struct{}

func (x fastReflection_BadgeIdsActionPermission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BadgeIdsActionPermission)(nil)
}
func (x fastReflection_BadgeIdsActionPermission_messageType) New() protoreflect.Message {
	return new(fastReflection_BadgeIdsActionPermission)
}
func (x fastReflection_BadgeIdsActionPermission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BadgeIdsActionPermission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BadgeIdsActionPermission) Descriptor() protoreflect.MessageDescriptor {
	return md_BadgeIdsActionPermission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BadgeIdsActionPermission) Type() protoreflect.MessageType {
	return _fastReflection_BadgeIdsActionPermission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BadgeIdsActionPermission) New() protoreflect.Message {
	return new(fastReflection_BadgeIdsActionPermission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BadgeIdsActionPermission) Interface() protoreflect.ProtoMessage {
	return (*BadgeIdsActionPermission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BadgeIdsActionPermission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.BadgeIds) != 0 {
		value := protoreflect.ValueOfList(&_BadgeIdsActionPermission_1_list{list: &x.BadgeIds})
		if !f(fd_BadgeIdsActionPermission_badgeIds, value) {
			return
		}
	}
	if len(x.PermanentlyPermittedTimes) != 0 {
		value := protoreflect.ValueOfList(&_BadgeIdsActionPermission_2_list{list: &x.PermanentlyPermittedTimes})
		if !f(fd_BadgeIdsActionPermission_permanentlyPermittedTimes, value) {
			return
		}
	}
	if len(x.PermanentlyForbiddenTimes) != 0 {
		value := protoreflect.ValueOfList(&_BadgeIdsActionPermission_3_list{list: &x.PermanentlyForbiddenTimes})
		if !f(fd_BadgeIdsActionPermission_permanentlyForbiddenTimes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BadgeIdsActionPermission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.BadgeIdsActionPermission.badgeIds":
		return len(x.BadgeIds) != 0
	case "badges.v0.BadgeIdsActionPermission.permanentlyPermittedTimes":
		return len(x.PermanentlyPermittedTimes) != 0
	case "badges.v0.BadgeIdsActionPermission.permanentlyForbiddenTimes":
		return len(x.PermanentlyForbiddenTimes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.BadgeIdsActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.BadgeIdsActionPermission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BadgeIdsActionPermission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.BadgeIdsActionPermission.badgeIds":
		x.BadgeIds = nil
	case "badges.v0.BadgeIdsActionPermission.permanentlyPermittedTimes":
		x.PermanentlyPermittedTimes = nil
	case "badges.v0.BadgeIdsActionPermission.permanentlyForbiddenTimes":
		x.PermanentlyForbiddenTimes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.BadgeIdsActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.BadgeIdsActionPermission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BadgeIdsActionPermission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.BadgeIdsActionPermission.badgeIds":
		if len(x.BadgeIds) == 0 {
			return protoreflect.ValueOfList(&_BadgeIdsActionPermission_1_list{})
		}
		listValue := &_BadgeIdsActionPermission_1_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.BadgeIdsActionPermission.permanentlyPermittedTimes":
		if len(x.PermanentlyPermittedTimes) == 0 {
			return protoreflect.ValueOfList(&_BadgeIdsActionPermission_2_list{})
		}
		listValue := &_BadgeIdsActionPermission_2_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.BadgeIdsActionPermission.permanentlyForbiddenTimes":
		if len(x.PermanentlyForbiddenTimes) == 0 {
			return protoreflect.ValueOfList(&_BadgeIdsActionPermission_3_list{})
		}
		listValue := &_BadgeIdsActionPermission_3_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.BadgeIdsActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.BadgeIdsActionPermission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BadgeIdsActionPermission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.BadgeIdsActionPermission.badgeIds":
		lv := value.List()
		clv := lv.(*_BadgeIdsActionPermission_1_list)
		x.BadgeIds = *clv.list
	case "badges.v0.BadgeIdsActionPermission.permanentlyPermittedTimes":
		lv := value.List()
		clv := lv.(*_BadgeIdsActionPermission_2_list)
		x.PermanentlyPermittedTimes = *clv.list
	case "badges.v0.BadgeIdsActionPermission.permanentlyForbiddenTimes":
		lv := value.List()
		clv := lv.(*_BadgeIdsActionPermission_3_list)
		x.PermanentlyForbiddenTimes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.BadgeIdsActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.BadgeIdsActionPermission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BadgeIdsActionPermission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.BadgeIdsActionPermission.badgeIds":
		if x.BadgeIds == nil {
			x.BadgeIds = []*UintRange{}
		}
		value := &_BadgeIdsActionPermission_1_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(value)
	case "badges.v0.BadgeIdsActionPermission.permanentlyPermittedTimes":
		if x.PermanentlyPermittedTimes == nil {
			x.PermanentlyPermittedTimes = []*UintRange{}
		}
		value := &_BadgeIdsActionPermission_2_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.BadgeIdsActionPermission.permanentlyForbiddenTimes":
		if x.PermanentlyForbiddenTimes == nil {
			x.PermanentlyForbiddenTimes = []*UintRange{}
		}
		value := &_BadgeIdsActionPermission_3_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.BadgeIdsActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.BadgeIdsActionPermission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BadgeIdsActionPermission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.BadgeIdsActionPermission.badgeIds":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_BadgeIdsActionPermission_1_list{list: &list})
	case "badges.v0.BadgeIdsActionPermission.permanentlyPermittedTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_BadgeIdsActionPermission_2_list{list: &list})
	case "badges.v0.BadgeIdsActionPermission.permanentlyForbiddenTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_BadgeIdsActionPermission_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.BadgeIdsActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.BadgeIdsActionPermission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BadgeIdsActionPermission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.BadgeIdsActionPermission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BadgeIdsActionPermission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BadgeIdsActionPermission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BadgeIdsActionPermission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BadgeIdsActionPermission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BadgeIdsActionPermission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.BadgeIds) > 0 {
			for _, e := range x.BadgeIds {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for _, e := range x.PermanentlyPermittedTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for _, e := range x.PermanentlyForbiddenTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BadgeIdsActionPermission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for iNdEx := len(x.PermanentlyForbiddenTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyForbiddenTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for iNdEx := len(x.PermanentlyPermittedTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyPermittedTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.BadgeIds) > 0 {
			for iNdEx := len(x.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BadgeIds[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BadgeIdsActionPermission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BadgeIdsActionPermission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BadgeIdsActionPermission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BadgeIds = append(x.BadgeIds, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BadgeIds[len(x.BadgeIds)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyPermittedTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyPermittedTimes = append(x.PermanentlyPermittedTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyPermittedTimes[len(x.PermanentlyPermittedTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyForbiddenTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyForbiddenTimes = append(x.PermanentlyForbiddenTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyForbiddenTimes[len(x.PermanentlyForbiddenTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ActionPermission_1_list)(nil)

type _ActionPermission_1_list struct {
	list *[]*UintRange
}

func (x *_ActionPermission_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ActionPermission_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ActionPermission_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_ActionPermission_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ActionPermission_1_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ActionPermission_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ActionPermission_1_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ActionPermission_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ActionPermission_2_list)(nil)

type _ActionPermission_2_list struct {
	list *[]*UintRange
}

func (x *_ActionPermission_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ActionPermission_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ActionPermission_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_ActionPermission_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ActionPermission_2_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ActionPermission_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ActionPermission_2_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ActionPermission_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ActionPermission                           protoreflect.MessageDescriptor
	fd_ActionPermission_permanentlyPermittedTimes protoreflect.FieldDescriptor
	fd_ActionPermission_permanentlyForbiddenTimes protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_ActionPermission = File_badges_v0_permissions_proto.Messages().ByName("ActionPermission")
	fd_ActionPermission_permanentlyPermittedTimes = md_ActionPermission.Fields().ByName("permanentlyPermittedTimes")
	fd_ActionPermission_permanentlyForbiddenTimes = md_ActionPermission.Fields().ByName("permanentlyForbiddenTimes")
}

var _ protoreflect.Message = (*fastReflection_ActionPermission)(nil)

type fastReflection_ActionPermission ActionPermission

func (x *ActionPermission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ActionPermission)(x)
}

func (x *ActionPermission) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ActionPermission_messageType fastReflection_ActionPermission_messageType
var _ protoreflect.MessageType = fastReflection_ActionPermission_messageType{}

type fastReflection_ActionPermission_messageType struct{}

func (x fastReflection_ActionPermission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ActionPermission)(nil)
}
func (x fastReflection_ActionPermission_messageType) New() protoreflect.Message {
	return new(fastReflection_ActionPermission)
}
func (x fastReflection_ActionPermission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ActionPermission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ActionPermission) Descriptor() protoreflect.MessageDescriptor {
	return md_ActionPermission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ActionPermission) Type() protoreflect.MessageType {
	return _fastReflection_ActionPermission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ActionPermission) New() protoreflect.Message {
	return new(fastReflection_ActionPermission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ActionPermission) Interface() protoreflect.ProtoMessage {
	return (*ActionPermission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ActionPermission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.PermanentlyPermittedTimes) != 0 {
		value := protoreflect.ValueOfList(&_ActionPermission_1_list{list: &x.PermanentlyPermittedTimes})
		if !f(fd_ActionPermission_permanentlyPermittedTimes, value) {
			return
		}
	}
	if len(x.PermanentlyForbiddenTimes) != 0 {
		value := protoreflect.ValueOfList(&_ActionPermission_2_list{list: &x.PermanentlyForbiddenTimes})
		if !f(fd_ActionPermission_permanentlyForbiddenTimes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ActionPermission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.ActionPermission.permanentlyPermittedTimes":
		return len(x.PermanentlyPermittedTimes) != 0
	case "badges.v0.ActionPermission.permanentlyForbiddenTimes":
		return len(x.PermanentlyForbiddenTimes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.ActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.ActionPermission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActionPermission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.ActionPermission.permanentlyPermittedTimes":
		x.PermanentlyPermittedTimes = nil
	case "badges.v0.ActionPermission.permanentlyForbiddenTimes":
		x.PermanentlyForbiddenTimes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.ActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.ActionPermission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ActionPermission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.ActionPermission.permanentlyPermittedTimes":
		if len(x.PermanentlyPermittedTimes) == 0 {
			return protoreflect.ValueOfList(&_ActionPermission_1_list{})
		}
		listValue := &_ActionPermission_1_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.ActionPermission.permanentlyForbiddenTimes":
		if len(x.PermanentlyForbiddenTimes) == 0 {
			return protoreflect.ValueOfList(&_ActionPermission_2_list{})
		}
		listValue := &_ActionPermission_2_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.ActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.ActionPermission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActionPermission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.ActionPermission.permanentlyPermittedTimes":
		lv := value.List()
		clv := lv.(*_ActionPermission_1_list)
		x.PermanentlyPermittedTimes = *clv.list
	case "badges.v0.ActionPermission.permanentlyForbiddenTimes":
		lv := value.List()
		clv := lv.(*_ActionPermission_2_list)
		x.PermanentlyForbiddenTimes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.ActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.ActionPermission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActionPermission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.ActionPermission.permanentlyPermittedTimes":
		if x.PermanentlyPermittedTimes == nil {
			x.PermanentlyPermittedTimes = []*UintRange{}
		}
		value := &_ActionPermission_1_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.ActionPermission.permanentlyForbiddenTimes":
		if x.PermanentlyForbiddenTimes == nil {
			x.PermanentlyForbiddenTimes = []*UintRange{}
		}
		value := &_ActionPermission_2_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.ActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.ActionPermission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ActionPermission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.ActionPermission.permanentlyPermittedTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_ActionPermission_1_list{list: &list})
	case "badges.v0.ActionPermission.permanentlyForbiddenTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_ActionPermission_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.ActionPermission"))
		}
		panic(fmt.Errorf("message badges.v0.ActionPermission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ActionPermission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.ActionPermission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ActionPermission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActionPermission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ActionPermission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ActionPermission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ActionPermission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.PermanentlyPermittedTimes) > 0 {
			for _, e := range x.PermanentlyPermittedTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for _, e := range x.PermanentlyForbiddenTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ActionPermission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for iNdEx := len(x.PermanentlyForbiddenTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyForbiddenTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for iNdEx := len(x.PermanentlyPermittedTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyPermittedTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ActionPermission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ActionPermission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ActionPermission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyPermittedTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyPermittedTimes = append(x.PermanentlyPermittedTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyPermittedTimes[len(x.PermanentlyPermittedTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyForbiddenTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyForbiddenTimes = append(x.PermanentlyForbiddenTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyForbiddenTimes[len(x.PermanentlyForbiddenTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_TimedUpdatePermission_1_list)(nil)

type _TimedUpdatePermission_1_list struct {
	list *[]*UintRange
}

func (x *_TimedUpdatePermission_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TimedUpdatePermission_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TimedUpdatePermission_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_TimedUpdatePermission_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TimedUpdatePermission_1_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdatePermission_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TimedUpdatePermission_1_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdatePermission_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_TimedUpdatePermission_2_list)(nil)

type _TimedUpdatePermission_2_list struct {
	list *[]*UintRange
}

func (x *_TimedUpdatePermission_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TimedUpdatePermission_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TimedUpdatePermission_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_TimedUpdatePermission_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TimedUpdatePermission_2_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdatePermission_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TimedUpdatePermission_2_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdatePermission_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_TimedUpdatePermission_3_list)(nil)

type _TimedUpdatePermission_3_list struct {
	list *[]*UintRange
}

func (x *_TimedUpdatePermission_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TimedUpdatePermission_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TimedUpdatePermission_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_TimedUpdatePermission_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TimedUpdatePermission_3_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdatePermission_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TimedUpdatePermission_3_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdatePermission_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TimedUpdatePermission                           protoreflect.MessageDescriptor
	fd_TimedUpdatePermission_permanentlyPermittedTimes protoreflect.FieldDescriptor
	fd_TimedUpdatePermission_permanentlyForbiddenTimes protoreflect.FieldDescriptor
	fd_TimedUpdatePermission_timelineTimes             protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_TimedUpdatePermission = File_badges_v0_permissions_proto.Messages().ByName("TimedUpdatePermission")
	fd_TimedUpdatePermission_permanentlyPermittedTimes = md_TimedUpdatePermission.Fields().ByName("permanentlyPermittedTimes")
	fd_TimedUpdatePermission_permanentlyForbiddenTimes = md_TimedUpdatePermission.Fields().ByName("permanentlyForbiddenTimes")
	fd_TimedUpdatePermission_timelineTimes = md_TimedUpdatePermission.Fields().ByName("timelineTimes")
}

var _ protoreflect.Message = (*fastReflection_TimedUpdatePermission)(nil)

type fastReflection_TimedUpdatePermission TimedUpdatePermission

func (x *TimedUpdatePermission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TimedUpdatePermission)(x)
}

func (x *TimedUpdatePermission) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TimedUpdatePermission_messageType fastReflection_TimedUpdatePermission_messageType
var _ protoreflect.MessageType = fastReflection_TimedUpdatePermission_messageType{}

type fastReflection_TimedUpdatePermission_messageType struct{}

func (x fastReflection_TimedUpdatePermission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TimedUpdatePermission)(nil)
}
func (x fastReflection_TimedUpdatePermission_messageType) New() protoreflect.Message {
	return new(fastReflection_TimedUpdatePermission)
}
func (x fastReflection_TimedUpdatePermission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TimedUpdatePermission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TimedUpdatePermission) Descriptor() protoreflect.MessageDescriptor {
	return md_TimedUpdatePermission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TimedUpdatePermission) Type() protoreflect.MessageType {
	return _fastReflection_TimedUpdatePermission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TimedUpdatePermission) New() protoreflect.Message {
	return new(fastReflection_TimedUpdatePermission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TimedUpdatePermission) Interface() protoreflect.ProtoMessage {
	return (*TimedUpdatePermission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TimedUpdatePermission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.PermanentlyPermittedTimes) != 0 {
		value := protoreflect.ValueOfList(&_TimedUpdatePermission_1_list{list: &x.PermanentlyPermittedTimes})
		if !f(fd_TimedUpdatePermission_permanentlyPermittedTimes, value) {
			return
		}
	}
	if len(x.PermanentlyForbiddenTimes) != 0 {
		value := protoreflect.ValueOfList(&_TimedUpdatePermission_2_list{list: &x.PermanentlyForbiddenTimes})
		if !f(fd_TimedUpdatePermission_permanentlyForbiddenTimes, value) {
			return
		}
	}
	if len(x.TimelineTimes) != 0 {
		value := protoreflect.ValueOfList(&_TimedUpdatePermission_3_list{list: &x.TimelineTimes})
		if !f(fd_TimedUpdatePermission_timelineTimes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TimedUpdatePermission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.TimedUpdatePermission.permanentlyPermittedTimes":
		return len(x.PermanentlyPermittedTimes) != 0
	case "badges.v0.TimedUpdatePermission.permanentlyForbiddenTimes":
		return len(x.PermanentlyForbiddenTimes) != 0
	case "badges.v0.TimedUpdatePermission.timelineTimes":
		return len(x.TimelineTimes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdatePermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdatePermission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimedUpdatePermission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.TimedUpdatePermission.permanentlyPermittedTimes":
		x.PermanentlyPermittedTimes = nil
	case "badges.v0.TimedUpdatePermission.permanentlyForbiddenTimes":
		x.PermanentlyForbiddenTimes = nil
	case "badges.v0.TimedUpdatePermission.timelineTimes":
		x.TimelineTimes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdatePermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdatePermission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TimedUpdatePermission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.TimedUpdatePermission.permanentlyPermittedTimes":
		if len(x.PermanentlyPermittedTimes) == 0 {
			return protoreflect.ValueOfList(&_TimedUpdatePermission_1_list{})
		}
		listValue := &_TimedUpdatePermission_1_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.TimedUpdatePermission.permanentlyForbiddenTimes":
		if len(x.PermanentlyForbiddenTimes) == 0 {
			return protoreflect.ValueOfList(&_TimedUpdatePermission_2_list{})
		}
		listValue := &_TimedUpdatePermission_2_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.TimedUpdatePermission.timelineTimes":
		if len(x.TimelineTimes) == 0 {
			return protoreflect.ValueOfList(&_TimedUpdatePermission_3_list{})
		}
		listValue := &_TimedUpdatePermission_3_list{list: &x.TimelineTimes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdatePermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdatePermission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimedUpdatePermission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.TimedUpdatePermission.permanentlyPermittedTimes":
		lv := value.List()
		clv := lv.(*_TimedUpdatePermission_1_list)
		x.PermanentlyPermittedTimes = *clv.list
	case "badges.v0.TimedUpdatePermission.permanentlyForbiddenTimes":
		lv := value.List()
		clv := lv.(*_TimedUpdatePermission_2_list)
		x.PermanentlyForbiddenTimes = *clv.list
	case "badges.v0.TimedUpdatePermission.timelineTimes":
		lv := value.List()
		clv := lv.(*_TimedUpdatePermission_3_list)
		x.TimelineTimes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdatePermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdatePermission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimedUpdatePermission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.TimedUpdatePermission.permanentlyPermittedTimes":
		if x.PermanentlyPermittedTimes == nil {
			x.PermanentlyPermittedTimes = []*UintRange{}
		}
		value := &_TimedUpdatePermission_1_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.TimedUpdatePermission.permanentlyForbiddenTimes":
		if x.PermanentlyForbiddenTimes == nil {
			x.PermanentlyForbiddenTimes = []*UintRange{}
		}
		value := &_TimedUpdatePermission_2_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.TimedUpdatePermission.timelineTimes":
		if x.TimelineTimes == nil {
			x.TimelineTimes = []*UintRange{}
		}
		value := &_TimedUpdatePermission_3_list{list: &x.TimelineTimes}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdatePermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdatePermission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TimedUpdatePermission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.TimedUpdatePermission.permanentlyPermittedTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_TimedUpdatePermission_1_list{list: &list})
	case "badges.v0.TimedUpdatePermission.permanentlyForbiddenTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_TimedUpdatePermission_2_list{list: &list})
	case "badges.v0.TimedUpdatePermission.timelineTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_TimedUpdatePermission_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdatePermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdatePermission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TimedUpdatePermission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.TimedUpdatePermission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TimedUpdatePermission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimedUpdatePermission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TimedUpdatePermission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TimedUpdatePermission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TimedUpdatePermission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.PermanentlyPermittedTimes) > 0 {
			for _, e := range x.PermanentlyPermittedTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for _, e := range x.PermanentlyForbiddenTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TimelineTimes) > 0 {
			for _, e := range x.TimelineTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TimedUpdatePermission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TimelineTimes) > 0 {
			for iNdEx := len(x.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TimelineTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for iNdEx := len(x.PermanentlyForbiddenTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyForbiddenTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for iNdEx := len(x.PermanentlyPermittedTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyPermittedTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TimedUpdatePermission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TimedUpdatePermission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TimedUpdatePermission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyPermittedTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyPermittedTimes = append(x.PermanentlyPermittedTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyPermittedTimes[len(x.PermanentlyPermittedTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyForbiddenTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyForbiddenTimes = append(x.PermanentlyForbiddenTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyForbiddenTimes[len(x.PermanentlyForbiddenTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TimelineTimes = append(x.TimelineTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TimelineTimes[len(x.TimelineTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_TimedUpdateWithBadgeIdsPermission_1_list)(nil)

type _TimedUpdateWithBadgeIdsPermission_1_list struct {
	list *[]*UintRange
}

func (x *_TimedUpdateWithBadgeIdsPermission_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TimedUpdateWithBadgeIdsPermission_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_TimedUpdateWithBadgeIdsPermission_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TimedUpdateWithBadgeIdsPermission_1_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TimedUpdateWithBadgeIdsPermission_1_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_TimedUpdateWithBadgeIdsPermission_2_list)(nil)

type _TimedUpdateWithBadgeIdsPermission_2_list struct {
	list *[]*UintRange
}

func (x *_TimedUpdateWithBadgeIdsPermission_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TimedUpdateWithBadgeIdsPermission_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_TimedUpdateWithBadgeIdsPermission_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TimedUpdateWithBadgeIdsPermission_2_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TimedUpdateWithBadgeIdsPermission_2_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_TimedUpdateWithBadgeIdsPermission_3_list)(nil)

type _TimedUpdateWithBadgeIdsPermission_3_list struct {
	list *[]*UintRange
}

func (x *_TimedUpdateWithBadgeIdsPermission_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TimedUpdateWithBadgeIdsPermission_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_TimedUpdateWithBadgeIdsPermission_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TimedUpdateWithBadgeIdsPermission_3_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TimedUpdateWithBadgeIdsPermission_3_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_TimedUpdateWithBadgeIdsPermission_4_list)(nil)

type _TimedUpdateWithBadgeIdsPermission_4_list struct {
	list *[]*UintRange
}

func (x *_TimedUpdateWithBadgeIdsPermission_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TimedUpdateWithBadgeIdsPermission_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	(*x.list)[i] = concreteValue
}

func (x *_TimedUpdateWithBadgeIdsPermission_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UintRange)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TimedUpdateWithBadgeIdsPermission_4_list) AppendMutable() protoreflect.Value {
	v := new(UintRange)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TimedUpdateWithBadgeIdsPermission_4_list) NewElement() protoreflect.Value {
	v := new(UintRange)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TimedUpdateWithBadgeIdsPermission_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TimedUpdateWithBadgeIdsPermission                           protoreflect.MessageDescriptor
	fd_TimedUpdateWithBadgeIdsPermission_badgeIds                  protoreflect.FieldDescriptor
	fd_TimedUpdateWithBadgeIdsPermission_permanentlyPermittedTimes protoreflect.FieldDescriptor
	fd_TimedUpdateWithBadgeIdsPermission_permanentlyForbiddenTimes protoreflect.FieldDescriptor
	fd_TimedUpdateWithBadgeIdsPermission_timelineTimes             protoreflect.FieldDescriptor
)

func init() {
	file_badges_v0_permissions_proto_init()
	md_TimedUpdateWithBadgeIdsPermission = File_badges_v0_permissions_proto.Messages().ByName("TimedUpdateWithBadgeIdsPermission")
	fd_TimedUpdateWithBadgeIdsPermission_badgeIds = md_TimedUpdateWithBadgeIdsPermission.Fields().ByName("badgeIds")
	fd_TimedUpdateWithBadgeIdsPermission_permanentlyPermittedTimes = md_TimedUpdateWithBadgeIdsPermission.Fields().ByName("permanentlyPermittedTimes")
	fd_TimedUpdateWithBadgeIdsPermission_permanentlyForbiddenTimes = md_TimedUpdateWithBadgeIdsPermission.Fields().ByName("permanentlyForbiddenTimes")
	fd_TimedUpdateWithBadgeIdsPermission_timelineTimes = md_TimedUpdateWithBadgeIdsPermission.Fields().ByName("timelineTimes")
}

var _ protoreflect.Message = (*fastReflection_TimedUpdateWithBadgeIdsPermission)(nil)

type fastReflection_TimedUpdateWithBadgeIdsPermission TimedUpdateWithBadgeIdsPermission

func (x *TimedUpdateWithBadgeIdsPermission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TimedUpdateWithBadgeIdsPermission)(x)
}

func (x *TimedUpdateWithBadgeIdsPermission) slowProtoReflect() protoreflect.Message {
	mi := &file_badges_v0_permissions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TimedUpdateWithBadgeIdsPermission_messageType fastReflection_TimedUpdateWithBadgeIdsPermission_messageType
var _ protoreflect.MessageType = fastReflection_TimedUpdateWithBadgeIdsPermission_messageType{}

type fastReflection_TimedUpdateWithBadgeIdsPermission_messageType struct{}

func (x fastReflection_TimedUpdateWithBadgeIdsPermission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TimedUpdateWithBadgeIdsPermission)(nil)
}
func (x fastReflection_TimedUpdateWithBadgeIdsPermission_messageType) New() protoreflect.Message {
	return new(fastReflection_TimedUpdateWithBadgeIdsPermission)
}
func (x fastReflection_TimedUpdateWithBadgeIdsPermission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TimedUpdateWithBadgeIdsPermission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Descriptor() protoreflect.MessageDescriptor {
	return md_TimedUpdateWithBadgeIdsPermission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Type() protoreflect.MessageType {
	return _fastReflection_TimedUpdateWithBadgeIdsPermission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) New() protoreflect.Message {
	return new(fastReflection_TimedUpdateWithBadgeIdsPermission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Interface() protoreflect.ProtoMessage {
	return (*TimedUpdateWithBadgeIdsPermission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.BadgeIds) != 0 {
		value := protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_1_list{list: &x.BadgeIds})
		if !f(fd_TimedUpdateWithBadgeIdsPermission_badgeIds, value) {
			return
		}
	}
	if len(x.PermanentlyPermittedTimes) != 0 {
		value := protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_2_list{list: &x.PermanentlyPermittedTimes})
		if !f(fd_TimedUpdateWithBadgeIdsPermission_permanentlyPermittedTimes, value) {
			return
		}
	}
	if len(x.PermanentlyForbiddenTimes) != 0 {
		value := protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_3_list{list: &x.PermanentlyForbiddenTimes})
		if !f(fd_TimedUpdateWithBadgeIdsPermission_permanentlyForbiddenTimes, value) {
			return
		}
	}
	if len(x.TimelineTimes) != 0 {
		value := protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_4_list{list: &x.TimelineTimes})
		if !f(fd_TimedUpdateWithBadgeIdsPermission_timelineTimes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.badgeIds":
		return len(x.BadgeIds) != 0
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes":
		return len(x.PermanentlyPermittedTimes) != 0
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes":
		return len(x.PermanentlyForbiddenTimes) != 0
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.timelineTimes":
		return len(x.TimelineTimes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdateWithBadgeIdsPermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdateWithBadgeIdsPermission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.badgeIds":
		x.BadgeIds = nil
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes":
		x.PermanentlyPermittedTimes = nil
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes":
		x.PermanentlyForbiddenTimes = nil
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.timelineTimes":
		x.TimelineTimes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdateWithBadgeIdsPermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdateWithBadgeIdsPermission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.badgeIds":
		if len(x.BadgeIds) == 0 {
			return protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_1_list{})
		}
		listValue := &_TimedUpdateWithBadgeIdsPermission_1_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes":
		if len(x.PermanentlyPermittedTimes) == 0 {
			return protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_2_list{})
		}
		listValue := &_TimedUpdateWithBadgeIdsPermission_2_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes":
		if len(x.PermanentlyForbiddenTimes) == 0 {
			return protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_3_list{})
		}
		listValue := &_TimedUpdateWithBadgeIdsPermission_3_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(listValue)
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.timelineTimes":
		if len(x.TimelineTimes) == 0 {
			return protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_4_list{})
		}
		listValue := &_TimedUpdateWithBadgeIdsPermission_4_list{list: &x.TimelineTimes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdateWithBadgeIdsPermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdateWithBadgeIdsPermission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.badgeIds":
		lv := value.List()
		clv := lv.(*_TimedUpdateWithBadgeIdsPermission_1_list)
		x.BadgeIds = *clv.list
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes":
		lv := value.List()
		clv := lv.(*_TimedUpdateWithBadgeIdsPermission_2_list)
		x.PermanentlyPermittedTimes = *clv.list
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes":
		lv := value.List()
		clv := lv.(*_TimedUpdateWithBadgeIdsPermission_3_list)
		x.PermanentlyForbiddenTimes = *clv.list
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.timelineTimes":
		lv := value.List()
		clv := lv.(*_TimedUpdateWithBadgeIdsPermission_4_list)
		x.TimelineTimes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdateWithBadgeIdsPermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdateWithBadgeIdsPermission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.badgeIds":
		if x.BadgeIds == nil {
			x.BadgeIds = []*UintRange{}
		}
		value := &_TimedUpdateWithBadgeIdsPermission_1_list{list: &x.BadgeIds}
		return protoreflect.ValueOfList(value)
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes":
		if x.PermanentlyPermittedTimes == nil {
			x.PermanentlyPermittedTimes = []*UintRange{}
		}
		value := &_TimedUpdateWithBadgeIdsPermission_2_list{list: &x.PermanentlyPermittedTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes":
		if x.PermanentlyForbiddenTimes == nil {
			x.PermanentlyForbiddenTimes = []*UintRange{}
		}
		value := &_TimedUpdateWithBadgeIdsPermission_3_list{list: &x.PermanentlyForbiddenTimes}
		return protoreflect.ValueOfList(value)
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.timelineTimes":
		if x.TimelineTimes == nil {
			x.TimelineTimes = []*UintRange{}
		}
		value := &_TimedUpdateWithBadgeIdsPermission_4_list{list: &x.TimelineTimes}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdateWithBadgeIdsPermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdateWithBadgeIdsPermission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.badgeIds":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_1_list{list: &list})
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_2_list{list: &list})
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_3_list{list: &list})
	case "badges.v0.TimedUpdateWithBadgeIdsPermission.timelineTimes":
		list := []*UintRange{}
		return protoreflect.ValueOfList(&_TimedUpdateWithBadgeIdsPermission_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: badges.v0.TimedUpdateWithBadgeIdsPermission"))
		}
		panic(fmt.Errorf("message badges.v0.TimedUpdateWithBadgeIdsPermission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in badges.v0.TimedUpdateWithBadgeIdsPermission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TimedUpdateWithBadgeIdsPermission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TimedUpdateWithBadgeIdsPermission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.BadgeIds) > 0 {
			for _, e := range x.BadgeIds {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for _, e := range x.PermanentlyPermittedTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for _, e := range x.PermanentlyForbiddenTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TimelineTimes) > 0 {
			for _, e := range x.TimelineTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TimedUpdateWithBadgeIdsPermission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TimelineTimes) > 0 {
			for iNdEx := len(x.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TimelineTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.PermanentlyForbiddenTimes) > 0 {
			for iNdEx := len(x.PermanentlyForbiddenTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyForbiddenTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.PermanentlyPermittedTimes) > 0 {
			for iNdEx := len(x.PermanentlyPermittedTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermanentlyPermittedTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.BadgeIds) > 0 {
			for iNdEx := len(x.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BadgeIds[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TimedUpdateWithBadgeIdsPermission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TimedUpdateWithBadgeIdsPermission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TimedUpdateWithBadgeIdsPermission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BadgeIds = append(x.BadgeIds, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BadgeIds[len(x.BadgeIds)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyPermittedTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyPermittedTimes = append(x.PermanentlyPermittedTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyPermittedTimes[len(x.PermanentlyPermittedTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermanentlyForbiddenTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermanentlyForbiddenTimes = append(x.PermanentlyForbiddenTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermanentlyForbiddenTimes[len(x.PermanentlyForbiddenTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TimelineTimes = append(x.TimelineTimes, &UintRange{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TimelineTimes[len(x.TimelineTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: badges/v0/permissions.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CollectionPermissions defines the permissions for the collection (i.e., what the manager can and cannot do).
//
// There are five types of permissions for a collection: ActionPermission, TimedUpdatePermission, TimedUpdateWithBadgeIdsPermission, BadgeIdsActionPermission, and CollectionApprovalPermission.
//
// The permission type allows fine-grained access control for each action.
// - ActionPermission: defines when the manager can perform an action.
// - TimedUpdatePermission: defines when the manager can update a timeline-based field and what times of the timeline can be updated.
// - TimedUpdateWithBadgeIdsPermission: defines when the manager can update a timeline-based field for specific badges and what times of the timeline can be updated.
// - BadgeIdsActionPermission: defines when the manager can perform an action for specific badges
// - CollectionApprovalPermission: defines when the manager can update the transferability of the collection and what transfers can be updated vs. locked.
//
// Note there are a few different times here which could get confusing:
// - timelineTimes: the times when a timeline-based field is a specific value
// - permanentlyPermitted/ForbiddenTimes - the times that a permission can be performed
// - transferTimes - the times that a transfer occurs
// - ownershipTimes - the times when a badge is owned by a user
//
// The permitted/permanentlyForbiddenTimes are used to determine when a permission can be executed.
// Once a time is set to be permitted or forbidden, it is PERMANENT and cannot be changed.
// If a time is not set to be permitted or forbidden, it is considered NEUTRAL and can be updated but is ALLOWED by default.
//
// IMPORTANT: We take first-match only for the permissions. This means that if you forbid time T in array index 0 and permit time T in index 1,
// we will only check the first permission (forbid time T) and not the second permission (permit time T).
type CollectionPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permissions related to deleting the collection.
	CanDeleteCollection []*ActionPermission `protobuf:"bytes,1,rep,name=canDeleteCollection,proto3" json:"canDeleteCollection,omitempty"`
	// Permissions related to archiving the collection.
	CanArchiveCollection []*TimedUpdatePermission `protobuf:"bytes,2,rep,name=canArchiveCollection,proto3" json:"canArchiveCollection,omitempty"`
	// Permissions related to updating off-chain balances metadata.
	CanUpdateOffChainBalancesMetadata []*TimedUpdatePermission `protobuf:"bytes,3,rep,name=canUpdateOffChainBalancesMetadata,proto3" json:"canUpdateOffChainBalancesMetadata,omitempty"`
	// Permissions related to updating standards for the collection.
	CanUpdateStandards []*TimedUpdatePermission `protobuf:"bytes,4,rep,name=canUpdateStandards,proto3" json:"canUpdateStandards,omitempty"`
	// Permissions related to updating custom data for the collection.
	CanUpdateCustomData []*TimedUpdatePermission `protobuf:"bytes,5,rep,name=canUpdateCustomData,proto3" json:"canUpdateCustomData,omitempty"`
	// Permissions related to updating the collection's manager.
	CanUpdateManager []*TimedUpdatePermission `protobuf:"bytes,6,rep,name=canUpdateManager,proto3" json:"canUpdateManager,omitempty"`
	// Permissions related to updating the metadata of the collection.
	CanUpdateCollectionMetadata []*TimedUpdatePermission `protobuf:"bytes,7,rep,name=canUpdateCollectionMetadata,proto3" json:"canUpdateCollectionMetadata,omitempty"`
	// Permissions related to creating more badges for the collection.
	CanUpdateValidBadgeIds []*BadgeIdsActionPermission `protobuf:"bytes,8,rep,name=canUpdateValidBadgeIds,proto3" json:"canUpdateValidBadgeIds,omitempty"`
	// Permissions related to updating badge metadata for specific badges.
	CanUpdateBadgeMetadata []*TimedUpdateWithBadgeIdsPermission `protobuf:"bytes,9,rep,name=canUpdateBadgeMetadata,proto3" json:"canUpdateBadgeMetadata,omitempty"`
	// Permissions related to updating collection approvals.
	CanUpdateCollectionApprovals []*CollectionApprovalPermission `protobuf:"bytes,10,rep,name=canUpdateCollectionApprovals,proto3" json:"canUpdateCollectionApprovals,omitempty"`
}

func (x *CollectionPermissions) Reset() {
	*x = CollectionPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionPermissions) ProtoMessage() {}

// Deprecated: Use CollectionPermissions.ProtoReflect.Descriptor instead.
func (*CollectionPermissions) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{0}
}

func (x *CollectionPermissions) GetCanDeleteCollection() []*ActionPermission {
	if x != nil {
		return x.CanDeleteCollection
	}
	return nil
}

func (x *CollectionPermissions) GetCanArchiveCollection() []*TimedUpdatePermission {
	if x != nil {
		return x.CanArchiveCollection
	}
	return nil
}

func (x *CollectionPermissions) GetCanUpdateOffChainBalancesMetadata() []*TimedUpdatePermission {
	if x != nil {
		return x.CanUpdateOffChainBalancesMetadata
	}
	return nil
}

func (x *CollectionPermissions) GetCanUpdateStandards() []*TimedUpdatePermission {
	if x != nil {
		return x.CanUpdateStandards
	}
	return nil
}

func (x *CollectionPermissions) GetCanUpdateCustomData() []*TimedUpdatePermission {
	if x != nil {
		return x.CanUpdateCustomData
	}
	return nil
}

func (x *CollectionPermissions) GetCanUpdateManager() []*TimedUpdatePermission {
	if x != nil {
		return x.CanUpdateManager
	}
	return nil
}

func (x *CollectionPermissions) GetCanUpdateCollectionMetadata() []*TimedUpdatePermission {
	if x != nil {
		return x.CanUpdateCollectionMetadata
	}
	return nil
}

func (x *CollectionPermissions) GetCanUpdateValidBadgeIds() []*BadgeIdsActionPermission {
	if x != nil {
		return x.CanUpdateValidBadgeIds
	}
	return nil
}

func (x *CollectionPermissions) GetCanUpdateBadgeMetadata() []*TimedUpdateWithBadgeIdsPermission {
	if x != nil {
		return x.CanUpdateBadgeMetadata
	}
	return nil
}

func (x *CollectionPermissions) GetCanUpdateCollectionApprovals() []*CollectionApprovalPermission {
	if x != nil {
		return x.CanUpdateCollectionApprovals
	}
	return nil
}

// UserPermissions defines the permissions for the user about their approvals (i.e., what the user can and cannot do).
//
// See CollectionPermissions for more details on the different types of permissions.
//
// canUpdateOutgoingApprovals and canUpdateOutgoingApprovals follow the same as the canUpdateCollectionApprovals in CollectionPermissions,
// but certain fields are removed because they are not relevant to the user.
type UserPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permissions related to updating the user's approved outgoing transfers.
	CanUpdateOutgoingApprovals []*UserOutgoingApprovalPermission `protobuf:"bytes,1,rep,name=canUpdateOutgoingApprovals,proto3" json:"canUpdateOutgoingApprovals,omitempty"`
	// Permissions related to updating the user's approved incoming transfers.
	CanUpdateIncomingApprovals []*UserIncomingApprovalPermission `protobuf:"bytes,2,rep,name=canUpdateIncomingApprovals,proto3" json:"canUpdateIncomingApprovals,omitempty"`
	// Permissions related to updating auto-approval settings for self-initiated outgoing transfers (whether they are allowed by default).
	CanUpdateAutoApproveSelfInitiatedOutgoingTransfers []*ActionPermission `protobuf:"bytes,3,rep,name=canUpdateAutoApproveSelfInitiatedOutgoingTransfers,proto3" json:"canUpdateAutoApproveSelfInitiatedOutgoingTransfers,omitempty"`
	// Permissions related to updating auto-approval settings for self-initiated incoming transfers (whether they are allowed by default).
	CanUpdateAutoApproveSelfInitiatedIncomingTransfers []*ActionPermission `protobuf:"bytes,4,rep,name=canUpdateAutoApproveSelfInitiatedIncomingTransfers,proto3" json:"canUpdateAutoApproveSelfInitiatedIncomingTransfers,omitempty"`
}

func (x *UserPermissions) Reset() {
	*x = UserPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissions) ProtoMessage() {}

// Deprecated: Use UserPermissions.ProtoReflect.Descriptor instead.
func (*UserPermissions) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{1}
}

func (x *UserPermissions) GetCanUpdateOutgoingApprovals() []*UserOutgoingApprovalPermission {
	if x != nil {
		return x.CanUpdateOutgoingApprovals
	}
	return nil
}

func (x *UserPermissions) GetCanUpdateIncomingApprovals() []*UserIncomingApprovalPermission {
	if x != nil {
		return x.CanUpdateIncomingApprovals
	}
	return nil
}

func (x *UserPermissions) GetCanUpdateAutoApproveSelfInitiatedOutgoingTransfers() []*ActionPermission {
	if x != nil {
		return x.CanUpdateAutoApproveSelfInitiatedOutgoingTransfers
	}
	return nil
}

func (x *UserPermissions) GetCanUpdateAutoApproveSelfInitiatedIncomingTransfers() []*ActionPermission {
	if x != nil {
		return x.CanUpdateAutoApproveSelfInitiatedIncomingTransfers
	}
	return nil
}

// CollectionApprovalPermission defines what collection approved transfers can be updated vs. are locked.
//
// Each transfer is broken down to a (from, to, initiatedBy, transferTime, badgeId) tuple.
// For a transfer to match, we need to match ALL of the fields in the combination.
// These are determined by the fromListId, toListId, initiatedByListId, transferTimes, badgeIds fields.
// AddressLists are used for (from, to, initiatedBy) which are a permanent list of addresses identified by an ID (see AddressLists).
//
// TimelineTimes: which timeline times of the collection's approvalsTimeline field can be updated or not?
// permanentlyPermitted/ForbiddenTimes: when can the manager execute this permission?
//
// Ex: Let's say we are updating the transferability for timelineTime 1 and the transfer tuple ("AllWithoutMint", "AllWithoutMint", "AllWithoutMint", 10, 1000).
// We would check to find the FIRST CollectionApprovalPermission that matches this combination.
// If we find a match, we would check the permitted/forbidden times to see if we can execute this permission (default is ALLOWED).
//
// Ex: So if you wanted to freeze the transferability to enforce that badge ID 1 will always be transferable, you could set
// the combination ("AllWithoutMint", "AllWithoutMint", "AllWithoutMint", "All Transfer Times", 1) to always be forbidden at all timelineTimes.
type CollectionApprovalPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the sender list.
	FromListId string `protobuf:"bytes,1,opt,name=fromListId,proto3" json:"fromListId,omitempty"`
	// Identifier for the recipient list.
	ToListId string `protobuf:"bytes,2,opt,name=toListId,proto3" json:"toListId,omitempty"`
	// Identifier for the initiator list (who is approved?).
	InitiatedByListId string `protobuf:"bytes,3,opt,name=initiatedByListId,proto3" json:"initiatedByListId,omitempty"`
	// Specifies the times when the transfer can occur.
	TransferTimes []*UintRange `protobuf:"bytes,4,rep,name=transferTimes,proto3" json:"transferTimes,omitempty"`
	// Specifies the badge IDs involved in the transfer.
	BadgeIds []*UintRange `protobuf:"bytes,5,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	// Specifies the ownership times for the badges in the transfer.
	OwnershipTimes []*UintRange `protobuf:"bytes,6,rep,name=ownershipTimes,proto3" json:"ownershipTimes,omitempty"`
	// Identifier for the approvalId. You can use "All" or "!approvalId" for shorthand.
	// If you use "All", this approval will match to all approvalIds.
	// If you use "!approvalId", this approval will match to all approvalIds except for approvalId.
	// If you use "approvalId", this approval will match to only the specified approvalId and fail on all others.
	ApprovalId string `protobuf:"bytes,9,opt,name=approvalId,proto3" json:"approvalId,omitempty"`
	// Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
	PermanentlyPermittedTimes []*UintRange `protobuf:"bytes,10,rep,name=permanentlyPermittedTimes,proto3" json:"permanentlyPermittedTimes,omitempty"`
	// Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
	PermanentlyForbiddenTimes []*UintRange `protobuf:"bytes,11,rep,name=permanentlyForbiddenTimes,proto3" json:"permanentlyForbiddenTimes,omitempty"`
}

func (x *CollectionApprovalPermission) Reset() {
	*x = CollectionApprovalPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionApprovalPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionApprovalPermission) ProtoMessage() {}

// Deprecated: Use CollectionApprovalPermission.ProtoReflect.Descriptor instead.
func (*CollectionApprovalPermission) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{2}
}

func (x *CollectionApprovalPermission) GetFromListId() string {
	if x != nil {
		return x.FromListId
	}
	return ""
}

func (x *CollectionApprovalPermission) GetToListId() string {
	if x != nil {
		return x.ToListId
	}
	return ""
}

func (x *CollectionApprovalPermission) GetInitiatedByListId() string {
	if x != nil {
		return x.InitiatedByListId
	}
	return ""
}

func (x *CollectionApprovalPermission) GetTransferTimes() []*UintRange {
	if x != nil {
		return x.TransferTimes
	}
	return nil
}

func (x *CollectionApprovalPermission) GetBadgeIds() []*UintRange {
	if x != nil {
		return x.BadgeIds
	}
	return nil
}

func (x *CollectionApprovalPermission) GetOwnershipTimes() []*UintRange {
	if x != nil {
		return x.OwnershipTimes
	}
	return nil
}

func (x *CollectionApprovalPermission) GetApprovalId() string {
	if x != nil {
		return x.ApprovalId
	}
	return ""
}

func (x *CollectionApprovalPermission) GetPermanentlyPermittedTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyPermittedTimes
	}
	return nil
}

func (x *CollectionApprovalPermission) GetPermanentlyForbiddenTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyForbiddenTimes
	}
	return nil
}

// UserOutgoingApprovalPermission defines the permissions for updating the user's approved outgoing transfers.
type UserOutgoingApprovalPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the recipient list.
	ToListId string `protobuf:"bytes,1,opt,name=toListId,proto3" json:"toListId,omitempty"`
	// Identifier for the initiator list (who is approved?).
	InitiatedByListId string `protobuf:"bytes,2,opt,name=initiatedByListId,proto3" json:"initiatedByListId,omitempty"`
	// Specifies the times when the transfer can occur.
	TransferTimes []*UintRange `protobuf:"bytes,3,rep,name=transferTimes,proto3" json:"transferTimes,omitempty"`
	// Specifies the badge IDs involved in the transfer.
	BadgeIds []*UintRange `protobuf:"bytes,4,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	// Specifies the ownership times for the badges in the transfer.
	OwnershipTimes []*UintRange `protobuf:"bytes,5,rep,name=ownershipTimes,proto3" json:"ownershipTimes,omitempty"`
	// Identifier for the approvalId. You can use "All" or "!approvalId" for shorthand.
	// If you use "All", this approval will match to all approvalIds.
	// If you use "!approvalId", this approval will match to all approvalIds except for approvalId.
	// If you use "approvalId", this approval will match to only the specified approvalId and fail on all others.
	ApprovalId string `protobuf:"bytes,8,opt,name=approvalId,proto3" json:"approvalId,omitempty"`
	// Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
	PermanentlyPermittedTimes []*UintRange `protobuf:"bytes,9,rep,name=permanentlyPermittedTimes,proto3" json:"permanentlyPermittedTimes,omitempty"`
	// Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
	PermanentlyForbiddenTimes []*UintRange `protobuf:"bytes,10,rep,name=permanentlyForbiddenTimes,proto3" json:"permanentlyForbiddenTimes,omitempty"`
}

func (x *UserOutgoingApprovalPermission) Reset() {
	*x = UserOutgoingApprovalPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOutgoingApprovalPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOutgoingApprovalPermission) ProtoMessage() {}

// Deprecated: Use UserOutgoingApprovalPermission.ProtoReflect.Descriptor instead.
func (*UserOutgoingApprovalPermission) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{3}
}

func (x *UserOutgoingApprovalPermission) GetToListId() string {
	if x != nil {
		return x.ToListId
	}
	return ""
}

func (x *UserOutgoingApprovalPermission) GetInitiatedByListId() string {
	if x != nil {
		return x.InitiatedByListId
	}
	return ""
}

func (x *UserOutgoingApprovalPermission) GetTransferTimes() []*UintRange {
	if x != nil {
		return x.TransferTimes
	}
	return nil
}

func (x *UserOutgoingApprovalPermission) GetBadgeIds() []*UintRange {
	if x != nil {
		return x.BadgeIds
	}
	return nil
}

func (x *UserOutgoingApprovalPermission) GetOwnershipTimes() []*UintRange {
	if x != nil {
		return x.OwnershipTimes
	}
	return nil
}

func (x *UserOutgoingApprovalPermission) GetApprovalId() string {
	if x != nil {
		return x.ApprovalId
	}
	return ""
}

func (x *UserOutgoingApprovalPermission) GetPermanentlyPermittedTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyPermittedTimes
	}
	return nil
}

func (x *UserOutgoingApprovalPermission) GetPermanentlyForbiddenTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyForbiddenTimes
	}
	return nil
}

// UserIncomingApprovalPermission defines the permissions for updating the user's approved incoming transfers.
//
// See CollectionApprovalPermission for more details. This is equivalent without the toListId field because that is always the user.
type UserIncomingApprovalPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the sender list.
	FromListId string `protobuf:"bytes,1,opt,name=fromListId,proto3" json:"fromListId,omitempty"`
	// Identifier for the initiator list (who is approved?).
	InitiatedByListId string `protobuf:"bytes,2,opt,name=initiatedByListId,proto3" json:"initiatedByListId,omitempty"`
	// Specifies the times when the transfer can occur.
	TransferTimes []*UintRange `protobuf:"bytes,3,rep,name=transferTimes,proto3" json:"transferTimes,omitempty"`
	// Specifies the badge IDs involved in the transfer.
	BadgeIds []*UintRange `protobuf:"bytes,4,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	// Specifies the ownership times for the badges in the transfer.
	OwnershipTimes []*UintRange `protobuf:"bytes,5,rep,name=ownershipTimes,proto3" json:"ownershipTimes,omitempty"`
	// Identifier for the approvalId. You can use "All" or "!approvalId" for shorthand.
	// If you use "All", this approval will match to all approvalIds.
	// If you use "!approvalId", this approval will match to all approvalIds except for approvalId.
	// If you use "approvalId", this approval will match to only the specified approvalId and fail on all others.
	ApprovalId string `protobuf:"bytes,8,opt,name=approvalId,proto3" json:"approvalId,omitempty"`
	// Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
	PermanentlyPermittedTimes []*UintRange `protobuf:"bytes,9,rep,name=permanentlyPermittedTimes,proto3" json:"permanentlyPermittedTimes,omitempty"`
	// Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
	PermanentlyForbiddenTimes []*UintRange `protobuf:"bytes,10,rep,name=permanentlyForbiddenTimes,proto3" json:"permanentlyForbiddenTimes,omitempty"`
}

func (x *UserIncomingApprovalPermission) Reset() {
	*x = UserIncomingApprovalPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIncomingApprovalPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIncomingApprovalPermission) ProtoMessage() {}

// Deprecated: Use UserIncomingApprovalPermission.ProtoReflect.Descriptor instead.
func (*UserIncomingApprovalPermission) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{4}
}

func (x *UserIncomingApprovalPermission) GetFromListId() string {
	if x != nil {
		return x.FromListId
	}
	return ""
}

func (x *UserIncomingApprovalPermission) GetInitiatedByListId() string {
	if x != nil {
		return x.InitiatedByListId
	}
	return ""
}

func (x *UserIncomingApprovalPermission) GetTransferTimes() []*UintRange {
	if x != nil {
		return x.TransferTimes
	}
	return nil
}

func (x *UserIncomingApprovalPermission) GetBadgeIds() []*UintRange {
	if x != nil {
		return x.BadgeIds
	}
	return nil
}

func (x *UserIncomingApprovalPermission) GetOwnershipTimes() []*UintRange {
	if x != nil {
		return x.OwnershipTimes
	}
	return nil
}

func (x *UserIncomingApprovalPermission) GetApprovalId() string {
	if x != nil {
		return x.ApprovalId
	}
	return ""
}

func (x *UserIncomingApprovalPermission) GetPermanentlyPermittedTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyPermittedTimes
	}
	return nil
}

func (x *UserIncomingApprovalPermission) GetPermanentlyForbiddenTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyForbiddenTimes
	}
	return nil
}

// BadgeIdsActionPermission defines the permissions for updating a timeline-based field for specific badges and specific badge ownership times.
// Currently, this is only used for creating new badges.
//
// Ex: If you want to lock the ability to create new badges for badgeIds [1,2] at ownershipTimes 1/1/2020 - 1/1/2021,
// you could set the combination (badgeIds: [1,2], ownershipTimelineTimes: [1/1/2020 - 1/1/2021]) to always be forbidden.
type BadgeIdsActionPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the badge IDs involved in the transfer.
	BadgeIds []*UintRange `protobuf:"bytes,1,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	// Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
	PermanentlyPermittedTimes []*UintRange `protobuf:"bytes,2,rep,name=permanentlyPermittedTimes,proto3" json:"permanentlyPermittedTimes,omitempty"`
	// Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
	PermanentlyForbiddenTimes []*UintRange `protobuf:"bytes,3,rep,name=permanentlyForbiddenTimes,proto3" json:"permanentlyForbiddenTimes,omitempty"`
}

func (x *BadgeIdsActionPermission) Reset() {
	*x = BadgeIdsActionPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeIdsActionPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeIdsActionPermission) ProtoMessage() {}

// Deprecated: Use BadgeIdsActionPermission.ProtoReflect.Descriptor instead.
func (*BadgeIdsActionPermission) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{5}
}

func (x *BadgeIdsActionPermission) GetBadgeIds() []*UintRange {
	if x != nil {
		return x.BadgeIds
	}
	return nil
}

func (x *BadgeIdsActionPermission) GetPermanentlyPermittedTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyPermittedTimes
	}
	return nil
}

func (x *BadgeIdsActionPermission) GetPermanentlyForbiddenTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyForbiddenTimes
	}
	return nil
}

// ActionPermission defines the permissions for performing an action.
//
// This is simple and straightforward as the only thing we need to check is the permitted/forbidden times.
type ActionPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
	PermanentlyPermittedTimes []*UintRange `protobuf:"bytes,1,rep,name=permanentlyPermittedTimes,proto3" json:"permanentlyPermittedTimes,omitempty"`
	// Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
	PermanentlyForbiddenTimes []*UintRange `protobuf:"bytes,2,rep,name=permanentlyForbiddenTimes,proto3" json:"permanentlyForbiddenTimes,omitempty"`
}

func (x *ActionPermission) Reset() {
	*x = ActionPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPermission) ProtoMessage() {}

// Deprecated: Use ActionPermission.ProtoReflect.Descriptor instead.
func (*ActionPermission) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{6}
}

func (x *ActionPermission) GetPermanentlyPermittedTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyPermittedTimes
	}
	return nil
}

func (x *ActionPermission) GetPermanentlyForbiddenTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyForbiddenTimes
	}
	return nil
}

// TimedUpdatePermission defines the permissions for updating a timeline-based field.
//
// Ex: If you want to lock the ability to update the collection's metadata for timelineTimes 1/1/2020 - 1/1/2021,
// you could set the combination (TimelineTimes: [1/1/2020 - 1/1/2021]) to always be forbidden.
type TimedUpdatePermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
	PermanentlyPermittedTimes []*UintRange `protobuf:"bytes,1,rep,name=permanentlyPermittedTimes,proto3" json:"permanentlyPermittedTimes,omitempty"`
	// Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
	PermanentlyForbiddenTimes []*UintRange `protobuf:"bytes,2,rep,name=permanentlyForbiddenTimes,proto3" json:"permanentlyForbiddenTimes,omitempty"`
	// Specifies the times when the timeline-based field is a specific value.
	TimelineTimes []*UintRange `protobuf:"bytes,3,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (x *TimedUpdatePermission) Reset() {
	*x = TimedUpdatePermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedUpdatePermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedUpdatePermission) ProtoMessage() {}

// Deprecated: Use TimedUpdatePermission.ProtoReflect.Descriptor instead.
func (*TimedUpdatePermission) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{7}
}

func (x *TimedUpdatePermission) GetPermanentlyPermittedTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyPermittedTimes
	}
	return nil
}

func (x *TimedUpdatePermission) GetPermanentlyForbiddenTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyForbiddenTimes
	}
	return nil
}

func (x *TimedUpdatePermission) GetTimelineTimes() []*UintRange {
	if x != nil {
		return x.TimelineTimes
	}
	return nil
}

// TimedUpdateWithBadgeIdsPermission defines the permissions for updating a timeline-based field for specific badges.
//
// Ex: If you want to lock the ability to update the metadata for badgeIds [1,2] for timelineTimes 1/1/2020 - 1/1/2021,
// you could set the combination (badgeIds: [1,2], TimelineTimes: [1/1/2020 - 1/1/2021]) to always be forbidden.
type TimedUpdateWithBadgeIdsPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the badge IDs involved in the transfer.
	BadgeIds []*UintRange `protobuf:"bytes,1,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	// Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
	PermanentlyPermittedTimes []*UintRange `protobuf:"bytes,2,rep,name=permanentlyPermittedTimes,proto3" json:"permanentlyPermittedTimes,omitempty"`
	// Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
	PermanentlyForbiddenTimes []*UintRange `protobuf:"bytes,3,rep,name=permanentlyForbiddenTimes,proto3" json:"permanentlyForbiddenTimes,omitempty"`
	// Specifies the times when the timeline-based field is a specific value.
	TimelineTimes []*UintRange `protobuf:"bytes,4,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (x *TimedUpdateWithBadgeIdsPermission) Reset() {
	*x = TimedUpdateWithBadgeIdsPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_v0_permissions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedUpdateWithBadgeIdsPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedUpdateWithBadgeIdsPermission) ProtoMessage() {}

// Deprecated: Use TimedUpdateWithBadgeIdsPermission.ProtoReflect.Descriptor instead.
func (*TimedUpdateWithBadgeIdsPermission) Descriptor() ([]byte, []int) {
	return file_badges_v0_permissions_proto_rawDescGZIP(), []int{8}
}

func (x *TimedUpdateWithBadgeIdsPermission) GetBadgeIds() []*UintRange {
	if x != nil {
		return x.BadgeIds
	}
	return nil
}

func (x *TimedUpdateWithBadgeIdsPermission) GetPermanentlyPermittedTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyPermittedTimes
	}
	return nil
}

func (x *TimedUpdateWithBadgeIdsPermission) GetPermanentlyForbiddenTimes() []*UintRange {
	if x != nil {
		return x.PermanentlyForbiddenTimes
	}
	return nil
}

func (x *TimedUpdateWithBadgeIdsPermission) GetTimelineTimes() []*UintRange {
	if x != nil {
		return x.TimelineTimes
	}
	return nil
}

var File_badges_v0_permissions_proto protoreflect.FileDescriptor

var file_badges_v0_permissions_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb4, 0x07, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x13,
	0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x14, 0x63,
	0x61, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x61, 0x6e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6e, 0x0a, 0x21, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x21,
	0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x50, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x63, 0x61,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x16, 0x63, 0x61, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x1c,
	0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x63, 0x61, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x69, 0x0a,
	0x1a, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x61,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x69, 0x0a, 0x1a, 0x63, 0x61, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x32, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x32, 0x63,
	0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x12, 0x8b, 0x01, 0x0a, 0x32, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x32, 0x63, 0x61, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22,
	0xfc, 0x03, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xde,
	0x03, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0xe2, 0x03, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3c,
	0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x19,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x10,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x21, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x52,
	0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x42, 0x84, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x30, 0x42, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x62, 0x69, 0x74, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x2f, 0x76, 0x30, 0xa2, 0x02, 0x03, 0x42, 0x56, 0x58, 0xaa, 0x02, 0x09, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x30, 0xca, 0x02, 0x09, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x5c, 0x56, 0x30, 0xe2, 0x02, 0x15, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x5c, 0x56, 0x30,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_badges_v0_permissions_proto_rawDescOnce sync.Once
	file_badges_v0_permissions_proto_rawDescData = file_badges_v0_permissions_proto_rawDesc
)

func file_badges_v0_permissions_proto_rawDescGZIP() []byte {
	file_badges_v0_permissions_proto_rawDescOnce.Do(func() {
		file_badges_v0_permissions_proto_rawDescData = protoimpl.X.CompressGZIP(file_badges_v0_permissions_proto_rawDescData)
	})
	return file_badges_v0_permissions_proto_rawDescData
}

var file_badges_v0_permissions_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_badges_v0_permissions_proto_goTypes = []interface{}{
	(*CollectionPermissions)(nil),             // 0: badges.v0.CollectionPermissions
	(*UserPermissions)(nil),                   // 1: badges.v0.UserPermissions
	(*CollectionApprovalPermission)(nil),      // 2: badges.v0.CollectionApprovalPermission
	(*UserOutgoingApprovalPermission)(nil),    // 3: badges.v0.UserOutgoingApprovalPermission
	(*UserIncomingApprovalPermission)(nil),    // 4: badges.v0.UserIncomingApprovalPermission
	(*BadgeIdsActionPermission)(nil),          // 5: badges.v0.BadgeIdsActionPermission
	(*ActionPermission)(nil),                  // 6: badges.v0.ActionPermission
	(*TimedUpdatePermission)(nil),             // 7: badges.v0.TimedUpdatePermission
	(*TimedUpdateWithBadgeIdsPermission)(nil), // 8: badges.v0.TimedUpdateWithBadgeIdsPermission
	(*UintRange)(nil),                         // 9: badges.v0.UintRange
}
var file_badges_v0_permissions_proto_depIdxs = []int32{
	6,  // 0: badges.v0.CollectionPermissions.canDeleteCollection:type_name -> badges.v0.ActionPermission
	7,  // 1: badges.v0.CollectionPermissions.canArchiveCollection:type_name -> badges.v0.TimedUpdatePermission
	7,  // 2: badges.v0.CollectionPermissions.canUpdateOffChainBalancesMetadata:type_name -> badges.v0.TimedUpdatePermission
	7,  // 3: badges.v0.CollectionPermissions.canUpdateStandards:type_name -> badges.v0.TimedUpdatePermission
	7,  // 4: badges.v0.CollectionPermissions.canUpdateCustomData:type_name -> badges.v0.TimedUpdatePermission
	7,  // 5: badges.v0.CollectionPermissions.canUpdateManager:type_name -> badges.v0.TimedUpdatePermission
	7,  // 6: badges.v0.CollectionPermissions.canUpdateCollectionMetadata:type_name -> badges.v0.TimedUpdatePermission
	5,  // 7: badges.v0.CollectionPermissions.canUpdateValidBadgeIds:type_name -> badges.v0.BadgeIdsActionPermission
	8,  // 8: badges.v0.CollectionPermissions.canUpdateBadgeMetadata:type_name -> badges.v0.TimedUpdateWithBadgeIdsPermission
	2,  // 9: badges.v0.CollectionPermissions.canUpdateCollectionApprovals:type_name -> badges.v0.CollectionApprovalPermission
	3,  // 10: badges.v0.UserPermissions.canUpdateOutgoingApprovals:type_name -> badges.v0.UserOutgoingApprovalPermission
	4,  // 11: badges.v0.UserPermissions.canUpdateIncomingApprovals:type_name -> badges.v0.UserIncomingApprovalPermission
	6,  // 12: badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers:type_name -> badges.v0.ActionPermission
	6,  // 13: badges.v0.UserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers:type_name -> badges.v0.ActionPermission
	9,  // 14: badges.v0.CollectionApprovalPermission.transferTimes:type_name -> badges.v0.UintRange
	9,  // 15: badges.v0.CollectionApprovalPermission.badgeIds:type_name -> badges.v0.UintRange
	9,  // 16: badges.v0.CollectionApprovalPermission.ownershipTimes:type_name -> badges.v0.UintRange
	9,  // 17: badges.v0.CollectionApprovalPermission.permanentlyPermittedTimes:type_name -> badges.v0.UintRange
	9,  // 18: badges.v0.CollectionApprovalPermission.permanentlyForbiddenTimes:type_name -> badges.v0.UintRange
	9,  // 19: badges.v0.UserOutgoingApprovalPermission.transferTimes:type_name -> badges.v0.UintRange
	9,  // 20: badges.v0.UserOutgoingApprovalPermission.badgeIds:type_name -> badges.v0.UintRange
	9,  // 21: badges.v0.UserOutgoingApprovalPermission.ownershipTimes:type_name -> badges.v0.UintRange
	9,  // 22: badges.v0.UserOutgoingApprovalPermission.permanentlyPermittedTimes:type_name -> badges.v0.UintRange
	9,  // 23: badges.v0.UserOutgoingApprovalPermission.permanentlyForbiddenTimes:type_name -> badges.v0.UintRange
	9,  // 24: badges.v0.UserIncomingApprovalPermission.transferTimes:type_name -> badges.v0.UintRange
	9,  // 25: badges.v0.UserIncomingApprovalPermission.badgeIds:type_name -> badges.v0.UintRange
	9,  // 26: badges.v0.UserIncomingApprovalPermission.ownershipTimes:type_name -> badges.v0.UintRange
	9,  // 27: badges.v0.UserIncomingApprovalPermission.permanentlyPermittedTimes:type_name -> badges.v0.UintRange
	9,  // 28: badges.v0.UserIncomingApprovalPermission.permanentlyForbiddenTimes:type_name -> badges.v0.UintRange
	9,  // 29: badges.v0.BadgeIdsActionPermission.badgeIds:type_name -> badges.v0.UintRange
	9,  // 30: badges.v0.BadgeIdsActionPermission.permanentlyPermittedTimes:type_name -> badges.v0.UintRange
	9,  // 31: badges.v0.BadgeIdsActionPermission.permanentlyForbiddenTimes:type_name -> badges.v0.UintRange
	9,  // 32: badges.v0.ActionPermission.permanentlyPermittedTimes:type_name -> badges.v0.UintRange
	9,  // 33: badges.v0.ActionPermission.permanentlyForbiddenTimes:type_name -> badges.v0.UintRange
	9,  // 34: badges.v0.TimedUpdatePermission.permanentlyPermittedTimes:type_name -> badges.v0.UintRange
	9,  // 35: badges.v0.TimedUpdatePermission.permanentlyForbiddenTimes:type_name -> badges.v0.UintRange
	9,  // 36: badges.v0.TimedUpdatePermission.timelineTimes:type_name -> badges.v0.UintRange
	9,  // 37: badges.v0.TimedUpdateWithBadgeIdsPermission.badgeIds:type_name -> badges.v0.UintRange
	9,  // 38: badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes:type_name -> badges.v0.UintRange
	9,  // 39: badges.v0.TimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes:type_name -> badges.v0.UintRange
	9,  // 40: badges.v0.TimedUpdateWithBadgeIdsPermission.timelineTimes:type_name -> badges.v0.UintRange
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_badges_v0_permissions_proto_init() }
func file_badges_v0_permissions_proto_init() {
	if File_badges_v0_permissions_proto != nil {
		return
	}
	file_badges_v0_balances_proto_init()
	file_badges_v0_address_lists_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_badges_v0_permissions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_v0_permissions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_v0_permissions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionApprovalPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_v0_permissions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOutgoingApprovalPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_v0_permissions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIncomingApprovalPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_v0_permissions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeIdsActionPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_v0_permissions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_v0_permissions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedUpdatePermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_v0_permissions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedUpdateWithBadgeIdsPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_badges_v0_permissions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_badges_v0_permissions_proto_goTypes,
		DependencyIndexes: file_badges_v0_permissions_proto_depIdxs,
		MessageInfos:      file_badges_v0_permissions_proto_msgTypes,
	}.Build()
	File_badges_v0_permissions_proto = out.File
	file_badges_v0_permissions_proto_rawDesc = nil
	file_badges_v0_permissions_proto_goTypes = nil
	file_badges_v0_permissions_proto_depIdxs = nil
}

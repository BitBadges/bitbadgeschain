// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgDeleteCollection } from "./types/badges/tx";
import { MsgCreateCollection } from "./types/badges/tx";
import { MsgCreateAddressMappings } from "./types/badges/tx";
import { MsgUniversalUpdateCollection } from "./types/badges/tx";
import { MsgTransferBadges } from "./types/badges/tx";
import { MsgUpdateUserApprovals } from "./types/badges/tx";

import { AddressMapping as typeAddressMapping} from "./types"
import { UintRange as typeUintRange} from "./types"
import { Balance as typeBalance} from "./types"
import { MustOwnBadges as typeMustOwnBadges} from "./types"
import { InheritedBalance as typeInheritedBalance} from "./types"
import { BadgeCollection as typeBadgeCollection} from "./types"
import { UserOutgoingApprovalTimeline as typeUserOutgoingApprovalTimeline} from "./types"
import { UserIncomingApprovalTimeline as typeUserIncomingApprovalTimeline} from "./types"
import { CollectionApprovalTimeline as typeCollectionApprovalTimeline} from "./types"
import { MsgNewCollection as typeMsgNewCollection} from "./types"
import { MsgNewCollectionResponse as typeMsgNewCollectionResponse} from "./types"
import { MsgMintAndDistributeBadges as typeMsgMintAndDistributeBadges} from "./types"
import { MsgMintAndDistributeBadgesResponse as typeMsgMintAndDistributeBadgesResponse} from "./types"
import { MsgUniversalUpdateCollectionApprovals as typeMsgUniversalUpdateCollectionApprovals} from "./types"
import { MsgUniversalUpdateCollectionApprovalsResponse as typeMsgUniversalUpdateCollectionApprovalsResponse} from "./types"
import { MsgUpdateMetadata as typeMsgUpdateMetadata} from "./types"
import { MsgUpdateMetadataResponse as typeMsgUpdateMetadataResponse} from "./types"
import { MsgUniversalUpdateCollectionPermissions as typeMsgUniversalUpdateCollectionPermissions} from "./types"
import { MsgUniversalUpdateCollectionPermissionsResponse as typeMsgUniversalUpdateCollectionPermissionsResponse} from "./types"
import { MsgUpdateUserPermissions as typeMsgUpdateUserPermissions} from "./types"
import { MsgUpdateUserPermissionsResponse as typeMsgUpdateUserPermissionsResponse} from "./types"
import { MsgUpdateManager as typeMsgUpdateManager} from "./types"
import { MsgUpdateManagerResponse as typeMsgUpdateManagerResponse} from "./types"
import { MsgArchiveCollection as typeMsgArchiveCollection} from "./types"
import { MsgArchiveCollectionResponse as typeMsgArchiveCollectionResponse} from "./types"
import { BadgeMetadata as typeBadgeMetadata} from "./types"
import { CollectionMetadata as typeCollectionMetadata} from "./types"
import { OffChainBalancesMetadata as typeOffChainBalancesMetadata} from "./types"
import { BadgesPacketData as typeBadgesPacketData} from "./types"
import { NoData as typeNoData} from "./types"
import { Params as typeParams} from "./types"
import { CollectionPermissions as typeCollectionPermissions} from "./types"
import { UserPermissions as typeUserPermissions} from "./types"
import { CollectionApprovalPermission as typeCollectionApprovalPermission} from "./types"
import { UserOutgoingApprovalPermission as typeUserOutgoingApprovalPermission} from "./types"
import { UserIncomingApprovalPermission as typeUserIncomingApprovalPermission} from "./types"
import { BalancesActionPermission as typeBalancesActionPermission} from "./types"
import { ActionPermission as typeActionPermission} from "./types"
import { TimedUpdatePermission as typeTimedUpdatePermission} from "./types"
import { TimedUpdateWithBadgeIdsPermission as typeTimedUpdateWithBadgeIdsPermission} from "./types"
import { CollectionMetadataTimeline as typeCollectionMetadataTimeline} from "./types"
import { BadgeMetadataTimeline as typeBadgeMetadataTimeline} from "./types"
import { OffChainBalancesMetadataTimeline as typeOffChainBalancesMetadataTimeline} from "./types"
import { InheritedBalancesTimeline as typeInheritedBalancesTimeline} from "./types"
import { CustomDataTimeline as typeCustomDataTimeline} from "./types"
import { ManagerTimeline as typeManagerTimeline} from "./types"
import { IsArchivedTimeline as typeIsArchivedTimeline} from "./types"
import { ContractAddressTimeline as typeContractAddressTimeline} from "./types"
import { StandardsTimeline as typeStandardsTimeline} from "./types"
import { UserBalanceStore as typeUserBalanceStore} from "./types"
import { MerkleChallenge as typeMerkleChallenge} from "./types"
import { UserOutgoingApproval as typeUserOutgoingApproval} from "./types"
import { UserIncomingApproval as typeUserIncomingApproval} from "./types"
import { ManualBalances as typeManualBalances} from "./types"
import { IncrementedBalances as typeIncrementedBalances} from "./types"
import { PredeterminedOrderCalculationMethod as typePredeterminedOrderCalculationMethod} from "./types"
import { PredeterminedBalances as typePredeterminedBalances} from "./types"
import { ApprovalAmounts as typeApprovalAmounts} from "./types"
import { MaxNumTransfers as typeMaxNumTransfers} from "./types"
import { ApprovalsTracker as typeApprovalsTracker} from "./types"
import { ApprovalCriteria as typeApprovalCriteria} from "./types"
import { OutgoingApprovalCriteria as typeOutgoingApprovalCriteria} from "./types"
import { IncomingApprovalCriteria as typeIncomingApprovalCriteria} from "./types"
import { CollectionApproval as typeCollectionApproval} from "./types"
import { ApprovalIdentifierDetails as typeApprovalIdentifierDetails} from "./types"
import { Transfer as typeTransfer} from "./types"
import { MerklePathItem as typeMerklePathItem} from "./types"
import { MerkleProof as typeMerkleProof} from "./types"
import { BadgeCustomMsgType as typeBadgeCustomMsgType} from "./types"

export { MsgDeleteCollection, MsgCreateCollection, MsgCreateAddressMappings, MsgUniversalUpdateCollection, MsgTransferBadges, MsgUpdateUserApprovals };

type sendMsgDeleteCollectionParams = {
  value: MsgDeleteCollection,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateCollectionParams = {
  value: MsgCreateCollection,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateAddressMappingsParams = {
  value: MsgCreateAddressMappings,
  fee?: StdFee,
  memo?: string
};

type sendMsgUniversalUpdateCollectionParams = {
  value: MsgUniversalUpdateCollection,
  fee?: StdFee,
  memo?: string
};

type sendMsgTransferBadgesParams = {
  value: MsgTransferBadges,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateUserApprovalsParams = {
  value: MsgUpdateUserApprovals,
  fee?: StdFee,
  memo?: string
};


type msgDeleteCollectionParams = {
  value: MsgDeleteCollection,
};

type msgCreateCollectionParams = {
  value: MsgCreateCollection,
};

type msgCreateAddressMappingsParams = {
  value: MsgCreateAddressMappings,
};

type msgUniversalUpdateCollectionParams = {
  value: MsgUniversalUpdateCollection,
};

type msgTransferBadgesParams = {
  value: MsgTransferBadges,
};

type msgUpdateUserApprovalsParams = {
  value: MsgUpdateUserApprovals,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgDeleteCollection({ value, fee, memo }: sendMsgDeleteCollectionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteCollection: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteCollection({ value: MsgDeleteCollection.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteCollection: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateCollection({ value, fee, memo }: sendMsgCreateCollectionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateCollection: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateCollection({ value: MsgCreateCollection.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateCollection: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateAddressMappings({ value, fee, memo }: sendMsgCreateAddressMappingsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateAddressMappings: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateAddressMappings({ value: MsgCreateAddressMappings.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateAddressMappings: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUniversalUpdateCollection({ value, fee, memo }: sendMsgUniversalUpdateCollectionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUniversalUpdateCollection: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUniversalUpdateCollection({ value: MsgUniversalUpdateCollection.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUniversalUpdateCollection: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTransferBadges({ value, fee, memo }: sendMsgTransferBadgesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTransferBadges: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgTransferBadges({ value: MsgTransferBadges.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTransferBadges: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateUserApprovals({ value, fee, memo }: sendMsgUpdateUserApprovalsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateUserApprovals: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateUserApprovals({ value: MsgUpdateUserApprovals.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateUserApprovals: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgDeleteCollection({ value }: msgDeleteCollectionParams): EncodeObject {
			try {
				return { typeUrl: "/badges.MsgDeleteCollection", value: MsgDeleteCollection.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteCollection: Could not create message: ' + e.message)
			}
		},
		
		msgCreateCollection({ value }: msgCreateCollectionParams): EncodeObject {
			try {
				return { typeUrl: "/badges.MsgCreateCollection", value: MsgCreateCollection.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateCollection: Could not create message: ' + e.message)
			}
		},
		
		msgCreateAddressMappings({ value }: msgCreateAddressMappingsParams): EncodeObject {
			try {
				return { typeUrl: "/badges.MsgCreateAddressMappings", value: MsgCreateAddressMappings.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateAddressMappings: Could not create message: ' + e.message)
			}
		},
		
		msgUniversalUpdateCollection({ value }: msgUniversalUpdateCollectionParams): EncodeObject {
			try {
				return { typeUrl: "/badges.MsgUniversalUpdateCollection", value: MsgUniversalUpdateCollection.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUniversalUpdateCollection: Could not create message: ' + e.message)
			}
		},
		
		msgTransferBadges({ value }: msgTransferBadgesParams): EncodeObject {
			try {
				return { typeUrl: "/badges.MsgTransferBadges", value: MsgTransferBadges.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTransferBadges: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateUserApprovals({ value }: msgUpdateUserApprovalsParams): EncodeObject {
			try {
				return { typeUrl: "/badges.MsgUpdateUserApprovals", value: MsgUpdateUserApprovals.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateUserApprovals: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						AddressMapping: getStructure(typeAddressMapping.fromPartial({})),
						UintRange: getStructure(typeUintRange.fromPartial({})),
						Balance: getStructure(typeBalance.fromPartial({})),
						MustOwnBadges: getStructure(typeMustOwnBadges.fromPartial({})),
						InheritedBalance: getStructure(typeInheritedBalance.fromPartial({})),
						BadgeCollection: getStructure(typeBadgeCollection.fromPartial({})),
						UserOutgoingApprovalTimeline: getStructure(typeUserOutgoingApprovalTimeline.fromPartial({})),
						UserIncomingApprovalTimeline: getStructure(typeUserIncomingApprovalTimeline.fromPartial({})),
						CollectionApprovalTimeline: getStructure(typeCollectionApprovalTimeline.fromPartial({})),
						MsgNewCollection: getStructure(typeMsgNewCollection.fromPartial({})),
						MsgNewCollectionResponse: getStructure(typeMsgNewCollectionResponse.fromPartial({})),
						MsgMintAndDistributeBadges: getStructure(typeMsgMintAndDistributeBadges.fromPartial({})),
						MsgMintAndDistributeBadgesResponse: getStructure(typeMsgMintAndDistributeBadgesResponse.fromPartial({})),
						MsgUniversalUpdateCollectionApprovals: getStructure(typeMsgUniversalUpdateCollectionApprovals.fromPartial({})),
						MsgUniversalUpdateCollectionApprovalsResponse: getStructure(typeMsgUniversalUpdateCollectionApprovalsResponse.fromPartial({})),
						MsgUpdateMetadata: getStructure(typeMsgUpdateMetadata.fromPartial({})),
						MsgUpdateMetadataResponse: getStructure(typeMsgUpdateMetadataResponse.fromPartial({})),
						MsgUniversalUpdateCollectionPermissions: getStructure(typeMsgUniversalUpdateCollectionPermissions.fromPartial({})),
						MsgUniversalUpdateCollectionPermissionsResponse: getStructure(typeMsgUniversalUpdateCollectionPermissionsResponse.fromPartial({})),
						MsgUpdateUserPermissions: getStructure(typeMsgUpdateUserPermissions.fromPartial({})),
						MsgUpdateUserPermissionsResponse: getStructure(typeMsgUpdateUserPermissionsResponse.fromPartial({})),
						MsgUpdateManager: getStructure(typeMsgUpdateManager.fromPartial({})),
						MsgUpdateManagerResponse: getStructure(typeMsgUpdateManagerResponse.fromPartial({})),
						MsgArchiveCollection: getStructure(typeMsgArchiveCollection.fromPartial({})),
						MsgArchiveCollectionResponse: getStructure(typeMsgArchiveCollectionResponse.fromPartial({})),
						BadgeMetadata: getStructure(typeBadgeMetadata.fromPartial({})),
						CollectionMetadata: getStructure(typeCollectionMetadata.fromPartial({})),
						OffChainBalancesMetadata: getStructure(typeOffChainBalancesMetadata.fromPartial({})),
						BadgesPacketData: getStructure(typeBadgesPacketData.fromPartial({})),
						NoData: getStructure(typeNoData.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						CollectionPermissions: getStructure(typeCollectionPermissions.fromPartial({})),
						UserPermissions: getStructure(typeUserPermissions.fromPartial({})),
						CollectionApprovalPermission: getStructure(typeCollectionApprovalPermission.fromPartial({})),
						UserOutgoingApprovalPermission: getStructure(typeUserOutgoingApprovalPermission.fromPartial({})),
						UserIncomingApprovalPermission: getStructure(typeUserIncomingApprovalPermission.fromPartial({})),
						BalancesActionPermission: getStructure(typeBalancesActionPermission.fromPartial({})),
						ActionPermission: getStructure(typeActionPermission.fromPartial({})),
						TimedUpdatePermission: getStructure(typeTimedUpdatePermission.fromPartial({})),
						TimedUpdateWithBadgeIdsPermission: getStructure(typeTimedUpdateWithBadgeIdsPermission.fromPartial({})),
						CollectionMetadataTimeline: getStructure(typeCollectionMetadataTimeline.fromPartial({})),
						BadgeMetadataTimeline: getStructure(typeBadgeMetadataTimeline.fromPartial({})),
						OffChainBalancesMetadataTimeline: getStructure(typeOffChainBalancesMetadataTimeline.fromPartial({})),
						InheritedBalancesTimeline: getStructure(typeInheritedBalancesTimeline.fromPartial({})),
						CustomDataTimeline: getStructure(typeCustomDataTimeline.fromPartial({})),
						ManagerTimeline: getStructure(typeManagerTimeline.fromPartial({})),
						IsArchivedTimeline: getStructure(typeIsArchivedTimeline.fromPartial({})),
						ContractAddressTimeline: getStructure(typeContractAddressTimeline.fromPartial({})),
						StandardsTimeline: getStructure(typeStandardsTimeline.fromPartial({})),
						UserBalanceStore: getStructure(typeUserBalanceStore.fromPartial({})),
						MerkleChallenge: getStructure(typeMerkleChallenge.fromPartial({})),
						UserOutgoingApproval: getStructure(typeUserOutgoingApproval.fromPartial({})),
						UserIncomingApproval: getStructure(typeUserIncomingApproval.fromPartial({})),
						ManualBalances: getStructure(typeManualBalances.fromPartial({})),
						IncrementedBalances: getStructure(typeIncrementedBalances.fromPartial({})),
						PredeterminedOrderCalculationMethod: getStructure(typePredeterminedOrderCalculationMethod.fromPartial({})),
						PredeterminedBalances: getStructure(typePredeterminedBalances.fromPartial({})),
						ApprovalAmounts: getStructure(typeApprovalAmounts.fromPartial({})),
						MaxNumTransfers: getStructure(typeMaxNumTransfers.fromPartial({})),
						ApprovalsTracker: getStructure(typeApprovalsTracker.fromPartial({})),
						ApprovalCriteria: getStructure(typeApprovalCriteria.fromPartial({})),
						OutgoingApprovalCriteria: getStructure(typeOutgoingApprovalCriteria.fromPartial({})),
						IncomingApprovalCriteria: getStructure(typeIncomingApprovalCriteria.fromPartial({})),
						CollectionApproval: getStructure(typeCollectionApproval.fromPartial({})),
						ApprovalIdentifierDetails: getStructure(typeApprovalIdentifierDetails.fromPartial({})),
						Transfer: getStructure(typeTransfer.fromPartial({})),
						MerklePathItem: getStructure(typeMerklePathItem.fromPartial({})),
						MerkleProof: getStructure(typeMerkleProof.fromPartial({})),
						BadgeCustomMsgType: getStructure(typeBadgeCustomMsgType.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			Badges: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitcoin/web3.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ExtensionOptionsWeb3Tx is an extension option that specifies the typed chain id,
// the fee payer as well as its signature data.
type ExtensionOptionsWeb3TxBitcoin struct {
	// typed_data_chain_id is used only in EIP712 Domain and should match
	// Ethereum network ID in a Web3 provider (e.g. Metamask).
	TypedDataChainID uint64 `protobuf:"varint,1,opt,name=typed_data_chain_id,json=typedDataChainId,proto3" json:"typedDataChainID,omitempty"`
	// fee_payer is an account address for the fee payer. It will be validated
	// during EIP712 signature checking.
	FeePayer string `protobuf:"bytes,2,opt,name=fee_payer,json=feePayer,proto3" json:"feePayer,omitempty"`
	// fee_payer_sig is a signature data from the fee paying account,
	// allows to perform fee delegation when using EIP712 Domain.
	FeePayerSig []byte `protobuf:"bytes,3,opt,name=fee_payer_sig,json=feePayerSig,proto3" json:"feePayerSig,omitempty"`
	// chain should be "Bitcoin"
	Chain string `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *ExtensionOptionsWeb3TxBitcoin) Reset()         { *m = ExtensionOptionsWeb3TxBitcoin{} }
func (m *ExtensionOptionsWeb3TxBitcoin) String() string { return proto.CompactTextString(m) }
func (*ExtensionOptionsWeb3TxBitcoin) ProtoMessage()    {}
func (*ExtensionOptionsWeb3TxBitcoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfd6b234453d5451, []int{0}
}
func (m *ExtensionOptionsWeb3TxBitcoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionOptionsWeb3TxBitcoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtensionOptionsWeb3TxBitcoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtensionOptionsWeb3TxBitcoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionOptionsWeb3TxBitcoin.Merge(m, src)
}
func (m *ExtensionOptionsWeb3TxBitcoin) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionOptionsWeb3TxBitcoin) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionOptionsWeb3TxBitcoin.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionOptionsWeb3TxBitcoin proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExtensionOptionsWeb3TxBitcoin)(nil), "bitcoin.ExtensionOptionsWeb3TxBitcoin")
}

func init() { proto.RegisterFile("bitcoin/web3.proto", fileDescriptor_dfd6b234453d5451) }

var fileDescriptor_dfd6b234453d5451 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0xb3, 0xb5, 0xfe, 0x69, 0x54, 0x2c, 0x5b, 0x95, 0x58, 0x30, 0x29, 0x9e, 0x2a, 0x68,
	0x03, 0xe6, 0x26, 0x08, 0x12, 0xeb, 0xc1, 0x93, 0xa2, 0x05, 0xa1, 0x97, 0xb0, 0xdb, 0x4c, 0xd3,
	0x05, 0x9b, 0x0d, 0xcd, 0x88, 0xed, 0x1b, 0x78, 0xf4, 0x11, 0xbc, 0xf9, 0x2a, 0x1e, 0x7b, 0xf4,
	0x14, 0x24, 0xbd, 0xe5, 0x29, 0x24, 0x5b, 0xab, 0xa1, 0x97, 0x65, 0xf8, 0x7e, 0xf3, 0xed, 0xb2,
	0x33, 0x3a, 0xe5, 0x02, 0x7b, 0x52, 0x84, 0xf6, 0x0b, 0x70, 0xa7, 0x15, 0x8d, 0x24, 0x4a, 0xba,
	0xfe, 0xcb, 0xea, 0xbb, 0x81, 0x0c, 0xa4, 0x62, 0x76, 0x5e, 0xcd, 0xe3, 0xa3, 0x8f, 0x92, 0x7e,
	0x78, 0x3d, 0x46, 0x08, 0x63, 0x21, 0xc3, 0xdb, 0x08, 0x85, 0x0c, 0xe3, 0x47, 0xe0, 0x4e, 0x67,
	0xec, 0xce, 0x3d, 0xca, 0xf4, 0x1a, 0x4e, 0x22, 0xf0, 0x3d, 0x9f, 0x21, 0xf3, 0x7a, 0x03, 0x26,
	0x42, 0x4f, 0xf8, 0x06, 0x69, 0x90, 0x66, 0xd9, 0x3d, 0x4b, 0x13, 0xab, 0xda, 0xc9, 0xe3, 0x36,
	0x43, 0x76, 0x95, 0x87, 0x37, 0xed, 0x2c, 0xb1, 0xea, 0xb8, 0xc4, 0x4e, 0xe4, 0x50, 0x20, 0x0c,
	0x23, 0x9c, 0xdc, 0x57, 0x97, 0x32, 0x9f, 0x3a, 0x7a, 0xa5, 0x0f, 0xe0, 0x45, 0x6c, 0x02, 0x23,
	0xa3, 0xd4, 0x20, 0xcd, 0x8a, 0xbb, 0x9f, 0x25, 0x16, 0xed, 0x03, 0xdc, 0xe5, 0xac, 0x20, 0x6f,
	0x2c, 0x18, 0xbd, 0xd0, 0xb7, 0xff, 0x24, 0x2f, 0x16, 0x81, 0xb1, 0xd2, 0x20, 0xcd, 0x2d, 0xf7,
	0x20, 0x4b, 0xac, 0xbd, 0x45, 0xd3, 0x83, 0x08, 0x0a, 0xee, 0x66, 0x01, 0xd3, 0x63, 0x7d, 0x55,
	0xfd, 0xc5, 0x28, 0xab, 0xf7, 0x6a, 0x59, 0x62, 0xed, 0x28, 0x50, 0x10, 0xe6, 0x1d, 0xe7, 0xe5,
	0xd7, 0x77, 0x4b, 0x73, 0xbb, 0x9f, 0xa9, 0x49, 0xa6, 0xa9, 0x49, 0xbe, 0x53, 0x93, 0xbc, 0xcd,
	0x4c, 0x6d, 0x3a, 0x33, 0xb5, 0xaf, 0x99, 0xa9, 0x75, 0x2f, 0x03, 0x81, 0x83, 0x67, 0xde, 0xea,
	0xc9, 0xa1, 0xcd, 0x05, 0x72, 0xe6, 0x07, 0x10, 0xff, 0x57, 0xea, 0x12, 0x5b, 0x9d, 0xa7, 0x03,
	0x16, 0xfa, 0x4f, 0x30, 0x52, 0xa9, 0xda, 0x54, 0x3e, 0x8b, 0x98, 0xaf, 0xa9, 0x65, 0x38, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x04, 0x43, 0x43, 0xc1, 0x01, 0x00, 0x00,
}

func (m *ExtensionOptionsWeb3TxBitcoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionOptionsWeb3TxBitcoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtensionOptionsWeb3TxBitcoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintWeb3(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FeePayerSig) > 0 {
		i -= len(m.FeePayerSig)
		copy(dAtA[i:], m.FeePayerSig)
		i = encodeVarintWeb3(dAtA, i, uint64(len(m.FeePayerSig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintWeb3(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TypedDataChainID != 0 {
		i = encodeVarintWeb3(dAtA, i, uint64(m.TypedDataChainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWeb3(dAtA []byte, offset int, v uint64) int {
	offset -= sovWeb3(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExtensionOptionsWeb3TxBitcoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypedDataChainID != 0 {
		n += 1 + sovWeb3(uint64(m.TypedDataChainID))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovWeb3(uint64(l))
	}
	l = len(m.FeePayerSig)
	if l > 0 {
		n += 1 + l + sovWeb3(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovWeb3(uint64(l))
	}
	return n
}

func sovWeb3(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWeb3(x uint64) (n int) {
	return sovWeb3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExtensionOptionsWeb3TxBitcoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionOptionsWeb3TxBitcoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionOptionsWeb3TxBitcoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypedDataChainID", wireType)
			}
			m.TypedDataChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypedDataChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWeb3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayerSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWeb3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWeb3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayerSig = append(m.FeePayerSig[:0], dAtA[iNdEx:postIndex]...)
			if m.FeePayerSig == nil {
				m.FeePayerSig = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWeb3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWeb3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWeb3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWeb3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeb3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeb3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWeb3
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWeb3
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWeb3
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWeb3        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWeb3          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWeb3 = fmt.Errorf("proto: unexpected end of group")
)

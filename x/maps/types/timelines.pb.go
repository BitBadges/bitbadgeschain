// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maps/timelines.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MapMetadataTimeline defines the metadata for a collection at different timeline times.
type MapMetadataTimeline struct {
	// The collection metadata for a specific timeline element.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The timeline times when the collection metadata is valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *MapMetadataTimeline) Reset()         { *m = MapMetadataTimeline{} }
func (m *MapMetadataTimeline) String() string { return proto.CompactTextString(m) }
func (*MapMetadataTimeline) ProtoMessage()    {}
func (*MapMetadataTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_31334a347a489fe7, []int{0}
}
func (m *MapMetadataTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapMetadataTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapMetadataTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapMetadataTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapMetadataTimeline.Merge(m, src)
}
func (m *MapMetadataTimeline) XXX_Size() int {
	return m.Size()
}
func (m *MapMetadataTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_MapMetadataTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_MapMetadataTimeline proto.InternalMessageInfo

func (m *MapMetadataTimeline) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MapMetadataTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

// ManagerTimeline defines the manager address at different timeline times.
type ManagerTimeline struct {
	// The manager address for a specific timeline element.
	Manager string `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	// The timeline times when the manager address is valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *ManagerTimeline) Reset()         { *m = ManagerTimeline{} }
func (m *ManagerTimeline) String() string { return proto.CompactTextString(m) }
func (*ManagerTimeline) ProtoMessage()    {}
func (*ManagerTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_31334a347a489fe7, []int{1}
}
func (m *ManagerTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerTimeline.Merge(m, src)
}
func (m *ManagerTimeline) XXX_Size() int {
	return m.Size()
}
func (m *ManagerTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerTimeline proto.InternalMessageInfo

func (m *ManagerTimeline) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *ManagerTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

func init() {
	proto.RegisterType((*MapMetadataTimeline)(nil), "maps.MapMetadataTimeline")
	proto.RegisterType((*ManagerTimeline)(nil), "maps.ManagerTimeline")
}

func init() { proto.RegisterFile("maps/timelines.proto", fileDescriptor_31334a347a489fe7) }

var fileDescriptor_31334a347a489fe7 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0xc7, 0x5b, 0x15, 0xff, 0x64, 0xe8, 0xa0, 0x1b, 0x52, 0x2b, 0x84, 0xb1, 0xd3, 0xf0, 0xd0,
	0xc0, 0x64, 0x2f, 0xe0, 0xbd, 0x97, 0xa2, 0x17, 0x6f, 0xbf, 0x6c, 0x31, 0x06, 0xda, 0x24, 0x34,
	0x11, 0xb6, 0xb7, 0xf0, 0xb1, 0x3c, 0xee, 0xe8, 0x51, 0xda, 0x17, 0x91, 0x26, 0xcd, 0x60, 0xd7,
	0xdd, 0x7e, 0xfd, 0xf4, 0xfb, 0xc9, 0x37, 0x7f, 0xd0, 0xb4, 0x06, 0x6d, 0x88, 0x15, 0x35, 0xab,
	0x84, 0x64, 0x26, 0xd7, 0x8d, 0xb2, 0x2a, 0xb9, 0xe8, 0x69, 0xf6, 0xc0, 0x95, 0xe2, 0x15, 0x23,
	0x8e, 0xd1, 0xaf, 0x0f, 0x02, 0x72, 0xe7, 0x03, 0xd9, 0xc4, 0x69, 0x14, 0x2a, 0x90, 0xeb, 0x60,
	0x65, 0xf7, 0x0e, 0x6a, 0xd6, 0xd4, 0xc2, 0x18, 0xa1, 0xa4, 0x39, 0x0a, 0xd7, 0xcc, 0xc2, 0x06,
	0x2c, 0x0c, 0x70, 0xca, 0x15, 0x57, 0x6e, 0x24, 0xfd, 0xe4, 0xe9, 0x7c, 0x8b, 0x26, 0x05, 0xe8,
	0x62, 0x88, 0xbe, 0x0e, 0xdb, 0x4a, 0x9e, 0xd0, 0x75, 0xd0, 0xd3, 0x78, 0x16, 0x2f, 0x46, 0xcb,
	0xbb, 0xbc, 0x5f, 0x34, 0x0f, 0xc9, 0xf2, 0xf0, 0x3f, 0x59, 0xa1, 0xdb, 0x70, 0x9c, 0xde, 0x37,
	0xe9, 0xd9, 0xec, 0x7c, 0x31, 0x5a, 0x8e, 0xbd, 0xf0, 0x26, 0xa4, 0x2d, 0x41, 0x72, 0x56, 0x1e,
	0xa7, 0xe6, 0x14, 0x8d, 0x0b, 0x90, 0xc0, 0x59, 0x73, 0x68, 0x4d, 0xd1, 0x55, 0xed, 0x91, 0x2b,
	0xbd, 0x29, 0xc3, 0xe7, 0x89, 0x1d, 0x2f, 0xab, 0x9f, 0x16, 0xc7, 0xfb, 0x16, 0xc7, 0x7f, 0x2d,
	0x8e, 0xbf, 0x3b, 0x1c, 0xed, 0x3b, 0x1c, 0xfd, 0x76, 0x38, 0x7a, 0x7f, 0xa4, 0xc2, 0x52, 0xd8,
	0x70, 0x66, 0xd6, 0x9f, 0x20, 0x24, 0xd9, 0x12, 0xff, 0x2e, 0x3b, 0xcd, 0x0c, 0xbd, 0x74, 0x77,
	0xf3, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x82, 0xac, 0x82, 0xac, 0x01, 0x00, 0x00,
}

func (m *MapMetadataTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapMetadataTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapMetadataTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimelines(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ManagerTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagerTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTimelines(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimelines(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimelines(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MapMetadataTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *ManagerTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func sovTimelines(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimelines(x uint64) (n int) {
	return sovTimelines(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapMetadataTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapMetadataTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapMetadataTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimelines(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimelines
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimelines
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimelines
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimelines        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimelines          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimelines = fmt.Errorf("proto: unexpected end of group")
)

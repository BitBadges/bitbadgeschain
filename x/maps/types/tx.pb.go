// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maps/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValueStore struct {
	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	LastSetBy string `protobuf:"bytes,3,opt,name=lastSetBy,proto3" json:"lastSetBy,omitempty"`
}

func (m *ValueStore) Reset()         { *m = ValueStore{} }
func (m *ValueStore) String() string { return proto.CompactTextString(m) }
func (*ValueStore) ProtoMessage()    {}
func (*ValueStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{0}
}
func (m *ValueStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueStore.Merge(m, src)
}
func (m *ValueStore) XXX_Size() int {
	return m.Size()
}
func (m *ValueStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueStore.DiscardUnknown(m)
}

var xxx_messageInfo_ValueStore proto.InternalMessageInfo

func (m *ValueStore) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ValueStore) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ValueStore) GetLastSetBy() string {
	if m != nil {
		return m.LastSetBy
	}
	return ""
}

type MapPermissions struct {
	CanUpdateMetadata      []*TimedUpdatePermission  `protobuf:"bytes,1,rep,name=canUpdateMetadata,proto3" json:"canUpdateMetadata,omitempty"`
	CanUpdateManager       []*TimedUpdatePermission  `protobuf:"bytes,2,rep,name=canUpdateManager,proto3" json:"canUpdateManager,omitempty"`
	CanUpdateEditApprovals []*EditApprovalPermission `protobuf:"bytes,3,rep,name=canUpdateEditApprovals,proto3" json:"canUpdateEditApprovals,omitempty"`
	CanDeleteMap           []*ActionPermission       `protobuf:"bytes,4,rep,name=canDeleteMap,proto3" json:"canDeleteMap,omitempty"`
}

func (m *MapPermissions) Reset()         { *m = MapPermissions{} }
func (m *MapPermissions) String() string { return proto.CompactTextString(m) }
func (*MapPermissions) ProtoMessage()    {}
func (*MapPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{1}
}
func (m *MapPermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapPermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapPermissions.Merge(m, src)
}
func (m *MapPermissions) XXX_Size() int {
	return m.Size()
}
func (m *MapPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_MapPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_MapPermissions proto.InternalMessageInfo

func (m *MapPermissions) GetCanUpdateMetadata() []*TimedUpdatePermission {
	if m != nil {
		return m.CanUpdateMetadata
	}
	return nil
}

func (m *MapPermissions) GetCanUpdateManager() []*TimedUpdatePermission {
	if m != nil {
		return m.CanUpdateManager
	}
	return nil
}

func (m *MapPermissions) GetCanUpdateEditApprovals() []*EditApprovalPermission {
	if m != nil {
		return m.CanUpdateEditApprovals
	}
	return nil
}

func (m *MapPermissions) GetCanDeleteMap() []*ActionPermission {
	if m != nil {
		return m.CanDeleteMap
	}
	return nil
}

type EditApproval struct {
	ApprovalId       string       `protobuf:"bytes,13,opt,name=approvalId,proto3" json:"approvalId,omitempty"`
	EditableTimes    []*UintRange `protobuf:"bytes,1,rep,name=editableTimes,proto3" json:"editableTimes,omitempty"`
	EditorListId     string       `protobuf:"bytes,2,opt,name=editorListId,proto3" json:"editorListId,omitempty"`
	KeyListId        string       `protobuf:"bytes,3,opt,name=keyListId,proto3" json:"keyListId,omitempty"`
	IsEditable       bool         `protobuf:"varint,4,opt,name=isEditable,proto3" json:"isEditable,omitempty"`
	FrozenIfSet      bool         `protobuf:"varint,5,opt,name=frozenIfSet,proto3" json:"frozenIfSet,omitempty"`
	ExpectUint       bool         `protobuf:"varint,6,opt,name=expectUint,proto3" json:"expectUint,omitempty"`
	ExpectBoolean    bool         `protobuf:"varint,7,opt,name=expectBoolean,proto3" json:"expectBoolean,omitempty"`
	ExpectAddress    bool         `protobuf:"varint,8,opt,name=expectAddress,proto3" json:"expectAddress,omitempty"`
	ExpectUri        bool         `protobuf:"varint,9,opt,name=expectUri,proto3" json:"expectUri,omitempty"`
	KeyMustBeCreator bool         `protobuf:"varint,10,opt,name=keyMustBeCreator,proto3" json:"keyMustBeCreator,omitempty"`
	// ID slots are only updatable by badge ID owner of this collection (>1 balance at current time)
	MustOwnBadgeFromCollection Uint `protobuf:"bytes,11,opt,name=mustOwnBadgeFromCollection,proto3,customtype=Uint" json:"mustOwnBadgeFromCollection"`
	MustBeLastSetBy            bool `protobuf:"varint,12,opt,name=mustBeLastSetBy,proto3" json:"mustBeLastSetBy,omitempty"`
}

func (m *EditApproval) Reset()         { *m = EditApproval{} }
func (m *EditApproval) String() string { return proto.CompactTextString(m) }
func (*EditApproval) ProtoMessage()    {}
func (*EditApproval) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{2}
}
func (m *EditApproval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditApproval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditApproval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditApproval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditApproval.Merge(m, src)
}
func (m *EditApproval) XXX_Size() int {
	return m.Size()
}
func (m *EditApproval) XXX_DiscardUnknown() {
	xxx_messageInfo_EditApproval.DiscardUnknown(m)
}

var xxx_messageInfo_EditApproval proto.InternalMessageInfo

func (m *EditApproval) GetApprovalId() string {
	if m != nil {
		return m.ApprovalId
	}
	return ""
}

func (m *EditApproval) GetEditableTimes() []*UintRange {
	if m != nil {
		return m.EditableTimes
	}
	return nil
}

func (m *EditApproval) GetEditorListId() string {
	if m != nil {
		return m.EditorListId
	}
	return ""
}

func (m *EditApproval) GetKeyListId() string {
	if m != nil {
		return m.KeyListId
	}
	return ""
}

func (m *EditApproval) GetIsEditable() bool {
	if m != nil {
		return m.IsEditable
	}
	return false
}

func (m *EditApproval) GetFrozenIfSet() bool {
	if m != nil {
		return m.FrozenIfSet
	}
	return false
}

func (m *EditApproval) GetExpectUint() bool {
	if m != nil {
		return m.ExpectUint
	}
	return false
}

func (m *EditApproval) GetExpectBoolean() bool {
	if m != nil {
		return m.ExpectBoolean
	}
	return false
}

func (m *EditApproval) GetExpectAddress() bool {
	if m != nil {
		return m.ExpectAddress
	}
	return false
}

func (m *EditApproval) GetExpectUri() bool {
	if m != nil {
		return m.ExpectUri
	}
	return false
}

func (m *EditApproval) GetKeyMustBeCreator() bool {
	if m != nil {
		return m.KeyMustBeCreator
	}
	return false
}

func (m *EditApproval) GetMustBeLastSetBy() bool {
	if m != nil {
		return m.MustBeLastSetBy
	}
	return false
}

type EditApprovalPermission struct {
	EditableTimes             []*UintRange `protobuf:"bytes,1,rep,name=editableTimes,proto3" json:"editableTimes,omitempty"`
	KeyListId                 string       `protobuf:"bytes,2,opt,name=keyListId,proto3" json:"keyListId,omitempty"`
	EditorListId              string       `protobuf:"bytes,3,opt,name=editorListId,proto3" json:"editorListId,omitempty"`
	ApprovalId                string       `protobuf:"bytes,4,opt,name=approvalId,proto3" json:"approvalId,omitempty"`
	PermanentlyPermittedTimes []*UintRange `protobuf:"bytes,5,rep,name=permanentlyPermittedTimes,proto3" json:"permanentlyPermittedTimes,omitempty"`
	PermanentlyForbiddenTimes []*UintRange `protobuf:"bytes,6,rep,name=permanentlyForbiddenTimes,proto3" json:"permanentlyForbiddenTimes,omitempty"`
}

func (m *EditApprovalPermission) Reset()         { *m = EditApprovalPermission{} }
func (m *EditApprovalPermission) String() string { return proto.CompactTextString(m) }
func (*EditApprovalPermission) ProtoMessage()    {}
func (*EditApprovalPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{3}
}
func (m *EditApprovalPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditApprovalPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditApprovalPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditApprovalPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditApprovalPermission.Merge(m, src)
}
func (m *EditApprovalPermission) XXX_Size() int {
	return m.Size()
}
func (m *EditApprovalPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_EditApprovalPermission.DiscardUnknown(m)
}

var xxx_messageInfo_EditApprovalPermission proto.InternalMessageInfo

func (m *EditApprovalPermission) GetEditableTimes() []*UintRange {
	if m != nil {
		return m.EditableTimes
	}
	return nil
}

func (m *EditApprovalPermission) GetKeyListId() string {
	if m != nil {
		return m.KeyListId
	}
	return ""
}

func (m *EditApprovalPermission) GetEditorListId() string {
	if m != nil {
		return m.EditorListId
	}
	return ""
}

func (m *EditApprovalPermission) GetApprovalId() string {
	if m != nil {
		return m.ApprovalId
	}
	return ""
}

func (m *EditApprovalPermission) GetPermanentlyPermittedTimes() []*UintRange {
	if m != nil {
		return m.PermanentlyPermittedTimes
	}
	return nil
}

func (m *EditApprovalPermission) GetPermanentlyForbiddenTimes() []*UintRange {
	if m != nil {
		return m.PermanentlyForbiddenTimes
	}
	return nil
}

type Map struct {
	Creator                    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId                      string             `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	InheritManagerTimelineFrom Uint               `protobuf:"bytes,3,opt,name=inheritManagerTimelineFrom,proto3,customtype=Uint" json:"inheritManagerTimelineFrom"`
	ManagerTimeline            []*ManagerTimeline `protobuf:"bytes,4,rep,name=managerTimeline,proto3" json:"managerTimeline,omitempty"`
	// config options that will not change at all
	NoDuplicates     bool                   `protobuf:"varint,6,opt,name=noDuplicates,proto3" json:"noDuplicates,omitempty"`
	DefaultValue     string                 `protobuf:"bytes,7,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	EditApprovals    []*EditApproval        `protobuf:"bytes,8,rep,name=editApprovals,proto3" json:"editApprovals,omitempty"`
	MetadataTimeline []*MapMetadataTimeline `protobuf:"bytes,9,rep,name=metadataTimeline,proto3" json:"metadataTimeline,omitempty"`
	Permissions      *MapPermissions        `protobuf:"bytes,10,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *Map) Reset()         { *m = Map{} }
func (m *Map) String() string { return proto.CompactTextString(m) }
func (*Map) ProtoMessage()    {}
func (*Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{4}
}
func (m *Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Map.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Map.Merge(m, src)
}
func (m *Map) XXX_Size() int {
	return m.Size()
}
func (m *Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Map proto.InternalMessageInfo

func (m *Map) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Map) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *Map) GetManagerTimeline() []*ManagerTimeline {
	if m != nil {
		return m.ManagerTimeline
	}
	return nil
}

func (m *Map) GetNoDuplicates() bool {
	if m != nil {
		return m.NoDuplicates
	}
	return false
}

func (m *Map) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *Map) GetEditApprovals() []*EditApproval {
	if m != nil {
		return m.EditApprovals
	}
	return nil
}

func (m *Map) GetMetadataTimeline() []*MapMetadataTimeline {
	if m != nil {
		return m.MetadataTimeline
	}
	return nil
}

func (m *Map) GetPermissions() *MapPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type MsgCreateMap struct {
	Creator                    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId                      string             `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	InheritManagerTimelineFrom Uint               `protobuf:"bytes,3,opt,name=inheritManagerTimelineFrom,proto3,customtype=Uint" json:"inheritManagerTimelineFrom"`
	ManagerTimeline            []*ManagerTimeline `protobuf:"bytes,4,rep,name=managerTimeline,proto3" json:"managerTimeline,omitempty"`
	// config options that will not change at all
	NoDuplicates     bool                   `protobuf:"varint,6,opt,name=noDuplicates,proto3" json:"noDuplicates,omitempty"`
	DefaultValue     string                 `protobuf:"bytes,7,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	EditApprovals    []*EditApproval        `protobuf:"bytes,8,rep,name=editApprovals,proto3" json:"editApprovals,omitempty"`
	MetadataTimeline []*MapMetadataTimeline `protobuf:"bytes,9,rep,name=metadataTimeline,proto3" json:"metadataTimeline,omitempty"`
	Permissions      *MapPermissions        `protobuf:"bytes,10,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *MsgCreateMap) Reset()         { *m = MsgCreateMap{} }
func (m *MsgCreateMap) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMap) ProtoMessage()    {}
func (*MsgCreateMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{5}
}
func (m *MsgCreateMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMap.Merge(m, src)
}
func (m *MsgCreateMap) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMap proto.InternalMessageInfo

func (m *MsgCreateMap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateMap) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *MsgCreateMap) GetManagerTimeline() []*ManagerTimeline {
	if m != nil {
		return m.ManagerTimeline
	}
	return nil
}

func (m *MsgCreateMap) GetNoDuplicates() bool {
	if m != nil {
		return m.NoDuplicates
	}
	return false
}

func (m *MsgCreateMap) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *MsgCreateMap) GetEditApprovals() []*EditApproval {
	if m != nil {
		return m.EditApprovals
	}
	return nil
}

func (m *MsgCreateMap) GetMetadataTimeline() []*MapMetadataTimeline {
	if m != nil {
		return m.MetadataTimeline
	}
	return nil
}

func (m *MsgCreateMap) GetPermissions() *MapPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type MsgCreateMapResponse struct {
}

func (m *MsgCreateMapResponse) Reset()         { *m = MsgCreateMapResponse{} }
func (m *MsgCreateMapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMapResponse) ProtoMessage()    {}
func (*MsgCreateMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{6}
}
func (m *MsgCreateMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMapResponse.Merge(m, src)
}
func (m *MsgCreateMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMapResponse proto.InternalMessageInfo

type MsgUpdateMap struct {
	Creator                string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId                  string                 `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	UpdateManagerTimeline  bool                   `protobuf:"varint,3,opt,name=updateManagerTimeline,proto3" json:"updateManagerTimeline,omitempty"`
	ManagerTimeline        []*ManagerTimeline     `protobuf:"bytes,4,rep,name=managerTimeline,proto3" json:"managerTimeline,omitempty"`
	UpdateeditApprovals    bool                   `protobuf:"varint,5,opt,name=updateeditApprovals,proto3" json:"updateeditApprovals,omitempty"`
	EditApprovals          []*EditApproval        `protobuf:"bytes,6,rep,name=editApprovals,proto3" json:"editApprovals,omitempty"`
	UpdateMetadataTimeline bool                   `protobuf:"varint,7,opt,name=updateMetadataTimeline,proto3" json:"updateMetadataTimeline,omitempty"`
	MetadataTimeline       []*MapMetadataTimeline `protobuf:"bytes,8,rep,name=metadataTimeline,proto3" json:"metadataTimeline,omitempty"`
	UpdatePermissions      bool                   `protobuf:"varint,9,opt,name=updatePermissions,proto3" json:"updatePermissions,omitempty"`
	Permissions            *MapPermissions        `protobuf:"bytes,10,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *MsgUpdateMap) Reset()         { *m = MsgUpdateMap{} }
func (m *MsgUpdateMap) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMap) ProtoMessage()    {}
func (*MsgUpdateMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{7}
}
func (m *MsgUpdateMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMap.Merge(m, src)
}
func (m *MsgUpdateMap) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMap proto.InternalMessageInfo

func (m *MsgUpdateMap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateMap) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *MsgUpdateMap) GetUpdateManagerTimeline() bool {
	if m != nil {
		return m.UpdateManagerTimeline
	}
	return false
}

func (m *MsgUpdateMap) GetManagerTimeline() []*ManagerTimeline {
	if m != nil {
		return m.ManagerTimeline
	}
	return nil
}

func (m *MsgUpdateMap) GetUpdateeditApprovals() bool {
	if m != nil {
		return m.UpdateeditApprovals
	}
	return false
}

func (m *MsgUpdateMap) GetEditApprovals() []*EditApproval {
	if m != nil {
		return m.EditApprovals
	}
	return nil
}

func (m *MsgUpdateMap) GetUpdateMetadataTimeline() bool {
	if m != nil {
		return m.UpdateMetadataTimeline
	}
	return false
}

func (m *MsgUpdateMap) GetMetadataTimeline() []*MapMetadataTimeline {
	if m != nil {
		return m.MetadataTimeline
	}
	return nil
}

func (m *MsgUpdateMap) GetUpdatePermissions() bool {
	if m != nil {
		return m.UpdatePermissions
	}
	return false
}

func (m *MsgUpdateMap) GetPermissions() *MapPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type MsgUpdateMapResponse struct {
}

func (m *MsgUpdateMapResponse) Reset()         { *m = MsgUpdateMapResponse{} }
func (m *MsgUpdateMapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMapResponse) ProtoMessage()    {}
func (*MsgUpdateMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{8}
}
func (m *MsgUpdateMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMapResponse.Merge(m, src)
}
func (m *MsgUpdateMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMapResponse proto.InternalMessageInfo

type MsgDeleteMap struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId   string `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
}

func (m *MsgDeleteMap) Reset()         { *m = MsgDeleteMap{} }
func (m *MsgDeleteMap) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMap) ProtoMessage()    {}
func (*MsgDeleteMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{9}
}
func (m *MsgDeleteMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMap.Merge(m, src)
}
func (m *MsgDeleteMap) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMap proto.InternalMessageInfo

func (m *MsgDeleteMap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteMap) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

type MsgDeleteMapResponse struct {
}

func (m *MsgDeleteMapResponse) Reset()         { *m = MsgDeleteMapResponse{} }
func (m *MsgDeleteMapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMapResponse) ProtoMessage()    {}
func (*MsgDeleteMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{10}
}
func (m *MsgDeleteMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMapResponse.Merge(m, src)
}
func (m *MsgDeleteMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMapResponse proto.InternalMessageInfo

type SetOptions struct {
	UseMostRecentCollectionId bool `protobuf:"varint,1,opt,name=useMostRecentCollectionId,proto3" json:"useMostRecentCollectionId,omitempty"`
}

func (m *SetOptions) Reset()         { *m = SetOptions{} }
func (m *SetOptions) String() string { return proto.CompactTextString(m) }
func (*SetOptions) ProtoMessage()    {}
func (*SetOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{11}
}
func (m *SetOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOptions.Merge(m, src)
}
func (m *SetOptions) XXX_Size() int {
	return m.Size()
}
func (m *SetOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SetOptions proto.InternalMessageInfo

func (m *SetOptions) GetUseMostRecentCollectionId() bool {
	if m != nil {
		return m.UseMostRecentCollectionId
	}
	return false
}

type ValueToSet struct {
	Key     string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   string      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Options *SetOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *ValueToSet) Reset()         { *m = ValueToSet{} }
func (m *ValueToSet) String() string { return proto.CompactTextString(m) }
func (*ValueToSet) ProtoMessage()    {}
func (*ValueToSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{12}
}
func (m *ValueToSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueToSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueToSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueToSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueToSet.Merge(m, src)
}
func (m *ValueToSet) XXX_Size() int {
	return m.Size()
}
func (m *ValueToSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueToSet.DiscardUnknown(m)
}

var xxx_messageInfo_ValueToSet proto.InternalMessageInfo

func (m *ValueToSet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ValueToSet) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ValueToSet) GetOptions() *SetOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type MsgSetValues struct {
	Creator     string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId       string        `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	ValuesToSet []*ValueToSet `protobuf:"bytes,3,rep,name=valuesToSet,proto3" json:"valuesToSet,omitempty"`
}

func (m *MsgSetValues) Reset()         { *m = MsgSetValues{} }
func (m *MsgSetValues) String() string { return proto.CompactTextString(m) }
func (*MsgSetValues) ProtoMessage()    {}
func (*MsgSetValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{13}
}
func (m *MsgSetValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetValues.Merge(m, src)
}
func (m *MsgSetValues) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetValues) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetValues.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetValues proto.InternalMessageInfo

func (m *MsgSetValues) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetValues) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *MsgSetValues) GetValuesToSet() []*ValueToSet {
	if m != nil {
		return m.ValuesToSet
	}
	return nil
}

type MsgSetValuesResponse struct {
}

func (m *MsgSetValuesResponse) Reset()         { *m = MsgSetValuesResponse{} }
func (m *MsgSetValuesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetValuesResponse) ProtoMessage()    {}
func (*MsgSetValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{14}
}
func (m *MsgSetValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetValuesResponse.Merge(m, src)
}
func (m *MsgSetValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetValuesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ValueStore)(nil), "maps.ValueStore")
	proto.RegisterType((*MapPermissions)(nil), "maps.MapPermissions")
	proto.RegisterType((*EditApproval)(nil), "maps.EditApproval")
	proto.RegisterType((*EditApprovalPermission)(nil), "maps.EditApprovalPermission")
	proto.RegisterType((*Map)(nil), "maps.Map")
	proto.RegisterType((*MsgCreateMap)(nil), "maps.MsgCreateMap")
	proto.RegisterType((*MsgCreateMapResponse)(nil), "maps.MsgCreateMapResponse")
	proto.RegisterType((*MsgUpdateMap)(nil), "maps.MsgUpdateMap")
	proto.RegisterType((*MsgUpdateMapResponse)(nil), "maps.MsgUpdateMapResponse")
	proto.RegisterType((*MsgDeleteMap)(nil), "maps.MsgDeleteMap")
	proto.RegisterType((*MsgDeleteMapResponse)(nil), "maps.MsgDeleteMapResponse")
	proto.RegisterType((*SetOptions)(nil), "maps.SetOptions")
	proto.RegisterType((*ValueToSet)(nil), "maps.ValueToSet")
	proto.RegisterType((*MsgSetValues)(nil), "maps.MsgSetValues")
	proto.RegisterType((*MsgSetValuesResponse)(nil), "maps.MsgSetValuesResponse")
}

func init() { proto.RegisterFile("maps/tx.proto", fileDescriptor_d4bd760995a662e3) }

var fileDescriptor_d4bd760995a662e3 = []byte{
	// 1089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x8f, 0x63, 0x37, 0x89, 0x9f, 0x1d, 0x92, 0x4e, 0x53, 0x6b, 0x13, 0x2a, 0x37, 0xb2, 0x38,
	0x44, 0x15, 0x4a, 0xaa, 0x00, 0x15, 0x02, 0x04, 0x8a, 0xdb, 0x14, 0xa5, 0x8a, 0x55, 0xb4, 0x49,
	0x39, 0x70, 0x62, 0xbc, 0xfb, 0xe2, 0xac, 0xb2, 0x3b, 0xb3, 0xda, 0x99, 0x2d, 0x31, 0x1f, 0x80,
	0x33, 0x37, 0xbe, 0x09, 0xdf, 0x00, 0xa9, 0x27, 0xe8, 0x11, 0x71, 0xa8, 0x50, 0xf2, 0x29, 0xb8,
	0xa1, 0xf9, 0xe3, 0xfd, 0xe3, 0x75, 0x68, 0x43, 0x4f, 0x48, 0xdc, 0x76, 0x7e, 0xf3, 0xde, 0x6f,
	0xde, 0xbc, 0xdf, 0x9b, 0x37, 0xb3, 0xb0, 0x1c, 0xd1, 0x58, 0xec, 0xc8, 0xf3, 0xed, 0x38, 0xe1,
	0x92, 0x93, 0x86, 0x1a, 0x6e, 0xac, 0x8d, 0xf8, 0x88, 0x6b, 0x60, 0x47, 0x7d, 0x99, 0xb9, 0x8d,
	0x8e, 0x36, 0x8d, 0x31, 0x89, 0x02, 0x21, 0x02, 0xce, 0x84, 0xc5, 0xd7, 0x0c, 0x45, 0x10, 0x61,
	0x18, 0x30, 0x9c, 0xa0, 0xb7, 0x34, 0x3a, 0xa4, 0x21, 0x65, 0xde, 0x04, 0xec, 0xb9, 0x00, 0x5f,
	0xd3, 0x30, 0xc5, 0x23, 0xc9, 0x13, 0x24, 0xab, 0x50, 0x3f, 0xc3, 0xb1, 0x53, 0xdb, 0xac, 0x6d,
	0x35, 0x5d, 0xf5, 0x49, 0xd6, 0xe0, 0xc6, 0x73, 0x35, 0xef, 0xcc, 0x6b, 0xcc, 0x0c, 0xc8, 0x1d,
	0x68, 0x86, 0x54, 0xc8, 0x23, 0x94, 0xfd, 0xb1, 0x53, 0xd7, 0x33, 0x39, 0xd0, 0xfb, 0x79, 0x1e,
	0xde, 0x19, 0xd0, 0xf8, 0xab, 0x3c, 0x2e, 0x72, 0x00, 0x37, 0x3d, 0xca, 0x9e, 0xc5, 0x3e, 0x95,
	0x38, 0x40, 0x49, 0x7d, 0x2a, 0xa9, 0x53, 0xdb, 0xac, 0x6f, 0xb5, 0x76, 0xdf, 0xdd, 0x56, 0x71,
	0x6d, 0x1f, 0x07, 0x11, 0xfa, 0xc6, 0x20, 0x77, 0x74, 0xab, 0x5e, 0xe4, 0x4b, 0x58, 0xcd, 0x41,
	0xca, 0xe8, 0x08, 0x13, 0x67, 0xfe, 0xf5, 0x4c, 0x15, 0x27, 0x72, 0x0c, 0x9d, 0x0c, 0xdb, 0xf7,
	0x03, 0xb9, 0x17, 0xc7, 0x09, 0x7f, 0x4e, 0x43, 0xe1, 0xd4, 0x35, 0xdd, 0x1d, 0x43, 0x57, 0x9c,
	0x2a, 0xf0, 0x5d, 0xe1, 0x4b, 0x3e, 0x81, 0xb6, 0x47, 0xd9, 0x23, 0x0c, 0x51, 0xad, 0x14, 0x3b,
	0x0d, 0xcd, 0xd5, 0x31, 0x5c, 0x7b, 0x9e, 0x0c, 0x38, 0x2b, 0xb0, 0x94, 0x6c, 0x7b, 0x3f, 0x35,
	0xa0, 0x5d, 0x64, 0x23, 0x5d, 0x00, 0x6a, 0xbf, 0x0f, 0x7c, 0x67, 0x59, 0x27, 0xba, 0x80, 0x90,
	0x8f, 0x60, 0x19, 0xfd, 0x40, 0xd2, 0x61, 0x88, 0x6a, 0xd7, 0xc2, 0xa6, 0x74, 0xc5, 0xac, 0xf6,
	0x2c, 0x60, 0xd2, 0xa5, 0x6c, 0x84, 0x6e, 0xd9, 0x8a, 0xf4, 0xa0, 0xad, 0x00, 0x9e, 0x1c, 0x06,
	0x42, 0x1e, 0xf8, 0x56, 0xdb, 0x12, 0xa6, 0x24, 0x3e, 0xc3, 0xb1, 0x35, 0xb0, 0x12, 0x67, 0x80,
	0x0a, 0x2c, 0x10, 0xfb, 0x96, 0xd4, 0x69, 0x6c, 0xd6, 0xb6, 0x96, 0xdc, 0x02, 0x42, 0x36, 0xa1,
	0x75, 0x92, 0xf0, 0xef, 0x91, 0x1d, 0x9c, 0x1c, 0xa1, 0x74, 0x6e, 0x68, 0x83, 0x22, 0xa4, 0x18,
	0xf0, 0x3c, 0x46, 0x4f, 0xaa, 0x28, 0x9d, 0x05, 0xc3, 0x90, 0x23, 0xe4, 0x3d, 0x58, 0x36, 0xa3,
	0x3e, 0xe7, 0x21, 0x52, 0xe6, 0x2c, 0x6a, 0x93, 0x32, 0x98, 0x5b, 0xed, 0xf9, 0x7e, 0x82, 0x42,
	0x38, 0x4b, 0x45, 0x2b, 0x0b, 0xaa, 0xbd, 0x58, 0xe6, 0x24, 0x70, 0x9a, 0xda, 0x22, 0x07, 0xc8,
	0x3d, 0x58, 0x3d, 0xc3, 0xf1, 0x20, 0x15, 0xb2, 0x8f, 0x0f, 0x13, 0xa4, 0x92, 0x27, 0x0e, 0x68,
	0xa3, 0x0a, 0x4e, 0x0e, 0x61, 0x23, 0x4a, 0x85, 0x7c, 0xfa, 0x1d, 0xeb, 0x53, 0x7f, 0x84, 0x8f,
	0x13, 0x1e, 0x3d, 0xe4, 0x61, 0x88, 0x5a, 0x57, 0xa7, 0xa5, 0xd2, 0xd4, 0x6f, 0xbf, 0x78, 0x75,
	0x77, 0xee, 0x8f, 0x57, 0x77, 0x1b, 0x3a, 0xff, 0xff, 0x60, 0x4f, 0xb6, 0x60, 0x25, 0xd2, 0xf4,
	0x87, 0xd9, 0x61, 0x6a, 0xeb, 0x85, 0xa7, 0xe1, 0xde, 0x6f, 0xf3, 0xd0, 0x99, 0x5d, 0x88, 0xff,
	0xb6, 0x06, 0x4a, 0xfa, 0xce, 0x4f, 0xeb, 0x3b, 0x5d, 0x21, 0xf5, 0x19, 0x15, 0x52, 0x2e, 0xce,
	0x46, 0xa5, 0x38, 0x07, 0xb0, 0xae, 0x5a, 0x13, 0x65, 0xc8, 0x64, 0x38, 0xd6, 0x11, 0x4b, 0x89,
	0xbe, 0x09, 0xf2, 0xc6, 0xec, 0x20, 0xaf, 0xf6, 0x98, 0xa2, 0x7b, 0xcc, 0x93, 0x61, 0xe0, 0xfb,
	0xc8, 0x0c, 0xdd, 0xc2, 0xeb, 0xe9, 0xca, 0x1e, 0xbd, 0x5f, 0xea, 0x50, 0x1f, 0xd0, 0x98, 0x38,
	0xb0, 0xe8, 0x59, 0xd1, 0x4d, 0xdb, 0x9b, 0x0c, 0x55, 0xeb, 0x8b, 0x68, 0x9c, 0x65, 0xc7, 0x0c,
	0x54, 0x05, 0x04, 0xec, 0x14, 0x93, 0x40, 0xda, 0x3e, 0x72, 0x6c, 0xdb, 0xac, 0xd2, 0xd6, 0xe4,
	0x69, 0xba, 0x02, 0xae, 0xb6, 0x27, 0x5f, 0xc0, 0x4a, 0x54, 0x86, 0x6d, 0xc3, 0xb8, 0x6d, 0xb6,
	0x32, 0xe5, 0xe3, 0x4e, 0x5b, 0x2b, 0xa1, 0x18, 0x7f, 0x94, 0xc6, 0x61, 0xe0, 0x51, 0xa9, 0x13,
	0xa1, 0xea, 0xa7, 0x84, 0x29, 0x1b, 0x1f, 0x4f, 0x68, 0x1a, 0x4a, 0xdd, 0xea, 0xf5, 0x49, 0x6a,
	0xba, 0x25, 0x8c, 0x7c, 0x6c, 0xaa, 0x28, 0xef, 0x81, 0x4b, 0x3a, 0x0c, 0x52, 0xed, 0x81, 0x6e,
	0xd9, 0x90, 0xec, 0xc3, 0x6a, 0x64, 0x7b, 0x73, 0xb6, 0x87, 0xa6, 0x76, 0x5e, 0x9f, 0xec, 0x21,
	0x1e, 0x4c, 0x19, 0xb8, 0x15, 0x17, 0xf2, 0x00, 0x5a, 0x85, 0x8b, 0x4c, 0x1f, 0xc0, 0xd6, 0xee,
	0x5a, 0xc6, 0x50, 0xb8, 0x4c, 0xdc, 0xa2, 0x61, 0xef, 0xd7, 0x3a, 0xb4, 0x07, 0x62, 0xa4, 0x0f,
	0x28, 0xfe, 0x2f, 0xe8, 0x7f, 0x5f, 0xd0, 0x0e, 0xac, 0x15, 0xf5, 0x74, 0x51, 0xc4, 0x9c, 0x09,
	0xec, 0xfd, 0xd0, 0xd0, 0x42, 0x4f, 0xee, 0xf0, 0xeb, 0x0b, 0xfd, 0x21, 0xdc, 0x4e, 0x8b, 0x0f,
	0x80, 0x6c, 0x73, 0x75, 0x9d, 0xe2, 0xd9, 0x93, 0x6f, 0x2f, 0xe8, 0x7d, 0xb8, 0x65, 0x98, 0xcb,
	0x72, 0x98, 0x2b, 0x71, 0xd6, 0x54, 0x55, 0xba, 0x85, 0x37, 0x95, 0xee, 0x01, 0x74, 0xd2, 0xd2,
	0x6b, 0x29, 0x8b, 0xd9, 0xdc, 0x9e, 0x57, 0xcc, 0xce, 0x94, 0x7c, 0xe9, 0xfa, 0x92, 0xbf, 0x0f,
	0x37, 0xd3, 0xa9, 0x77, 0x97, 0xb0, 0xf7, 0x6d, 0x75, 0xe2, 0x2d, 0x0b, 0x24, 0xab, 0x83, 0xac,
	0x40, 0x3e, 0xd7, 0xf5, 0x91, 0xbd, 0xa6, 0xae, 0x5b, 0x1f, 0x96, 0x37, 0xf3, 0xcf, 0x78, 0x9f,
	0x00, 0x1c, 0xa1, 0x7c, 0x1a, 0x4b, 0x1d, 0xf5, 0x67, 0xb0, 0x9e, 0x0a, 0x1c, 0x70, 0x21, 0x5d,
	0xf4, 0x90, 0xc9, 0xfc, 0x3a, 0x3f, 0xf0, 0xf5, 0x3a, 0x4b, 0xee, 0xd5, 0x06, 0xbd, 0x6f, 0xed,
	0x73, 0xfb, 0x98, 0xab, 0x37, 0xd0, 0x9b, 0x3e, 0xb7, 0xef, 0xc1, 0x22, 0x37, 0xcb, 0xeb, 0x5a,
	0x6d, 0xed, 0xae, 0x9a, 0x2c, 0xe5, 0x61, 0xb9, 0x13, 0x83, 0x5e, 0xa2, 0xb3, 0x70, 0x84, 0xa6,
	0x0d, 0x88, 0x6b, 0x9f, 0x92, 0x5d, 0x68, 0xe9, 0x45, 0x85, 0x0e, 0xd1, 0x3e, 0x85, 0xed, 0x7a,
	0x79, 0xe8, 0x6e, 0xd1, 0xc8, 0x66, 0x2e, 0x5b, 0x73, 0x92, 0xb9, 0xdd, 0xbf, 0x6a, 0x50, 0x1f,
	0x88, 0x11, 0xf9, 0x14, 0x9a, 0x79, 0x7f, 0xb6, 0x65, 0x5c, 0x3c, 0xe3, 0x1b, 0x1b, 0x55, 0x6c,
	0x42, 0xa2, 0x9c, 0xf3, 0x33, 0x9f, 0x3b, 0x67, 0x58, 0xc1, 0xb9, 0x52, 0x13, 0xca, 0x39, 0x2f,
	0x88, 0xdc, 0x39, 0xc3, 0x0a, 0xce, 0x15, 0xe1, 0x95, 0x73, 0x9e, 0xc7, 0xdc, 0x39, 0xc3, 0x0a,
	0xce, 0x95, 0xbd, 0xf7, 0x9f, 0xbc, 0xb8, 0xe8, 0xd6, 0x5e, 0x5e, 0x74, 0x6b, 0x7f, 0x5e, 0x74,
	0x6b, 0x3f, 0x5e, 0x76, 0xe7, 0x5e, 0x5e, 0x76, 0xe7, 0x7e, 0xbf, 0xec, 0xce, 0x7d, 0x73, 0x7f,
	0x14, 0xc8, 0xd3, 0x74, 0xb8, 0xed, 0xf1, 0x68, 0x67, 0x18, 0xc8, 0xa1, 0x7a, 0x18, 0x8a, 0xfc,
	0xcb, 0x3b, 0xa5, 0x01, 0xdb, 0x39, 0xdf, 0x31, 0xff, 0x70, 0xe3, 0x18, 0xc5, 0x70, 0x41, 0xff,
	0xab, 0x7d, 0xf0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0xf6, 0x78, 0x59, 0x1b, 0x0e, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateMap(ctx context.Context, in *MsgCreateMap, opts ...grpc.CallOption) (*MsgCreateMapResponse, error)
	UpdateMap(ctx context.Context, in *MsgUpdateMap, opts ...grpc.CallOption) (*MsgUpdateMapResponse, error)
	DeleteMap(ctx context.Context, in *MsgDeleteMap, opts ...grpc.CallOption) (*MsgDeleteMapResponse, error)
	SetValues(ctx context.Context, in *MsgSetValues, opts ...grpc.CallOption) (*MsgSetValuesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateMap(ctx context.Context, in *MsgCreateMap, opts ...grpc.CallOption) (*MsgCreateMapResponse, error) {
	out := new(MsgCreateMapResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/CreateMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMap(ctx context.Context, in *MsgUpdateMap, opts ...grpc.CallOption) (*MsgUpdateMapResponse, error) {
	out := new(MsgUpdateMapResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/UpdateMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMap(ctx context.Context, in *MsgDeleteMap, opts ...grpc.CallOption) (*MsgDeleteMapResponse, error) {
	out := new(MsgDeleteMapResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/DeleteMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetValues(ctx context.Context, in *MsgSetValues, opts ...grpc.CallOption) (*MsgSetValuesResponse, error) {
	out := new(MsgSetValuesResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/SetValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateMap(context.Context, *MsgCreateMap) (*MsgCreateMapResponse, error)
	UpdateMap(context.Context, *MsgUpdateMap) (*MsgUpdateMapResponse, error)
	DeleteMap(context.Context, *MsgDeleteMap) (*MsgDeleteMapResponse, error)
	SetValues(context.Context, *MsgSetValues) (*MsgSetValuesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateMap(ctx context.Context, req *MsgCreateMap) (*MsgCreateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMap not implemented")
}
func (*UnimplementedMsgServer) UpdateMap(ctx context.Context, req *MsgUpdateMap) (*MsgUpdateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMap not implemented")
}
func (*UnimplementedMsgServer) DeleteMap(ctx context.Context, req *MsgDeleteMap) (*MsgDeleteMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMap not implemented")
}
func (*UnimplementedMsgServer) SetValues(ctx context.Context, req *MsgSetValues) (*MsgSetValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValues not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/CreateMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMap(ctx, req.(*MsgCreateMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/UpdateMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMap(ctx, req.(*MsgUpdateMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/DeleteMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMap(ctx, req.(*MsgDeleteMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/SetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetValues(ctx, req.(*MsgSetValues))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maps.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMap",
			Handler:    _Msg_CreateMap_Handler,
		},
		{
			MethodName: "UpdateMap",
			Handler:    _Msg_UpdateMap_Handler,
		},
		{
			MethodName: "DeleteMap",
			Handler:    _Msg_DeleteMap_Handler,
		},
		{
			MethodName: "SetValues",
			Handler:    _Msg_SetValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maps/tx.proto",
}

func (m *ValueStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastSetBy) > 0 {
		i -= len(m.LastSetBy)
		copy(dAtA[i:], m.LastSetBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastSetBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CanDeleteMap) > 0 {
		for iNdEx := len(m.CanDeleteMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CanDeleteMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CanUpdateEditApprovals) > 0 {
		for iNdEx := len(m.CanUpdateEditApprovals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CanUpdateEditApprovals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CanUpdateManager) > 0 {
		for iNdEx := len(m.CanUpdateManager) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CanUpdateManager[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CanUpdateMetadata) > 0 {
		for iNdEx := len(m.CanUpdateMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CanUpdateMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EditApproval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditApproval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditApproval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApprovalId) > 0 {
		i -= len(m.ApprovalId)
		copy(dAtA[i:], m.ApprovalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApprovalId)))
		i--
		dAtA[i] = 0x6a
	}
	if m.MustBeLastSetBy {
		i--
		if m.MustBeLastSetBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.MustOwnBadgeFromCollection.Size()
		i -= size
		if _, err := m.MustOwnBadgeFromCollection.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.KeyMustBeCreator {
		i--
		if m.KeyMustBeCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ExpectUri {
		i--
		if m.ExpectUri {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.ExpectAddress {
		i--
		if m.ExpectAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ExpectBoolean {
		i--
		if m.ExpectBoolean {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ExpectUint {
		i--
		if m.ExpectUint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.FrozenIfSet {
		i--
		if m.FrozenIfSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsEditable {
		i--
		if m.IsEditable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.KeyListId) > 0 {
		i -= len(m.KeyListId)
		copy(dAtA[i:], m.KeyListId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyListId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EditorListId) > 0 {
		i -= len(m.EditorListId)
		copy(dAtA[i:], m.EditorListId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EditorListId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EditableTimes) > 0 {
		for iNdEx := len(m.EditableTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EditableTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EditApprovalPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditApprovalPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditApprovalPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PermanentlyForbiddenTimes) > 0 {
		for iNdEx := len(m.PermanentlyForbiddenTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PermanentlyForbiddenTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PermanentlyPermittedTimes) > 0 {
		for iNdEx := len(m.PermanentlyPermittedTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PermanentlyPermittedTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ApprovalId) > 0 {
		i -= len(m.ApprovalId)
		copy(dAtA[i:], m.ApprovalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApprovalId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EditorListId) > 0 {
		i -= len(m.EditorListId)
		copy(dAtA[i:], m.EditorListId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EditorListId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyListId) > 0 {
		i -= len(m.KeyListId)
		copy(dAtA[i:], m.KeyListId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyListId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EditableTimes) > 0 {
		for iNdEx := len(m.EditableTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EditableTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.MetadataTimeline) > 0 {
		for iNdEx := len(m.MetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.EditApprovals) > 0 {
		for iNdEx := len(m.EditApprovals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EditApprovals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NoDuplicates {
		i--
		if m.NoDuplicates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ManagerTimeline) > 0 {
		for iNdEx := len(m.ManagerTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.InheritManagerTimelineFrom.Size()
		i -= size
		if _, err := m.InheritManagerTimelineFrom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.MetadataTimeline) > 0 {
		for iNdEx := len(m.MetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.EditApprovals) > 0 {
		for iNdEx := len(m.EditApprovals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EditApprovals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NoDuplicates {
		i--
		if m.NoDuplicates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ManagerTimeline) > 0 {
		for iNdEx := len(m.ManagerTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.InheritManagerTimelineFrom.Size()
		i -= size
		if _, err := m.InheritManagerTimelineFrom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.UpdatePermissions {
		i--
		if m.UpdatePermissions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.MetadataTimeline) > 0 {
		for iNdEx := len(m.MetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.UpdateMetadataTimeline {
		i--
		if m.UpdateMetadataTimeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.EditApprovals) > 0 {
		for iNdEx := len(m.EditApprovals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EditApprovals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.UpdateeditApprovals {
		i--
		if m.UpdateeditApprovals {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ManagerTimeline) > 0 {
		for iNdEx := len(m.ManagerTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UpdateManagerTimeline {
		i--
		if m.UpdateManagerTimeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseMostRecentCollectionId {
		i--
		if m.UseMostRecentCollectionId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValueToSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueToSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueToSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValuesToSet) > 0 {
		for iNdEx := len(m.ValuesToSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValuesToSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValueStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastSetBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MapPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CanUpdateMetadata) > 0 {
		for _, e := range m.CanUpdateMetadata {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CanUpdateManager) > 0 {
		for _, e := range m.CanUpdateManager {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CanUpdateEditApprovals) > 0 {
		for _, e := range m.CanUpdateEditApprovals {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CanDeleteMap) > 0 {
		for _, e := range m.CanDeleteMap {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *EditApproval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EditableTimes) > 0 {
		for _, e := range m.EditableTimes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.EditorListId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KeyListId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsEditable {
		n += 2
	}
	if m.FrozenIfSet {
		n += 2
	}
	if m.ExpectUint {
		n += 2
	}
	if m.ExpectBoolean {
		n += 2
	}
	if m.ExpectAddress {
		n += 2
	}
	if m.ExpectUri {
		n += 2
	}
	if m.KeyMustBeCreator {
		n += 2
	}
	l = m.MustOwnBadgeFromCollection.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.MustBeLastSetBy {
		n += 2
	}
	l = len(m.ApprovalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *EditApprovalPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EditableTimes) > 0 {
		for _, e := range m.EditableTimes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.KeyListId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EditorListId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ApprovalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PermanentlyPermittedTimes) > 0 {
		for _, e := range m.PermanentlyPermittedTimes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.PermanentlyForbiddenTimes) > 0 {
		for _, e := range m.PermanentlyForbiddenTimes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InheritManagerTimelineFrom.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.ManagerTimeline) > 0 {
		for _, e := range m.ManagerTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.NoDuplicates {
		n += 2
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.EditApprovals) > 0 {
		for _, e := range m.EditApprovals {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.MetadataTimeline) > 0 {
		for _, e := range m.MetadataTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InheritManagerTimelineFrom.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.ManagerTimeline) > 0 {
		for _, e := range m.ManagerTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.NoDuplicates {
		n += 2
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.EditApprovals) > 0 {
		for _, e := range m.EditApprovals {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.MetadataTimeline) > 0 {
		for _, e := range m.MetadataTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UpdateManagerTimeline {
		n += 2
	}
	if len(m.ManagerTimeline) > 0 {
		for _, e := range m.ManagerTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpdateeditApprovals {
		n += 2
	}
	if len(m.EditApprovals) > 0 {
		for _, e := range m.EditApprovals {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpdateMetadataTimeline {
		n += 2
	}
	if len(m.MetadataTimeline) > 0 {
		for _, e := range m.MetadataTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpdatePermissions {
		n += 2
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseMostRecentCollectionId {
		n += 2
	}
	return n
}

func (m *ValueToSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ValuesToSet) > 0 {
		for _, e := range m.ValuesToSet {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValueStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSetBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSetBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanUpdateMetadata = append(m.CanUpdateMetadata, &TimedUpdatePermission{})
			if err := m.CanUpdateMetadata[len(m.CanUpdateMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanUpdateManager = append(m.CanUpdateManager, &TimedUpdatePermission{})
			if err := m.CanUpdateManager[len(m.CanUpdateManager)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateEditApprovals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanUpdateEditApprovals = append(m.CanUpdateEditApprovals, &EditApprovalPermission{})
			if err := m.CanUpdateEditApprovals[len(m.CanUpdateEditApprovals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanDeleteMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanDeleteMap = append(m.CanDeleteMap, &ActionPermission{})
			if err := m.CanDeleteMap[len(m.CanDeleteMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditApproval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditApproval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditApproval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditableTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditableTimes = append(m.EditableTimes, &UintRange{})
			if err := m.EditableTimes[len(m.EditableTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditorListId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditorListId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyListId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyListId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEditable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEditable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenIfSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrozenIfSet = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectUint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectUint = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectBoolean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectBoolean = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectAddress = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectUri", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectUri = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyMustBeCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyMustBeCreator = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustOwnBadgeFromCollection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MustOwnBadgeFromCollection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustBeLastSetBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MustBeLastSetBy = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditApprovalPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditApprovalPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditApprovalPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditableTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditableTimes = append(m.EditableTimes, &UintRange{})
			if err := m.EditableTimes[len(m.EditableTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyListId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyListId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditorListId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditorListId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermanentlyPermittedTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermanentlyPermittedTimes = append(m.PermanentlyPermittedTimes, &UintRange{})
			if err := m.PermanentlyPermittedTimes[len(m.PermanentlyPermittedTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermanentlyForbiddenTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermanentlyForbiddenTimes = append(m.PermanentlyForbiddenTimes, &UintRange{})
			if err := m.PermanentlyForbiddenTimes[len(m.PermanentlyForbiddenTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritManagerTimelineFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InheritManagerTimelineFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerTimeline = append(m.ManagerTimeline, &ManagerTimeline{})
			if err := m.ManagerTimeline[len(m.ManagerTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDuplicates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoDuplicates = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditApprovals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditApprovals = append(m.EditApprovals, &EditApproval{})
			if err := m.EditApprovals[len(m.EditApprovals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataTimeline = append(m.MetadataTimeline, &MapMetadataTimeline{})
			if err := m.MetadataTimeline[len(m.MetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &MapPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritManagerTimelineFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InheritManagerTimelineFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerTimeline = append(m.ManagerTimeline, &ManagerTimeline{})
			if err := m.ManagerTimeline[len(m.ManagerTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDuplicates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoDuplicates = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditApprovals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditApprovals = append(m.EditApprovals, &EditApproval{})
			if err := m.EditApprovals[len(m.EditApprovals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataTimeline = append(m.MetadataTimeline, &MapMetadataTimeline{})
			if err := m.MetadataTimeline[len(m.MetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &MapPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateManagerTimeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateManagerTimeline = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerTimeline = append(m.ManagerTimeline, &ManagerTimeline{})
			if err := m.ManagerTimeline[len(m.ManagerTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateeditApprovals", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateeditApprovals = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditApprovals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditApprovals = append(m.EditApprovals, &EditApproval{})
			if err := m.EditApprovals[len(m.EditApprovals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMetadataTimeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateMetadataTimeline = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataTimeline = append(m.MetadataTimeline, &MapMetadataTimeline{})
			if err := m.MetadataTimeline[len(m.MetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePermissions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatePermissions = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &MapPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMostRecentCollectionId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMostRecentCollectionId = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueToSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueToSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueToSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &SetOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesToSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuesToSet = append(m.ValuesToSet, &ValueToSet{})
			if err := m.ValuesToSet[len(m.ValuesToSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: maps/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// Used for WASM bindings and JSON parsing
type MapCustomMsgType struct {
	SetValueMsg  *MsgSetValue  `protobuf:"bytes,1,opt,name=setValueMsg,proto3" json:"setValueMsg,omitempty"`
	CreateMapMsg *MsgCreateMap `protobuf:"bytes,2,opt,name=createMapMsg,proto3" json:"createMapMsg,omitempty"`
	UpdateMapMsg *MsgUpdateMap `protobuf:"bytes,3,opt,name=updateMapMsg,proto3" json:"updateMapMsg,omitempty"`
	DeleteMapMsg *MsgDeleteMap `protobuf:"bytes,4,opt,name=deleteMapMsg,proto3" json:"deleteMapMsg,omitempty"`
}

func (m *MapCustomMsgType) Reset()         { *m = MapCustomMsgType{} }
func (m *MapCustomMsgType) String() string { return proto.CompactTextString(m) }
func (*MapCustomMsgType) ProtoMessage()    {}
func (*MapCustomMsgType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{2}
}
func (m *MapCustomMsgType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapCustomMsgType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapCustomMsgType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapCustomMsgType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapCustomMsgType.Merge(m, src)
}
func (m *MapCustomMsgType) XXX_Size() int {
	return m.Size()
}
func (m *MapCustomMsgType) XXX_DiscardUnknown() {
	xxx_messageInfo_MapCustomMsgType.DiscardUnknown(m)
}

var xxx_messageInfo_MapCustomMsgType proto.InternalMessageInfo

func (m *MapCustomMsgType) GetSetValueMsg() *MsgSetValue {
	if m != nil {
		return m.SetValueMsg
	}
	return nil
}

func (m *MapCustomMsgType) GetCreateMapMsg() *MsgCreateMap {
	if m != nil {
		return m.CreateMapMsg
	}
	return nil
}

func (m *MapCustomMsgType) GetUpdateMapMsg() *MsgUpdateMap {
	if m != nil {
		return m.UpdateMapMsg
	}
	return nil
}

func (m *MapCustomMsgType) GetDeleteMapMsg() *MsgDeleteMap {
	if m != nil {
		return m.DeleteMapMsg
	}
	return nil
}

type ValueStore struct {
	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	LastSetBy string `protobuf:"bytes,3,opt,name=lastSetBy,proto3" json:"lastSetBy,omitempty"`
}

func (m *ValueStore) Reset()         { *m = ValueStore{} }
func (m *ValueStore) String() string { return proto.CompactTextString(m) }
func (*ValueStore) ProtoMessage()    {}
func (*ValueStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{3}
}
func (m *ValueStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueStore.Merge(m, src)
}
func (m *ValueStore) XXX_Size() int {
	return m.Size()
}
func (m *ValueStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueStore.DiscardUnknown(m)
}

var xxx_messageInfo_ValueStore proto.InternalMessageInfo

func (m *ValueStore) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ValueStore) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ValueStore) GetLastSetBy() string {
	if m != nil {
		return m.LastSetBy
	}
	return ""
}

type MapUpdateCriteria struct {
	// All ID slots are only updatable by manager
	ManagerOnly bool `protobuf:"varint,1,opt,name=managerOnly,proto3" json:"managerOnly,omitempty"`
	// ID slots are only updatable by badge ID owner of this collection (>1 balance at current time)
	CollectionId Uint `protobuf:"bytes,2,opt,name=collectionId,proto3,customtype=Uint" json:"collectionId"`
	// Keys are address based and can only be updated by that respective address
	CreatorOnly bool `protobuf:"varint,3,opt,name=creatorOnly,proto3" json:"creatorOnly,omitempty"`
	// Claim slots. Can unclaim by setting to blank. Uses lastSetBy.
	FirstComeFirstServe bool `protobuf:"varint,4,opt,name=firstComeFirstServe,proto3" json:"firstComeFirstServe,omitempty"`
}

func (m *MapUpdateCriteria) Reset()         { *m = MapUpdateCriteria{} }
func (m *MapUpdateCriteria) String() string { return proto.CompactTextString(m) }
func (*MapUpdateCriteria) ProtoMessage()    {}
func (*MapUpdateCriteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{4}
}
func (m *MapUpdateCriteria) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapUpdateCriteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapUpdateCriteria.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapUpdateCriteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapUpdateCriteria.Merge(m, src)
}
func (m *MapUpdateCriteria) XXX_Size() int {
	return m.Size()
}
func (m *MapUpdateCriteria) XXX_DiscardUnknown() {
	xxx_messageInfo_MapUpdateCriteria.DiscardUnknown(m)
}

var xxx_messageInfo_MapUpdateCriteria proto.InternalMessageInfo

func (m *MapUpdateCriteria) GetManagerOnly() bool {
	if m != nil {
		return m.ManagerOnly
	}
	return false
}

func (m *MapUpdateCriteria) GetCreatorOnly() bool {
	if m != nil {
		return m.CreatorOnly
	}
	return false
}

func (m *MapUpdateCriteria) GetFirstComeFirstServe() bool {
	if m != nil {
		return m.FirstComeFirstServe
	}
	return false
}

type ValueOptions struct {
	NoDuplicates     bool `protobuf:"varint,1,opt,name=noDuplicates,proto3" json:"noDuplicates,omitempty"`
	PermanentOnceSet bool `protobuf:"varint,2,opt,name=permanentOnceSet,proto3" json:"permanentOnceSet,omitempty"`
	ExpectUint       bool `protobuf:"varint,3,opt,name=expectUint,proto3" json:"expectUint,omitempty"`
	ExpectBoolean    bool `protobuf:"varint,4,opt,name=expectBoolean,proto3" json:"expectBoolean,omitempty"`
	ExpectAddress    bool `protobuf:"varint,5,opt,name=expectAddress,proto3" json:"expectAddress,omitempty"`
	ExpectUri        bool `protobuf:"varint,6,opt,name=expectUri,proto3" json:"expectUri,omitempty"`
}

func (m *ValueOptions) Reset()         { *m = ValueOptions{} }
func (m *ValueOptions) String() string { return proto.CompactTextString(m) }
func (*ValueOptions) ProtoMessage()    {}
func (*ValueOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{5}
}
func (m *ValueOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOptions.Merge(m, src)
}
func (m *ValueOptions) XXX_Size() int {
	return m.Size()
}
func (m *ValueOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOptions proto.InternalMessageInfo

func (m *ValueOptions) GetNoDuplicates() bool {
	if m != nil {
		return m.NoDuplicates
	}
	return false
}

func (m *ValueOptions) GetPermanentOnceSet() bool {
	if m != nil {
		return m.PermanentOnceSet
	}
	return false
}

func (m *ValueOptions) GetExpectUint() bool {
	if m != nil {
		return m.ExpectUint
	}
	return false
}

func (m *ValueOptions) GetExpectBoolean() bool {
	if m != nil {
		return m.ExpectBoolean
	}
	return false
}

func (m *ValueOptions) GetExpectAddress() bool {
	if m != nil {
		return m.ExpectAddress
	}
	return false
}

func (m *ValueOptions) GetExpectUri() bool {
	if m != nil {
		return m.ExpectUri
	}
	return false
}

type MapPermissions struct {
	CanUpdateMetadata []*TimedUpdatePermission `protobuf:"bytes,1,rep,name=canUpdateMetadata,proto3" json:"canUpdateMetadata,omitempty"`
	CanUpdateManager  []*TimedUpdatePermission `protobuf:"bytes,2,rep,name=canUpdateManager,proto3" json:"canUpdateManager,omitempty"`
	CanDeleteMap      []*ActionPermission      `protobuf:"bytes,3,rep,name=canDeleteMap,proto3" json:"canDeleteMap,omitempty"`
}

func (m *MapPermissions) Reset()         { *m = MapPermissions{} }
func (m *MapPermissions) String() string { return proto.CompactTextString(m) }
func (*MapPermissions) ProtoMessage()    {}
func (*MapPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{6}
}
func (m *MapPermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapPermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapPermissions.Merge(m, src)
}
func (m *MapPermissions) XXX_Size() int {
	return m.Size()
}
func (m *MapPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_MapPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_MapPermissions proto.InternalMessageInfo

func (m *MapPermissions) GetCanUpdateMetadata() []*TimedUpdatePermission {
	if m != nil {
		return m.CanUpdateMetadata
	}
	return nil
}

func (m *MapPermissions) GetCanUpdateManager() []*TimedUpdatePermission {
	if m != nil {
		return m.CanUpdateManager
	}
	return nil
}

func (m *MapPermissions) GetCanDeleteMap() []*ActionPermission {
	if m != nil {
		return m.CanDeleteMap
	}
	return nil
}

type Map struct {
	Creator                    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId                      string             `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	InheritManagerTimelineFrom Uint               `protobuf:"bytes,3,opt,name=inheritManagerTimelineFrom,proto3,customtype=Uint" json:"inheritManagerTimelineFrom"`
	ManagerTimeline            []*ManagerTimeline `protobuf:"bytes,4,rep,name=managerTimeline,proto3" json:"managerTimeline,omitempty"`
	// config options that will not change at all
	UpdateCriteria   *MapUpdateCriteria     `protobuf:"bytes,5,opt,name=updateCriteria,proto3" json:"updateCriteria,omitempty"`
	ValueOptions     *ValueOptions          `protobuf:"bytes,6,opt,name=valueOptions,proto3" json:"valueOptions,omitempty"`
	DefaultValue     string                 `protobuf:"bytes,7,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	MetadataTimeline []*MapMetadataTimeline `protobuf:"bytes,10,rep,name=metadataTimeline,proto3" json:"metadataTimeline,omitempty"`
	Permissions      *MapPermissions        `protobuf:"bytes,11,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *Map) Reset()         { *m = Map{} }
func (m *Map) String() string { return proto.CompactTextString(m) }
func (*Map) ProtoMessage()    {}
func (*Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{7}
}
func (m *Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Map.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Map.Merge(m, src)
}
func (m *Map) XXX_Size() int {
	return m.Size()
}
func (m *Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Map proto.InternalMessageInfo

func (m *Map) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Map) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *Map) GetManagerTimeline() []*ManagerTimeline {
	if m != nil {
		return m.ManagerTimeline
	}
	return nil
}

func (m *Map) GetUpdateCriteria() *MapUpdateCriteria {
	if m != nil {
		return m.UpdateCriteria
	}
	return nil
}

func (m *Map) GetValueOptions() *ValueOptions {
	if m != nil {
		return m.ValueOptions
	}
	return nil
}

func (m *Map) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *Map) GetMetadataTimeline() []*MapMetadataTimeline {
	if m != nil {
		return m.MetadataTimeline
	}
	return nil
}

func (m *Map) GetPermissions() *MapPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type MsgCreateMap struct {
	Creator                    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId                      string             `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	InheritManagerTimelineFrom Uint               `protobuf:"bytes,3,opt,name=inheritManagerTimelineFrom,proto3,customtype=Uint" json:"inheritManagerTimelineFrom"`
	ManagerTimeline            []*ManagerTimeline `protobuf:"bytes,4,rep,name=managerTimeline,proto3" json:"managerTimeline,omitempty"`
	// config options that will not change at all
	UpdateCriteria   *MapUpdateCriteria     `protobuf:"bytes,5,opt,name=updateCriteria,proto3" json:"updateCriteria,omitempty"`
	ValueOptions     *ValueOptions          `protobuf:"bytes,6,opt,name=valueOptions,proto3" json:"valueOptions,omitempty"`
	DefaultValue     string                 `protobuf:"bytes,7,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	MetadataTimeline []*MapMetadataTimeline `protobuf:"bytes,9,rep,name=metadataTimeline,proto3" json:"metadataTimeline,omitempty"`
	Permissions      *MapPermissions        `protobuf:"bytes,10,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *MsgCreateMap) Reset()         { *m = MsgCreateMap{} }
func (m *MsgCreateMap) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMap) ProtoMessage()    {}
func (*MsgCreateMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{8}
}
func (m *MsgCreateMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMap.Merge(m, src)
}
func (m *MsgCreateMap) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMap proto.InternalMessageInfo

func (m *MsgCreateMap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateMap) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *MsgCreateMap) GetManagerTimeline() []*ManagerTimeline {
	if m != nil {
		return m.ManagerTimeline
	}
	return nil
}

func (m *MsgCreateMap) GetUpdateCriteria() *MapUpdateCriteria {
	if m != nil {
		return m.UpdateCriteria
	}
	return nil
}

func (m *MsgCreateMap) GetValueOptions() *ValueOptions {
	if m != nil {
		return m.ValueOptions
	}
	return nil
}

func (m *MsgCreateMap) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *MsgCreateMap) GetMetadataTimeline() []*MapMetadataTimeline {
	if m != nil {
		return m.MetadataTimeline
	}
	return nil
}

func (m *MsgCreateMap) GetPermissions() *MapPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type MsgCreateMapResponse struct {
}

func (m *MsgCreateMapResponse) Reset()         { *m = MsgCreateMapResponse{} }
func (m *MsgCreateMapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMapResponse) ProtoMessage()    {}
func (*MsgCreateMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{9}
}
func (m *MsgCreateMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMapResponse.Merge(m, src)
}
func (m *MsgCreateMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMapResponse proto.InternalMessageInfo

type MsgUpdateMap struct {
	Creator                string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId                  string                 `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	UpdateManagerTimeline  bool                   `protobuf:"varint,3,opt,name=updateManagerTimeline,proto3" json:"updateManagerTimeline,omitempty"`
	ManagerTimeline        []*ManagerTimeline     `protobuf:"bytes,4,rep,name=managerTimeline,proto3" json:"managerTimeline,omitempty"`
	UpdateMetadataTimeline bool                   `protobuf:"varint,7,opt,name=updateMetadataTimeline,proto3" json:"updateMetadataTimeline,omitempty"`
	MetadataTimeline       []*MapMetadataTimeline `protobuf:"bytes,8,rep,name=metadataTimeline,proto3" json:"metadataTimeline,omitempty"`
	UpdatePermissions      bool                   `protobuf:"varint,9,opt,name=updatePermissions,proto3" json:"updatePermissions,omitempty"`
	Permissions            *MapPermissions        `protobuf:"bytes,10,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *MsgUpdateMap) Reset()         { *m = MsgUpdateMap{} }
func (m *MsgUpdateMap) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMap) ProtoMessage()    {}
func (*MsgUpdateMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{10}
}
func (m *MsgUpdateMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMap.Merge(m, src)
}
func (m *MsgUpdateMap) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMap proto.InternalMessageInfo

func (m *MsgUpdateMap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateMap) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *MsgUpdateMap) GetUpdateManagerTimeline() bool {
	if m != nil {
		return m.UpdateManagerTimeline
	}
	return false
}

func (m *MsgUpdateMap) GetManagerTimeline() []*ManagerTimeline {
	if m != nil {
		return m.ManagerTimeline
	}
	return nil
}

func (m *MsgUpdateMap) GetUpdateMetadataTimeline() bool {
	if m != nil {
		return m.UpdateMetadataTimeline
	}
	return false
}

func (m *MsgUpdateMap) GetMetadataTimeline() []*MapMetadataTimeline {
	if m != nil {
		return m.MetadataTimeline
	}
	return nil
}

func (m *MsgUpdateMap) GetUpdatePermissions() bool {
	if m != nil {
		return m.UpdatePermissions
	}
	return false
}

func (m *MsgUpdateMap) GetPermissions() *MapPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type MsgUpdateMapResponse struct {
}

func (m *MsgUpdateMapResponse) Reset()         { *m = MsgUpdateMapResponse{} }
func (m *MsgUpdateMapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMapResponse) ProtoMessage()    {}
func (*MsgUpdateMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{11}
}
func (m *MsgUpdateMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMapResponse.Merge(m, src)
}
func (m *MsgUpdateMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMapResponse proto.InternalMessageInfo

type MsgDeleteMap struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId   string `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
}

func (m *MsgDeleteMap) Reset()         { *m = MsgDeleteMap{} }
func (m *MsgDeleteMap) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMap) ProtoMessage()    {}
func (*MsgDeleteMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{12}
}
func (m *MsgDeleteMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMap.Merge(m, src)
}
func (m *MsgDeleteMap) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMap proto.InternalMessageInfo

func (m *MsgDeleteMap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteMap) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

type MsgDeleteMapResponse struct {
}

func (m *MsgDeleteMapResponse) Reset()         { *m = MsgDeleteMapResponse{} }
func (m *MsgDeleteMapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMapResponse) ProtoMessage()    {}
func (*MsgDeleteMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{13}
}
func (m *MsgDeleteMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMapResponse.Merge(m, src)
}
func (m *MsgDeleteMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMapResponse proto.InternalMessageInfo

type SetOptions struct {
	UseMostRecentCollectionId bool `protobuf:"varint,1,opt,name=useMostRecentCollectionId,proto3" json:"useMostRecentCollectionId,omitempty"`
}

func (m *SetOptions) Reset()         { *m = SetOptions{} }
func (m *SetOptions) String() string { return proto.CompactTextString(m) }
func (*SetOptions) ProtoMessage()    {}
func (*SetOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{14}
}
func (m *SetOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOptions.Merge(m, src)
}
func (m *SetOptions) XXX_Size() int {
	return m.Size()
}
func (m *SetOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SetOptions proto.InternalMessageInfo

func (m *SetOptions) GetUseMostRecentCollectionId() bool {
	if m != nil {
		return m.UseMostRecentCollectionId
	}
	return false
}

type MsgSetValue struct {
	Creator string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MapId   string      `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Key     string      `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value   string      `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Options *SetOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *MsgSetValue) Reset()         { *m = MsgSetValue{} }
func (m *MsgSetValue) String() string { return proto.CompactTextString(m) }
func (*MsgSetValue) ProtoMessage()    {}
func (*MsgSetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{15}
}
func (m *MsgSetValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetValue.Merge(m, src)
}
func (m *MsgSetValue) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetValue.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetValue proto.InternalMessageInfo

func (m *MsgSetValue) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetValue) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *MsgSetValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgSetValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MsgSetValue) GetOptions() *SetOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type MsgSetValueResponse struct {
}

func (m *MsgSetValueResponse) Reset()         { *m = MsgSetValueResponse{} }
func (m *MsgSetValueResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetValueResponse) ProtoMessage()    {}
func (*MsgSetValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4bd760995a662e3, []int{16}
}
func (m *MsgSetValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetValueResponse.Merge(m, src)
}
func (m *MsgSetValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetValueResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "maps.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "maps.MsgUpdateParamsResponse")
	proto.RegisterType((*MapCustomMsgType)(nil), "maps.MapCustomMsgType")
	proto.RegisterType((*ValueStore)(nil), "maps.ValueStore")
	proto.RegisterType((*MapUpdateCriteria)(nil), "maps.MapUpdateCriteria")
	proto.RegisterType((*ValueOptions)(nil), "maps.ValueOptions")
	proto.RegisterType((*MapPermissions)(nil), "maps.MapPermissions")
	proto.RegisterType((*Map)(nil), "maps.Map")
	proto.RegisterType((*MsgCreateMap)(nil), "maps.MsgCreateMap")
	proto.RegisterType((*MsgCreateMapResponse)(nil), "maps.MsgCreateMapResponse")
	proto.RegisterType((*MsgUpdateMap)(nil), "maps.MsgUpdateMap")
	proto.RegisterType((*MsgUpdateMapResponse)(nil), "maps.MsgUpdateMapResponse")
	proto.RegisterType((*MsgDeleteMap)(nil), "maps.MsgDeleteMap")
	proto.RegisterType((*MsgDeleteMapResponse)(nil), "maps.MsgDeleteMapResponse")
	proto.RegisterType((*SetOptions)(nil), "maps.SetOptions")
	proto.RegisterType((*MsgSetValue)(nil), "maps.MsgSetValue")
	proto.RegisterType((*MsgSetValueResponse)(nil), "maps.MsgSetValueResponse")
}

func init() { proto.RegisterFile("maps/tx.proto", fileDescriptor_d4bd760995a662e3) }

var fileDescriptor_d4bd760995a662e3 = []byte{
	// 1204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcb, 0x6f, 0x1b, 0x45,
	0x18, 0xcf, 0xd6, 0x6e, 0x12, 0x7f, 0x76, 0x53, 0x7b, 0xf2, 0xda, 0x18, 0x70, 0xa2, 0x15, 0x12,
	0x51, 0x04, 0x71, 0x48, 0x51, 0x84, 0x02, 0x52, 0x55, 0x27, 0x14, 0xb5, 0xc2, 0x4a, 0x35, 0x4e,
	0x38, 0x70, 0xa9, 0x26, 0xeb, 0xa9, 0xb3, 0xc2, 0xfb, 0xd0, 0xce, 0x6c, 0x94, 0xdc, 0x10, 0xc7,
	0x9e, 0xf8, 0x1f, 0xb8, 0x70, 0x0c, 0x12, 0xb7, 0x1e, 0xb9, 0xf4, 0x58, 0x71, 0x42, 0x1c, 0xaa,
	0x28, 0x39, 0x84, 0x1b, 0xff, 0x02, 0x9a, 0xc7, 0x3e, 0xed, 0x00, 0x51, 0x11, 0x27, 0x2e, 0xf6,
	0xce, 0xf7, 0x9a, 0x6f, 0xe6, 0xf7, 0x9b, 0x6f, 0xbe, 0x81, 0x3b, 0x2e, 0x09, 0x58, 0x9b, 0x9f,
	0xac, 0x07, 0xa1, 0xcf, 0x7d, 0x54, 0x16, 0xc3, 0x66, 0x83, 0xb8, 0x8e, 0xe7, 0xb7, 0xe5, 0xaf,
	0x52, 0x34, 0x17, 0x6d, 0x9f, 0xb9, 0x3e, 0x6b, 0xbb, 0x6c, 0xd0, 0x3e, 0xfe, 0x50, 0xfc, 0x69,
	0xc5, 0x92, 0x52, 0x3c, 0x95, 0xa3, 0xb6, 0x1a, 0x68, 0xd5, 0xdc, 0xc0, 0x1f, 0xf8, 0x4a, 0x2e,
	0xbe, 0xb4, 0x74, 0x41, 0xce, 0x18, 0xd0, 0xd0, 0x75, 0x18, 0x73, 0x7c, 0x2f, 0xb1, 0x56, 0x99,
	0x38, 0x2e, 0x1d, 0x3a, 0x1e, 0x8d, 0xa5, 0xb3, 0x52, 0x7a, 0x48, 0x86, 0xc4, 0xb3, 0x13, 0x61,
	0x43, 0x85, 0x20, 0x21, 0x71, 0xb5, 0xc8, 0xfa, 0xde, 0x80, 0xbb, 0x5d, 0x36, 0x38, 0x08, 0xfa,
	0x84, 0xd3, 0x27, 0x52, 0x83, 0xb6, 0xa0, 0x42, 0x22, 0x7e, 0xe4, 0x87, 0x0e, 0x3f, 0x35, 0x8d,
	0x15, 0x63, 0xb5, 0xd2, 0x31, 0x7f, 0xf9, 0xe9, 0x83, 0x39, 0x9d, 0xe4, 0x83, 0x7e, 0x3f, 0xa4,
	0x8c, 0xf5, 0x78, 0xe8, 0x78, 0x03, 0x9c, 0x9a, 0xa2, 0x36, 0x4c, 0xaa, 0xd8, 0xe6, 0xad, 0x15,
	0x63, 0xb5, 0xba, 0x59, 0x5b, 0x17, 0xf3, 0xad, 0xab, 0xa8, 0x9d, 0xca, 0xcb, 0xd7, 0xcb, 0x13,
	0x3f, 0x5c, 0x9d, 0xad, 0x19, 0x58, 0x9b, 0x6d, 0xbf, 0xf7, 0xed, 0xd5, 0xd9, 0x5a, 0x1a, 0xe0,
	0xf9, 0xd5, 0xd9, 0x9a, 0x5a, 0x4d, 0x21, 0x23, 0x6b, 0x09, 0x16, 0x0b, 0x22, 0x4c, 0x59, 0xe0,
	0x7b, 0x8c, 0x5a, 0x7f, 0x18, 0x50, 0xef, 0x92, 0x60, 0x27, 0x62, 0xdc, 0x77, 0xbb, 0x6c, 0xb0,
	0x7f, 0x1a, 0x50, 0x74, 0x0f, 0xaa, 0x8c, 0xf2, 0x2f, 0xc9, 0x30, 0xa2, 0x5d, 0x36, 0x90, 0x6b,
	0xa8, 0x6e, 0x36, 0x54, 0x3a, 0x5d, 0x36, 0xe8, 0x69, 0x1d, 0xce, 0x5a, 0xa1, 0x2d, 0xa8, 0xd9,
	0x21, 0x25, 0x9c, 0x76, 0x49, 0x20, 0xbc, 0xd4, 0x22, 0x50, 0xe2, 0xb5, 0x13, 0x2b, 0x71, 0xce,
	0x4e, 0xf8, 0x45, 0x32, 0x33, 0xed, 0x57, 0x2a, 0xf8, 0x1d, 0xc4, 0x4a, 0x9c, 0xb3, 0x13, 0x7e,
	0x7d, 0x3a, 0xa4, 0x89, 0x5f, 0xb9, 0xe0, 0xb7, 0x1b, 0x2b, 0x71, 0xce, 0xce, 0xc2, 0x00, 0x32,
	0xe7, 0x1e, 0xf7, 0x43, 0x8a, 0xea, 0x50, 0xfa, 0x9a, 0x6a, 0x98, 0xb0, 0xf8, 0x44, 0x73, 0x70,
	0xfb, 0x58, 0xe8, 0xe5, 0x02, 0x2a, 0x58, 0x0d, 0xd0, 0xdb, 0x50, 0x19, 0x12, 0xc6, 0x7b, 0x94,
	0x77, 0x4e, 0x65, 0x8a, 0x15, 0x9c, 0x0a, 0xac, 0x17, 0x06, 0x34, 0xba, 0x24, 0x50, 0xa9, 0xee,
	0x84, 0x0e, 0xa7, 0xa1, 0x43, 0xd0, 0x0a, 0x54, 0x5d, 0xe2, 0x91, 0x01, 0x0d, 0xf7, 0xbc, 0xa1,
	0x9a, 0x63, 0x1a, 0x67, 0x45, 0x68, 0x03, 0x6a, 0xb6, 0x3f, 0x1c, 0x52, 0x9b, 0x3b, 0xbe, 0xf7,
	0xa8, 0xaf, 0xa6, 0xec, 0xd4, 0x04, 0xd4, 0xbf, 0xbd, 0x5e, 0x2e, 0x1f, 0x38, 0x1e, 0xc7, 0x39,
	0x0b, 0x11, 0x53, 0xee, 0x9e, 0xaf, 0x62, 0x96, 0x54, 0xcc, 0x8c, 0x08, 0x6d, 0xc0, 0xec, 0x33,
	0x27, 0x64, 0x7c, 0xc7, 0x77, 0xe9, 0x43, 0xf1, 0xd1, 0xa3, 0xe1, 0x31, 0x95, 0xdb, 0x33, 0x8d,
	0xc7, 0xa9, 0xac, 0xdf, 0x0d, 0xa8, 0xc9, 0x2d, 0xd9, 0x0b, 0xc4, 0x2c, 0x0c, 0x59, 0x50, 0xf3,
	0xfc, 0xdd, 0x28, 0x18, 0x3a, 0x36, 0xe1, 0x94, 0xe9, 0xcc, 0x73, 0x32, 0xb4, 0x06, 0x75, 0x71,
	0x98, 0x88, 0x47, 0x3d, 0xbe, 0xe7, 0xd9, 0xb4, 0x47, 0xb9, 0x4c, 0x7f, 0x1a, 0x8f, 0xc8, 0x51,
	0x0b, 0x80, 0x9e, 0x04, 0xd4, 0xe6, 0x62, 0x41, 0x3a, 0xe7, 0x8c, 0x04, 0xbd, 0x0b, 0x77, 0xd4,
	0xa8, 0xe3, 0xfb, 0x43, 0x4a, 0x3c, 0x9d, 0x6c, 0x5e, 0x98, 0x5a, 0xe9, 0x13, 0x64, 0xde, 0xce,
	0x5a, 0x69, 0xa1, 0x00, 0x4a, 0x47, 0x0e, 0x1d, 0x73, 0x52, 0x5a, 0xa4, 0x02, 0xeb, 0xdc, 0x80,
	0x99, 0x2e, 0x09, 0x9e, 0xa4, 0x65, 0x00, 0x3d, 0x82, 0x86, 0x4d, 0x3c, 0xcd, 0x32, 0xca, 0x49,
	0x9f, 0x70, 0x62, 0x1a, 0x2b, 0xa5, 0xd5, 0xea, 0xe6, 0x5b, 0x8a, 0x4c, 0xfb, 0x8e, 0x4b, 0xfb,
	0xfa, 0xf4, 0x24, 0x8e, 0x78, 0xd4, 0x0b, 0x7d, 0x0e, 0xf5, 0x54, 0xa8, 0x60, 0x36, 0x6f, 0xfd,
	0x7d, 0xa4, 0x11, 0x27, 0xb4, 0x0d, 0x35, 0x9b, 0x78, 0x09, 0x83, 0xcd, 0x92, 0x0c, 0xb2, 0xa0,
	0x82, 0x3c, 0x90, 0x5c, 0xc8, 0xf8, 0xe7, 0x6c, 0xad, 0xf3, 0x12, 0x94, 0xba, 0x24, 0x40, 0x26,
	0x4c, 0x69, 0x5a, 0x68, 0x76, 0xc7, 0x43, 0xc1, 0x70, 0x97, 0x04, 0x31, 0xdd, 0xb0, 0x1a, 0xa0,
	0x2f, 0xa0, 0xe9, 0x78, 0x47, 0x34, 0x74, 0xb8, 0xce, 0x62, 0x5f, 0xd7, 0xc4, 0x87, 0xa1, 0xef,
	0x2a, 0xca, 0x17, 0x98, 0xf9, 0x17, 0xf6, 0xe8, 0x3e, 0xdc, 0x75, 0xf3, 0x62, 0xb3, 0x2c, 0x17,
	0x31, 0xaf, 0x0f, 0x68, 0x5e, 0x89, 0x8b, 0xd6, 0xe8, 0x3e, 0xcc, 0x44, 0xb9, 0xe3, 0x24, 0xe1,
	0xae, 0x6e, 0x2e, 0xc6, 0xfe, 0x85, 0xd3, 0x86, 0x0b, 0xe6, 0xa2, 0x3e, 0x1c, 0x67, 0x48, 0x2d,
	0xb9, 0x90, 0xd4, 0x87, 0x2c, 0xdd, 0x71, 0xce, 0x4e, 0x90, 0xbf, 0x4f, 0x9f, 0x91, 0x68, 0xa8,
	0x4a, 0x9b, 0x39, 0x25, 0x37, 0x29, 0x27, 0x43, 0x9f, 0x41, 0xdd, 0xd5, 0xa0, 0x27, 0xcb, 0x03,
	0xb9, 0xbc, 0xa5, 0x24, 0xbd, 0x6e, 0xc1, 0x00, 0x8f, 0xb8, 0xa0, 0x2d, 0xa8, 0x66, 0x2e, 0x24,
	0xb3, 0x2a, 0x33, 0x9c, 0x4b, 0x22, 0x64, 0x58, 0x8a, 0xb3, 0x86, 0xd6, 0xf3, 0x32, 0xd4, 0xb2,
	0x15, 0xf5, 0x7f, 0xac, 0xff, 0x63, 0xac, 0x2b, 0x6f, 0x8c, 0x35, 0xfc, 0x43, 0xac, 0xb7, 0x97,
	0xc5, 0x25, 0x1f, 0xc3, 0x29, 0xae, 0xf8, 0x19, 0x79, 0xc5, 0x27, 0xd8, 0x5b, 0x0b, 0x30, 0x97,
	0xbb, 0x5d, 0xe3, 0x9b, 0xfd, 0x45, 0x49, 0x92, 0x24, 0xb9, 0x3e, 0x6f, 0x4c, 0x92, 0x8f, 0x60,
	0x3e, 0xca, 0x56, 0xa5, 0x64, 0xf5, 0xaa, 0x80, 0x8f, 0x57, 0xbe, 0x39, 0x19, 0xb6, 0x60, 0x21,
	0xca, 0x95, 0xd5, 0x24, 0xce, 0x94, 0x9c, 0xf7, 0x1a, 0xed, 0x58, 0x9c, 0xa6, 0x6f, 0x8e, 0xd3,
	0xfb, 0xd0, 0x88, 0x0a, 0x05, 0x9a, 0x99, 0x15, 0x39, 0xf3, 0xa8, 0xe2, 0xdf, 0x46, 0x35, 0x01,
	0x4b, 0xa3, 0x9a, 0xf6, 0x3e, 0x31, 0xaa, 0x4f, 0x25, 0xa8, 0x49, 0xb5, 0xbf, 0x29, 0xa8, 0xd7,
	0x4d, 0x9c, 0x5e, 0x1f, 0x6a, 0xe2, 0xb4, 0x79, 0x8a, 0x27, 0x7e, 0x0c, 0xd0, 0xa3, 0x3c, 0x3e,
	0x38, 0x9f, 0xc2, 0x52, 0xc4, 0x68, 0xd7, 0x67, 0x1c, 0x53, 0x9b, 0x7a, 0x7c, 0x27, 0xdb, 0xc5,
	0xa8, 0x76, 0xe1, 0x7a, 0x03, 0xeb, 0x47, 0x03, 0xaa, 0x99, 0x3e, 0xf2, 0xc6, 0xcc, 0xd4, 0x4d,
	0x5b, 0x69, 0x4c, 0xd3, 0x56, 0xce, 0x36, 0x6d, 0x6b, 0x30, 0xe5, 0xeb, 0x8a, 0xa0, 0x0a, 0x4a,
	0x5d, 0x21, 0x93, 0x2e, 0x04, 0xc7, 0x06, 0xdb, 0xad, 0xe2, 0xc6, 0xa8, 0x27, 0x4a, 0x9c, 0xa3,
	0x35, 0x0f, 0xb3, 0xd9, 0xd6, 0x57, 0x6f, 0xcb, 0xe6, 0xcf, 0xb7, 0xa0, 0x24, 0xba, 0xd1, 0x5d,
	0xa8, 0xe5, 0x1e, 0x01, 0xf3, 0x85, 0xfe, 0x55, 0x89, 0x9b, 0xef, 0x8c, 0x15, 0xc7, 0xd1, 0xd0,
	0x27, 0x50, 0x49, 0x8b, 0xfa, 0x98, 0xd6, 0xb9, 0xd9, 0x1c, 0xd3, 0x4e, 0x67, 0x9c, 0xd3, 0xc3,
	0x3e, 0xa6, 0x7f, 0xce, 0x38, 0x8f, 0xf0, 0x4a, 0x38, 0xa7, 0xa4, 0x1a, 0xd3, 0x44, 0x67, 0x9c,
	0x47, 0xb8, 0x81, 0x3e, 0x86, 0xe9, 0x04, 0xcb, 0xd1, 0x67, 0x42, 0x73, 0x69, 0xf4, 0xe5, 0xa0,
	0x3d, 0x9b, 0xb7, 0xbf, 0x11, 0x2f, 0x9a, 0xce, 0xe3, 0x97, 0x17, 0x2d, 0xe3, 0xd5, 0x45, 0xcb,
	0x38, 0xbf, 0x68, 0x19, 0xdf, 0x5d, 0xb6, 0x26, 0x5e, 0x5d, 0xb6, 0x26, 0x7e, 0xbd, 0x6c, 0x4d,
	0x7c, 0xb5, 0x31, 0x70, 0xf8, 0x51, 0x74, 0xb8, 0x6e, 0xfb, 0x6e, 0xfb, 0xd0, 0xe1, 0x87, 0xa4,
	0x3f, 0xa0, 0x2c, 0xfd, 0xb2, 0x8f, 0x88, 0xe3, 0xb5, 0x4f, 0xda, 0xea, 0x11, 0x77, 0x1a, 0x50,
	0x76, 0x38, 0x29, 0x5f, 0x66, 0xf7, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x7c, 0x6c, 0x5b,
	0x63, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateMap(ctx context.Context, in *MsgCreateMap, opts ...grpc.CallOption) (*MsgCreateMapResponse, error)
	UpdateMap(ctx context.Context, in *MsgUpdateMap, opts ...grpc.CallOption) (*MsgUpdateMapResponse, error)
	DeleteMap(ctx context.Context, in *MsgDeleteMap, opts ...grpc.CallOption) (*MsgDeleteMapResponse, error)
	SetValue(ctx context.Context, in *MsgSetValue, opts ...grpc.CallOption) (*MsgSetValueResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMap(ctx context.Context, in *MsgCreateMap, opts ...grpc.CallOption) (*MsgCreateMapResponse, error) {
	out := new(MsgCreateMapResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/CreateMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMap(ctx context.Context, in *MsgUpdateMap, opts ...grpc.CallOption) (*MsgUpdateMapResponse, error) {
	out := new(MsgUpdateMapResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/UpdateMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMap(ctx context.Context, in *MsgDeleteMap, opts ...grpc.CallOption) (*MsgDeleteMapResponse, error) {
	out := new(MsgDeleteMapResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/DeleteMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetValue(ctx context.Context, in *MsgSetValue, opts ...grpc.CallOption) (*MsgSetValueResponse, error) {
	out := new(MsgSetValueResponse)
	err := c.cc.Invoke(ctx, "/maps.Msg/SetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateMap(context.Context, *MsgCreateMap) (*MsgCreateMapResponse, error)
	UpdateMap(context.Context, *MsgUpdateMap) (*MsgUpdateMapResponse, error)
	DeleteMap(context.Context, *MsgDeleteMap) (*MsgDeleteMapResponse, error)
	SetValue(context.Context, *MsgSetValue) (*MsgSetValueResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateMap(ctx context.Context, req *MsgCreateMap) (*MsgCreateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMap not implemented")
}
func (*UnimplementedMsgServer) UpdateMap(ctx context.Context, req *MsgUpdateMap) (*MsgUpdateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMap not implemented")
}
func (*UnimplementedMsgServer) DeleteMap(ctx context.Context, req *MsgDeleteMap) (*MsgDeleteMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMap not implemented")
}
func (*UnimplementedMsgServer) SetValue(ctx context.Context, req *MsgSetValue) (*MsgSetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/CreateMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMap(ctx, req.(*MsgCreateMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/UpdateMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMap(ctx, req.(*MsgUpdateMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/DeleteMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMap(ctx, req.(*MsgDeleteMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maps.Msg/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetValue(ctx, req.(*MsgSetValue))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maps.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateMap",
			Handler:    _Msg_CreateMap_Handler,
		},
		{
			MethodName: "UpdateMap",
			Handler:    _Msg_UpdateMap_Handler,
		},
		{
			MethodName: "DeleteMap",
			Handler:    _Msg_DeleteMap_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _Msg_SetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maps/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapCustomMsgType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapCustomMsgType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapCustomMsgType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeleteMapMsg != nil {
		{
			size, err := m.DeleteMapMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UpdateMapMsg != nil {
		{
			size, err := m.UpdateMapMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreateMapMsg != nil {
		{
			size, err := m.CreateMapMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SetValueMsg != nil {
		{
			size, err := m.SetValueMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastSetBy) > 0 {
		i -= len(m.LastSetBy)
		copy(dAtA[i:], m.LastSetBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastSetBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapUpdateCriteria) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapUpdateCriteria) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapUpdateCriteria) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FirstComeFirstServe {
		i--
		if m.FirstComeFirstServe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CreatorOnly {
		i--
		if m.CreatorOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.CollectionId.Size()
		i -= size
		if _, err := m.CollectionId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ManagerOnly {
		i--
		if m.ManagerOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValueOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpectUri {
		i--
		if m.ExpectUri {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ExpectAddress {
		i--
		if m.ExpectAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ExpectBoolean {
		i--
		if m.ExpectBoolean {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ExpectUint {
		i--
		if m.ExpectUint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PermanentOnceSet {
		i--
		if m.PermanentOnceSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.NoDuplicates {
		i--
		if m.NoDuplicates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CanDeleteMap) > 0 {
		for iNdEx := len(m.CanDeleteMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CanDeleteMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CanUpdateManager) > 0 {
		for iNdEx := len(m.CanUpdateManager) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CanUpdateManager[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CanUpdateMetadata) > 0 {
		for iNdEx := len(m.CanUpdateMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CanUpdateMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MetadataTimeline) > 0 {
		for iNdEx := len(m.MetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ValueOptions != nil {
		{
			size, err := m.ValueOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UpdateCriteria != nil {
		{
			size, err := m.UpdateCriteria.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ManagerTimeline) > 0 {
		for iNdEx := len(m.ManagerTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.InheritManagerTimelineFrom.Size()
		i -= size
		if _, err := m.InheritManagerTimelineFrom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.MetadataTimeline) > 0 {
		for iNdEx := len(m.MetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ValueOptions != nil {
		{
			size, err := m.ValueOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UpdateCriteria != nil {
		{
			size, err := m.UpdateCriteria.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ManagerTimeline) > 0 {
		for iNdEx := len(m.ManagerTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.InheritManagerTimelineFrom.Size()
		i -= size
		if _, err := m.InheritManagerTimelineFrom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.UpdatePermissions {
		i--
		if m.UpdatePermissions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.MetadataTimeline) > 0 {
		for iNdEx := len(m.MetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.UpdateMetadataTimeline {
		i--
		if m.UpdateMetadataTimeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ManagerTimeline) > 0 {
		for iNdEx := len(m.ManagerTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UpdateManagerTimeline {
		i--
		if m.UpdateManagerTimeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseMostRecentCollectionId {
		i--
		if m.UseMostRecentCollectionId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapCustomMsgType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetValueMsg != nil {
		l = m.SetValueMsg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CreateMapMsg != nil {
		l = m.CreateMapMsg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UpdateMapMsg != nil {
		l = m.UpdateMapMsg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DeleteMapMsg != nil {
		l = m.DeleteMapMsg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ValueStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastSetBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MapUpdateCriteria) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManagerOnly {
		n += 2
	}
	l = m.CollectionId.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.CreatorOnly {
		n += 2
	}
	if m.FirstComeFirstServe {
		n += 2
	}
	return n
}

func (m *ValueOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDuplicates {
		n += 2
	}
	if m.PermanentOnceSet {
		n += 2
	}
	if m.ExpectUint {
		n += 2
	}
	if m.ExpectBoolean {
		n += 2
	}
	if m.ExpectAddress {
		n += 2
	}
	if m.ExpectUri {
		n += 2
	}
	return n
}

func (m *MapPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CanUpdateMetadata) > 0 {
		for _, e := range m.CanUpdateMetadata {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CanUpdateManager) > 0 {
		for _, e := range m.CanUpdateManager {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CanDeleteMap) > 0 {
		for _, e := range m.CanDeleteMap {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InheritManagerTimelineFrom.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.ManagerTimeline) > 0 {
		for _, e := range m.ManagerTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpdateCriteria != nil {
		l = m.UpdateCriteria.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ValueOptions != nil {
		l = m.ValueOptions.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MetadataTimeline) > 0 {
		for _, e := range m.MetadataTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InheritManagerTimelineFrom.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.ManagerTimeline) > 0 {
		for _, e := range m.ManagerTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpdateCriteria != nil {
		l = m.UpdateCriteria.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ValueOptions != nil {
		l = m.ValueOptions.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MetadataTimeline) > 0 {
		for _, e := range m.MetadataTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UpdateManagerTimeline {
		n += 2
	}
	if len(m.ManagerTimeline) > 0 {
		for _, e := range m.ManagerTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpdateMetadataTimeline {
		n += 2
	}
	if len(m.MetadataTimeline) > 0 {
		for _, e := range m.MetadataTimeline {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpdatePermissions {
		n += 2
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseMostRecentCollectionId {
		n += 2
	}
	return n
}

func (m *MsgSetValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapCustomMsgType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapCustomMsgType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapCustomMsgType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetValueMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetValueMsg == nil {
				m.SetValueMsg = &MsgSetValue{}
			}
			if err := m.SetValueMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMapMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMapMsg == nil {
				m.CreateMapMsg = &MsgCreateMap{}
			}
			if err := m.CreateMapMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMapMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateMapMsg == nil {
				m.UpdateMapMsg = &MsgUpdateMap{}
			}
			if err := m.UpdateMapMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMapMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteMapMsg == nil {
				m.DeleteMapMsg = &MsgDeleteMap{}
			}
			if err := m.DeleteMapMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSetBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSetBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapUpdateCriteria) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapUpdateCriteria: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapUpdateCriteria: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ManagerOnly = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreatorOnly = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstComeFirstServe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstComeFirstServe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDuplicates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoDuplicates = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermanentOnceSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PermanentOnceSet = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectUint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectUint = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectBoolean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectBoolean = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectAddress = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectUri", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectUri = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanUpdateMetadata = append(m.CanUpdateMetadata, &TimedUpdatePermission{})
			if err := m.CanUpdateMetadata[len(m.CanUpdateMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanUpdateManager = append(m.CanUpdateManager, &TimedUpdatePermission{})
			if err := m.CanUpdateManager[len(m.CanUpdateManager)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanDeleteMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanDeleteMap = append(m.CanDeleteMap, &ActionPermission{})
			if err := m.CanDeleteMap[len(m.CanDeleteMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritManagerTimelineFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InheritManagerTimelineFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerTimeline = append(m.ManagerTimeline, &ManagerTimeline{})
			if err := m.ManagerTimeline[len(m.ManagerTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCriteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateCriteria == nil {
				m.UpdateCriteria = &MapUpdateCriteria{}
			}
			if err := m.UpdateCriteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueOptions == nil {
				m.ValueOptions = &ValueOptions{}
			}
			if err := m.ValueOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataTimeline = append(m.MetadataTimeline, &MapMetadataTimeline{})
			if err := m.MetadataTimeline[len(m.MetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &MapPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritManagerTimelineFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InheritManagerTimelineFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerTimeline = append(m.ManagerTimeline, &ManagerTimeline{})
			if err := m.ManagerTimeline[len(m.ManagerTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCriteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateCriteria == nil {
				m.UpdateCriteria = &MapUpdateCriteria{}
			}
			if err := m.UpdateCriteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueOptions == nil {
				m.ValueOptions = &ValueOptions{}
			}
			if err := m.ValueOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataTimeline = append(m.MetadataTimeline, &MapMetadataTimeline{})
			if err := m.MetadataTimeline[len(m.MetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &MapPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateManagerTimeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateManagerTimeline = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerTimeline = append(m.ManagerTimeline, &ManagerTimeline{})
			if err := m.ManagerTimeline[len(m.ManagerTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMetadataTimeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateMetadataTimeline = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataTimeline = append(m.MetadataTimeline, &MapMetadataTimeline{})
			if err := m.MetadataTimeline[len(m.MetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePermissions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatePermissions = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &MapPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMostRecentCollectionId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseMostRecentCollectionId = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &SetOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

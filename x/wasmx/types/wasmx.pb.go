// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wasmx/wasmx.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// Set the status to active to indicate that contracts can be executed in begin blocker.
	IsExecutionEnabled bool `protobuf:"varint,1,opt,name=is_execution_enabled,json=isExecutionEnabled,proto3" json:"is_execution_enabled,omitempty"`
	// Maximum aggregate total gas to be used for the contract executions in the BeginBlocker.
	MaxBeginBlockTotalGas uint64 `protobuf:"varint,2,opt,name=max_begin_block_total_gas,json=maxBeginBlockTotalGas,proto3" json:"max_begin_block_total_gas,omitempty"`
	// the maximum gas limit each individual contract can consume in the BeginBlocker.
	MaxContractGasLimit uint64 `protobuf:"varint,3,opt,name=max_contract_gas_limit,json=maxContractGasLimit,proto3" json:"max_contract_gas_limit,omitempty"`
	// min_gas_price defines the minimum gas price the contracts must pay to be executed in the BeginBlocker.
	MinGasPrice uint64 `protobuf:"varint,4,opt,name=min_gas_price,json=minGasPrice,proto3" json:"min_gas_price,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc18db82734cb1b4, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIsExecutionEnabled() bool {
	if m != nil {
		return m.IsExecutionEnabled
	}
	return false
}

func (m *Params) GetMaxBeginBlockTotalGas() uint64 {
	if m != nil {
		return m.MaxBeginBlockTotalGas
	}
	return 0
}

func (m *Params) GetMaxContractGasLimit() uint64 {
	if m != nil {
		return m.MaxContractGasLimit
	}
	return 0
}

func (m *Params) GetMinGasPrice() uint64 {
	if m != nil {
		return m.MinGasPrice
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "wasmx.Params")
}

func init() { proto.RegisterFile("wasmx/wasmx.proto", fileDescriptor_cc18db82734cb1b4) }

var fileDescriptor_cc18db82734cb1b4 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0xd0, 0xb1, 0x4e, 0x72, 0x31,
	0x14, 0x07, 0x70, 0xfa, 0x7d, 0x48, 0xcc, 0x35, 0x0e, 0x56, 0x34, 0x57, 0x87, 0x4a, 0x98, 0x98,
	0xb8, 0x1a, 0x16, 0xe3, 0x88, 0x21, 0x0c, 0x3a, 0x10, 0xe2, 0xe4, 0xd2, 0x9c, 0x96, 0xa6, 0x9c,
	0x78, 0xdb, 0x92, 0xdb, 0x12, 0xaf, 0x6f, 0xe1, 0x23, 0xf8, 0x38, 0x8e, 0x24, 0x2e, 0x8e, 0x06,
	0x16, 0x1f, 0xc3, 0xb4, 0x60, 0x5c, 0x9a, 0xd3, 0xf3, 0x3b, 0xff, 0xe5, 0x9f, 0x1d, 0x3d, 0x83,
	0x37, 0x75, 0x91, 0xde, 0xfe, 0xa2, 0x72, 0xc1, 0xd1, 0xbd, 0xf4, 0x39, 0x6f, 0x6b, 0xa7, 0x5d,
	0xda, 0x14, 0x71, 0xda, 0x62, 0xf7, 0x83, 0x64, 0xad, 0x09, 0x54, 0x60, 0x3c, 0xbd, 0xcc, 0xda,
	0xe8, 0xb9, 0xaa, 0x95, 0x5c, 0x06, 0x74, 0x96, 0x2b, 0x0b, 0xa2, 0x54, 0xb3, 0x9c, 0x74, 0x48,
	0x6f, 0x7f, 0x4a, 0xd1, 0x8f, 0x7e, 0x69, 0xb4, 0x15, 0x7a, 0x9d, 0x9d, 0x19, 0xa8, 0xb9, 0x50,
	0x1a, 0x2d, 0x17, 0xa5, 0x93, 0x4f, 0x3c, 0xb8, 0x00, 0x25, 0xd7, 0xe0, 0xf3, 0x7f, 0x1d, 0xd2,
	0x6b, 0x4e, 0x4f, 0x0c, 0xd4, 0xc3, 0xe8, 0xc3, 0xc8, 0x0f, 0x51, 0xc7, 0xe0, 0xe9, 0x20, 0x3b,
	0x8d, 0x49, 0xe9, 0x6c, 0xa8, 0x40, 0x86, 0x18, 0xe0, 0x25, 0x1a, 0x0c, 0xf9, 0xff, 0x14, 0x3b,
	0x36, 0x50, 0xdf, 0xee, 0x70, 0x0c, 0xfe, 0x3e, 0x12, 0xed, 0x66, 0x87, 0x06, 0x6d, 0xba, 0x5d,
	0x54, 0x28, 0x55, 0xde, 0x4c, 0xb7, 0x07, 0x06, 0xed, 0x18, 0xfc, 0x24, 0xae, 0x6e, 0x9a, 0xdf,
	0x6f, 0x17, 0x64, 0x78, 0xf7, 0xbe, 0x66, 0x64, 0xb5, 0x66, 0xe4, 0x6b, 0xcd, 0xc8, 0xeb, 0x86,
	0x35, 0x56, 0x1b, 0xd6, 0xf8, 0xdc, 0xb0, 0xc6, 0xe3, 0x95, 0xc6, 0x30, 0x5f, 0x8a, 0xbe, 0x74,
	0xa6, 0x10, 0x18, 0x04, 0xcc, 0xb4, 0xf2, 0x7f, 0x93, 0x9c, 0x03, 0xda, 0x62, 0xd7, 0x5f, 0x11,
	0x5e, 0x16, 0xca, 0x8b, 0x56, 0x6a, 0x6a, 0xf0, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x88, 0x87,
	0xbe, 0x5b, 0x01, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsExecutionEnabled != that1.IsExecutionEnabled {
		return false
	}
	if this.MaxBeginBlockTotalGas != that1.MaxBeginBlockTotalGas {
		return false
	}
	if this.MaxContractGasLimit != that1.MaxContractGasLimit {
		return false
	}
	if this.MinGasPrice != that1.MinGasPrice {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinGasPrice != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.MinGasPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxContractGasLimit != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.MaxContractGasLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxBeginBlockTotalGas != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.MaxBeginBlockTotalGas))
		i--
		dAtA[i] = 0x10
	}
	if m.IsExecutionEnabled {
		i--
		if m.IsExecutionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWasmx(dAtA []byte, offset int, v uint64) int {
	offset -= sovWasmx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsExecutionEnabled {
		n += 2
	}
	if m.MaxBeginBlockTotalGas != 0 {
		n += 1 + sovWasmx(uint64(m.MaxBeginBlockTotalGas))
	}
	if m.MaxContractGasLimit != 0 {
		n += 1 + sovWasmx(uint64(m.MaxContractGasLimit))
	}
	if m.MinGasPrice != 0 {
		n += 1 + sovWasmx(uint64(m.MinGasPrice))
	}
	return n
}

func sovWasmx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWasmx(x uint64) (n int) {
	return sovWasmx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExecutionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExecutionEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBeginBlockTotalGas", wireType)
			}
			m.MaxBeginBlockTotalGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBeginBlockTotalGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxContractGasLimit", wireType)
			}
			m.MaxContractGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxContractGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrice", wireType)
			}
			m.MinGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWasmx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWasmx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWasmx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWasmx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWasmx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWasmx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWasmx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWasmx = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//BadgeSupplyAndAmount is used to define the supply and amount of badges to create.
//We create x amount of badges each with a supply of y.
type BadgeSupplyAndAmount struct {
	Supply uint64 `protobuf:"varint,1,opt,name=supply,proto3" json:"supply,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *BadgeSupplyAndAmount) Reset()         { *m = BadgeSupplyAndAmount{} }
func (m *BadgeSupplyAndAmount) String() string { return proto.CompactTextString(m) }
func (*BadgeSupplyAndAmount) ProtoMessage()    {}
func (*BadgeSupplyAndAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{0}
}
func (m *BadgeSupplyAndAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeSupplyAndAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeSupplyAndAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeSupplyAndAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeSupplyAndAmount.Merge(m, src)
}
func (m *BadgeSupplyAndAmount) XXX_Size() int {
	return m.Size()
}
func (m *BadgeSupplyAndAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeSupplyAndAmount.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeSupplyAndAmount proto.InternalMessageInfo

func (m *BadgeSupplyAndAmount) GetSupply() uint64 {
	if m != nil {
		return m.Supply
	}
	return 0
}

func (m *BadgeSupplyAndAmount) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

//Upon badge creation, the manager will first be minted these badges, and then, they will subsequently be transferred to these addresses according to permissions.ForcefulTransfers.
//Used to only need one signature for MsgNewBadge.
type Transfers struct {
	ToAddresses []uint64   `protobuf:"varint,1,rep,packed,name=toAddresses,proto3" json:"toAddresses,omitempty"`
	Balances    []*Balance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (m *Transfers) Reset()         { *m = Transfers{} }
func (m *Transfers) String() string { return proto.CompactTextString(m) }
func (*Transfers) ProtoMessage()    {}
func (*Transfers) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{1}
}
func (m *Transfers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transfers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transfers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transfers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfers.Merge(m, src)
}
func (m *Transfers) XXX_Size() int {
	return m.Size()
}
func (m *Transfers) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfers.DiscardUnknown(m)
}

var xxx_messageInfo_Transfers proto.InternalMessageInfo

func (m *Transfers) GetToAddresses() []uint64 {
	if m != nil {
		return m.ToAddresses
	}
	return nil
}

func (m *Transfers) GetBalances() []*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type MsgNewCollection struct {
	// See badges.proto for more details about these MsgNewBadge fields. Defines the badge details. Leave unneeded fields empty.
	Creator                  string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionUri            string             `protobuf:"bytes,2,opt,name=collectionUri,proto3" json:"collectionUri,omitempty"`
	BadgeUri                 string             `protobuf:"bytes,3,opt,name=badgeUri,proto3" json:"badgeUri,omitempty"`
	Permissions              uint64             `protobuf:"varint,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Bytes                    string             `protobuf:"bytes,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
	DisallowedTransfers      []*TransferMapping `protobuf:"bytes,6,rep,name=disallowedTransfers,proto3" json:"disallowedTransfers,omitempty"`
	ManagerApprovedTransfers []*TransferMapping `protobuf:"bytes,7,rep,name=managerApprovedTransfers,proto3" json:"managerApprovedTransfers,omitempty"`
	Standard                 uint64             `protobuf:"varint,8,opt,name=standard,proto3" json:"standard,omitempty"`
	//Badge supplys and amounts to create. For each idx, we create amounts[idx] badges each with a supply of supplys[idx].
	//If supply[idx] == 0, we assume default supply. amountsToCreate[idx] can't equal 0.
	BadgeSupplys []*BadgeSupplyAndAmount `protobuf:"bytes,9,rep,name=badgeSupplys,proto3" json:"badgeSupplys,omitempty"`
	Transfers    []*Transfers            `protobuf:"bytes,10,rep,name=transfers,proto3" json:"transfers,omitempty"`
	Claims       []*Claim                `protobuf:"bytes,11,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (m *MsgNewCollection) Reset()         { *m = MsgNewCollection{} }
func (m *MsgNewCollection) String() string { return proto.CompactTextString(m) }
func (*MsgNewCollection) ProtoMessage()    {}
func (*MsgNewCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{2}
}
func (m *MsgNewCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewCollection.Merge(m, src)
}
func (m *MsgNewCollection) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewCollection.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewCollection proto.InternalMessageInfo

func (m *MsgNewCollection) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewCollection) GetCollectionUri() string {
	if m != nil {
		return m.CollectionUri
	}
	return ""
}

func (m *MsgNewCollection) GetBadgeUri() string {
	if m != nil {
		return m.BadgeUri
	}
	return ""
}

func (m *MsgNewCollection) GetPermissions() uint64 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *MsgNewCollection) GetBytes() string {
	if m != nil {
		return m.Bytes
	}
	return ""
}

func (m *MsgNewCollection) GetDisallowedTransfers() []*TransferMapping {
	if m != nil {
		return m.DisallowedTransfers
	}
	return nil
}

func (m *MsgNewCollection) GetManagerApprovedTransfers() []*TransferMapping {
	if m != nil {
		return m.ManagerApprovedTransfers
	}
	return nil
}

func (m *MsgNewCollection) GetStandard() uint64 {
	if m != nil {
		return m.Standard
	}
	return 0
}

func (m *MsgNewCollection) GetBadgeSupplys() []*BadgeSupplyAndAmount {
	if m != nil {
		return m.BadgeSupplys
	}
	return nil
}

func (m *MsgNewCollection) GetTransfers() []*Transfers {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (m *MsgNewCollection) GetClaims() []*Claim {
	if m != nil {
		return m.Claims
	}
	return nil
}

type MsgNewCollectionResponse struct {
	CollectionId uint64 `protobuf:"varint,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
}

func (m *MsgNewCollectionResponse) Reset()         { *m = MsgNewCollectionResponse{} }
func (m *MsgNewCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewCollectionResponse) ProtoMessage()    {}
func (*MsgNewCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{3}
}
func (m *MsgNewCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewCollectionResponse.Merge(m, src)
}
func (m *MsgNewCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewCollectionResponse proto.InternalMessageInfo

func (m *MsgNewCollectionResponse) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

//This handles both minting more of existing badges and creating new badges.
type MsgMintBadge struct {
	Creator      string                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64                  `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	BadgeSupplys []*BadgeSupplyAndAmount `protobuf:"bytes,3,rep,name=badgeSupplys,proto3" json:"badgeSupplys,omitempty"`
	Transfers    []*Transfers            `protobuf:"bytes,4,rep,name=transfers,proto3" json:"transfers,omitempty"`
	Claims       []*Claim                `protobuf:"bytes,5,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (m *MsgMintBadge) Reset()         { *m = MsgMintBadge{} }
func (m *MsgMintBadge) String() string { return proto.CompactTextString(m) }
func (*MsgMintBadge) ProtoMessage()    {}
func (*MsgMintBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{4}
}
func (m *MsgMintBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintBadge.Merge(m, src)
}
func (m *MsgMintBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintBadge proto.InternalMessageInfo

func (m *MsgMintBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMintBadge) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgMintBadge) GetBadgeSupplys() []*BadgeSupplyAndAmount {
	if m != nil {
		return m.BadgeSupplys
	}
	return nil
}

func (m *MsgMintBadge) GetTransfers() []*Transfers {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (m *MsgMintBadge) GetClaims() []*Claim {
	if m != nil {
		return m.Claims
	}
	return nil
}

type MsgMintBadgeResponse struct {
	NextBadgeId uint64 `protobuf:"varint,1,opt,name=nextBadgeId,proto3" json:"nextBadgeId,omitempty"`
}

func (m *MsgMintBadgeResponse) Reset()         { *m = MsgMintBadgeResponse{} }
func (m *MsgMintBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintBadgeResponse) ProtoMessage()    {}
func (*MsgMintBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{5}
}
func (m *MsgMintBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintBadgeResponse.Merge(m, src)
}
func (m *MsgMintBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintBadgeResponse proto.InternalMessageInfo

func (m *MsgMintBadgeResponse) GetNextBadgeId() uint64 {
	if m != nil {
		return m.NextBadgeId
	}
	return 0
}

//For each amount, for each toAddress, we will attempt to transfer all the badgeIds for the badge with ID badgeId.
type MsgTransferBadge struct {
	Creator      string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64       `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	From         uint64       `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	Transfers    []*Transfers `protobuf:"bytes,4,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (m *MsgTransferBadge) Reset()         { *m = MsgTransferBadge{} }
func (m *MsgTransferBadge) String() string { return proto.CompactTextString(m) }
func (*MsgTransferBadge) ProtoMessage()    {}
func (*MsgTransferBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{6}
}
func (m *MsgTransferBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferBadge.Merge(m, src)
}
func (m *MsgTransferBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferBadge proto.InternalMessageInfo

func (m *MsgTransferBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferBadge) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgTransferBadge) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *MsgTransferBadge) GetTransfers() []*Transfers {
	if m != nil {
		return m.Transfers
	}
	return nil
}

type MsgTransferBadgeResponse struct {
}

func (m *MsgTransferBadgeResponse) Reset()         { *m = MsgTransferBadgeResponse{} }
func (m *MsgTransferBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferBadgeResponse) ProtoMessage()    {}
func (*MsgTransferBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{7}
}
func (m *MsgTransferBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferBadgeResponse.Merge(m, src)
}
func (m *MsgTransferBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferBadgeResponse proto.InternalMessageInfo

//Sets an approval (no add or remove), just set it for an address.
type MsgSetApproval struct {
	Creator      string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64     `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Address      uint64     `protobuf:"varint,3,opt,name=address,proto3" json:"address,omitempty"`
	Balances     []*Balance `protobuf:"bytes,4,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (m *MsgSetApproval) Reset()         { *m = MsgSetApproval{} }
func (m *MsgSetApproval) String() string { return proto.CompactTextString(m) }
func (*MsgSetApproval) ProtoMessage()    {}
func (*MsgSetApproval) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{8}
}
func (m *MsgSetApproval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetApproval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetApproval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetApproval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetApproval.Merge(m, src)
}
func (m *MsgSetApproval) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetApproval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetApproval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetApproval proto.InternalMessageInfo

func (m *MsgSetApproval) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetApproval) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgSetApproval) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *MsgSetApproval) GetBalances() []*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type MsgSetApprovalResponse struct {
}

func (m *MsgSetApprovalResponse) Reset()         { *m = MsgSetApprovalResponse{} }
func (m *MsgSetApprovalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetApprovalResponse) ProtoMessage()    {}
func (*MsgSetApprovalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{9}
}
func (m *MsgSetApprovalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetApprovalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetApprovalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetApprovalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetApprovalResponse.Merge(m, src)
}
func (m *MsgSetApprovalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetApprovalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetApprovalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetApprovalResponse proto.InternalMessageInfo

type MsgUpdateDisallowedTransfers struct {
	Creator             string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId        uint64             `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	DisallowedTransfers []*TransferMapping `protobuf:"bytes,3,rep,name=disallowedTransfers,proto3" json:"disallowedTransfers,omitempty"`
}

func (m *MsgUpdateDisallowedTransfers) Reset()         { *m = MsgUpdateDisallowedTransfers{} }
func (m *MsgUpdateDisallowedTransfers) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDisallowedTransfers) ProtoMessage()    {}
func (*MsgUpdateDisallowedTransfers) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{10}
}
func (m *MsgUpdateDisallowedTransfers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDisallowedTransfers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDisallowedTransfers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDisallowedTransfers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDisallowedTransfers.Merge(m, src)
}
func (m *MsgUpdateDisallowedTransfers) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDisallowedTransfers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDisallowedTransfers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDisallowedTransfers proto.InternalMessageInfo

func (m *MsgUpdateDisallowedTransfers) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateDisallowedTransfers) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgUpdateDisallowedTransfers) GetDisallowedTransfers() []*TransferMapping {
	if m != nil {
		return m.DisallowedTransfers
	}
	return nil
}

type MsgUpdateDisallowedTransfersResponse struct {
}

func (m *MsgUpdateDisallowedTransfersResponse) Reset()         { *m = MsgUpdateDisallowedTransfersResponse{} }
func (m *MsgUpdateDisallowedTransfersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDisallowedTransfersResponse) ProtoMessage()    {}
func (*MsgUpdateDisallowedTransfersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{11}
}
func (m *MsgUpdateDisallowedTransfersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDisallowedTransfersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDisallowedTransfersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDisallowedTransfersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDisallowedTransfersResponse.Merge(m, src)
}
func (m *MsgUpdateDisallowedTransfersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDisallowedTransfersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDisallowedTransfersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDisallowedTransfersResponse proto.InternalMessageInfo

type MsgUpdateManagerApprovedTransfers struct {
	Creator                  string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId             uint64             `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	ManagerApprovedTransfers []*TransferMapping `protobuf:"bytes,3,rep,name=managerApprovedTransfers,proto3" json:"managerApprovedTransfers,omitempty"`
}

func (m *MsgUpdateManagerApprovedTransfers) Reset()         { *m = MsgUpdateManagerApprovedTransfers{} }
func (m *MsgUpdateManagerApprovedTransfers) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateManagerApprovedTransfers) ProtoMessage()    {}
func (*MsgUpdateManagerApprovedTransfers) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{12}
}
func (m *MsgUpdateManagerApprovedTransfers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateManagerApprovedTransfers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateManagerApprovedTransfers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateManagerApprovedTransfers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateManagerApprovedTransfers.Merge(m, src)
}
func (m *MsgUpdateManagerApprovedTransfers) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateManagerApprovedTransfers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateManagerApprovedTransfers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateManagerApprovedTransfers proto.InternalMessageInfo

func (m *MsgUpdateManagerApprovedTransfers) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateManagerApprovedTransfers) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgUpdateManagerApprovedTransfers) GetManagerApprovedTransfers() []*TransferMapping {
	if m != nil {
		return m.ManagerApprovedTransfers
	}
	return nil
}

type MsgUpdateManagerApprovedTransfersResponse struct {
}

func (m *MsgUpdateManagerApprovedTransfersResponse) Reset() {
	*m = MsgUpdateManagerApprovedTransfersResponse{}
}
func (m *MsgUpdateManagerApprovedTransfersResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateManagerApprovedTransfersResponse) ProtoMessage() {}
func (*MsgUpdateManagerApprovedTransfersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{13}
}
func (m *MsgUpdateManagerApprovedTransfersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateManagerApprovedTransfersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateManagerApprovedTransfersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateManagerApprovedTransfersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateManagerApprovedTransfersResponse.Merge(m, src)
}
func (m *MsgUpdateManagerApprovedTransfersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateManagerApprovedTransfersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateManagerApprovedTransfersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateManagerApprovedTransfersResponse proto.InternalMessageInfo

//Update badge Uris with new URI object, if permitted.
type MsgUpdateUris struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId  uint64 `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	CollectionUri string `protobuf:"bytes,3,opt,name=collectionUri,proto3" json:"collectionUri,omitempty"`
	BadgeUri      string `protobuf:"bytes,4,opt,name=badgeUri,proto3" json:"badgeUri,omitempty"`
}

func (m *MsgUpdateUris) Reset()         { *m = MsgUpdateUris{} }
func (m *MsgUpdateUris) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateUris) ProtoMessage()    {}
func (*MsgUpdateUris) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{14}
}
func (m *MsgUpdateUris) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateUris) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateUris.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateUris) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateUris.Merge(m, src)
}
func (m *MsgUpdateUris) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateUris) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateUris.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateUris proto.InternalMessageInfo

func (m *MsgUpdateUris) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateUris) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgUpdateUris) GetCollectionUri() string {
	if m != nil {
		return m.CollectionUri
	}
	return ""
}

func (m *MsgUpdateUris) GetBadgeUri() string {
	if m != nil {
		return m.BadgeUri
	}
	return ""
}

type MsgUpdateUrisResponse struct {
}

func (m *MsgUpdateUrisResponse) Reset()         { *m = MsgUpdateUrisResponse{} }
func (m *MsgUpdateUrisResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateUrisResponse) ProtoMessage()    {}
func (*MsgUpdateUrisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{15}
}
func (m *MsgUpdateUrisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateUrisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateUrisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateUrisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateUrisResponse.Merge(m, src)
}
func (m *MsgUpdateUrisResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateUrisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateUrisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateUrisResponse proto.InternalMessageInfo

//Update badge permissions with new permissions, if permitted.
type MsgUpdatePermissions struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64 `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Permissions  uint64 `protobuf:"varint,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *MsgUpdatePermissions) Reset()         { *m = MsgUpdatePermissions{} }
func (m *MsgUpdatePermissions) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePermissions) ProtoMessage()    {}
func (*MsgUpdatePermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{16}
}
func (m *MsgUpdatePermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePermissions.Merge(m, src)
}
func (m *MsgUpdatePermissions) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePermissions.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePermissions proto.InternalMessageInfo

func (m *MsgUpdatePermissions) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdatePermissions) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgUpdatePermissions) GetPermissions() uint64 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

type MsgUpdatePermissionsResponse struct {
}

func (m *MsgUpdatePermissionsResponse) Reset()         { *m = MsgUpdatePermissionsResponse{} }
func (m *MsgUpdatePermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePermissionsResponse) ProtoMessage()    {}
func (*MsgUpdatePermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{17}
}
func (m *MsgUpdatePermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePermissionsResponse.Merge(m, src)
}
func (m *MsgUpdatePermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePermissionsResponse proto.InternalMessageInfo

//Transfer manager to this address. Recipient must have made a request.
type MsgTransferManager struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64 `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Address      uint64 `protobuf:"varint,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgTransferManager) Reset()         { *m = MsgTransferManager{} }
func (m *MsgTransferManager) String() string { return proto.CompactTextString(m) }
func (*MsgTransferManager) ProtoMessage()    {}
func (*MsgTransferManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{18}
}
func (m *MsgTransferManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferManager.Merge(m, src)
}
func (m *MsgTransferManager) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferManager) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferManager.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferManager proto.InternalMessageInfo

func (m *MsgTransferManager) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferManager) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgTransferManager) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

type MsgTransferManagerResponse struct {
}

func (m *MsgTransferManagerResponse) Reset()         { *m = MsgTransferManagerResponse{} }
func (m *MsgTransferManagerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferManagerResponse) ProtoMessage()    {}
func (*MsgTransferManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{19}
}
func (m *MsgTransferManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferManagerResponse.Merge(m, src)
}
func (m *MsgTransferManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferManagerResponse proto.InternalMessageInfo

//Add / remove request for manager to be transferred.
type MsgRequestTransferManager struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64 `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	AddRequest   bool   `protobuf:"varint,3,opt,name=addRequest,proto3" json:"addRequest,omitempty"`
}

func (m *MsgRequestTransferManager) Reset()         { *m = MsgRequestTransferManager{} }
func (m *MsgRequestTransferManager) String() string { return proto.CompactTextString(m) }
func (*MsgRequestTransferManager) ProtoMessage()    {}
func (*MsgRequestTransferManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{20}
}
func (m *MsgRequestTransferManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestTransferManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestTransferManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestTransferManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestTransferManager.Merge(m, src)
}
func (m *MsgRequestTransferManager) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestTransferManager) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestTransferManager.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestTransferManager proto.InternalMessageInfo

func (m *MsgRequestTransferManager) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestTransferManager) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgRequestTransferManager) GetAddRequest() bool {
	if m != nil {
		return m.AddRequest
	}
	return false
}

type MsgRequestTransferManagerResponse struct {
}

func (m *MsgRequestTransferManagerResponse) Reset()         { *m = MsgRequestTransferManagerResponse{} }
func (m *MsgRequestTransferManagerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestTransferManagerResponse) ProtoMessage()    {}
func (*MsgRequestTransferManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{21}
}
func (m *MsgRequestTransferManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestTransferManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestTransferManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestTransferManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestTransferManagerResponse.Merge(m, src)
}
func (m *MsgRequestTransferManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestTransferManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestTransferManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestTransferManagerResponse proto.InternalMessageInfo

//Update badge bytes, if permitted
type MsgUpdateBytes struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64 `protobuf:"varint,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	NewBytes     string `protobuf:"bytes,3,opt,name=newBytes,proto3" json:"newBytes,omitempty"`
}

func (m *MsgUpdateBytes) Reset()         { *m = MsgUpdateBytes{} }
func (m *MsgUpdateBytes) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBytes) ProtoMessage()    {}
func (*MsgUpdateBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{22}
}
func (m *MsgUpdateBytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBytes.Merge(m, src)
}
func (m *MsgUpdateBytes) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBytes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBytes proto.InternalMessageInfo

func (m *MsgUpdateBytes) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateBytes) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MsgUpdateBytes) GetNewBytes() string {
	if m != nil {
		return m.NewBytes
	}
	return ""
}

type MsgUpdateBytesResponse struct {
}

func (m *MsgUpdateBytesResponse) Reset()         { *m = MsgUpdateBytesResponse{} }
func (m *MsgUpdateBytesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBytesResponse) ProtoMessage()    {}
func (*MsgUpdateBytesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{23}
}
func (m *MsgUpdateBytesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBytesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBytesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBytesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBytesResponse.Merge(m, src)
}
func (m *MsgUpdateBytesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBytesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBytesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBytesResponse proto.InternalMessageInfo

type MsgRegisterAddresses struct {
	Creator             string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AddressesToRegister []string `protobuf:"bytes,2,rep,name=addressesToRegister,proto3" json:"addressesToRegister,omitempty"`
}

func (m *MsgRegisterAddresses) Reset()         { *m = MsgRegisterAddresses{} }
func (m *MsgRegisterAddresses) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAddresses) ProtoMessage()    {}
func (*MsgRegisterAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{24}
}
func (m *MsgRegisterAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAddresses.Merge(m, src)
}
func (m *MsgRegisterAddresses) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAddresses proto.InternalMessageInfo

func (m *MsgRegisterAddresses) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterAddresses) GetAddressesToRegister() []string {
	if m != nil {
		return m.AddressesToRegister
	}
	return nil
}

type MsgRegisterAddressesResponse struct {
	RegisteredAddressNumbers *IdRange `protobuf:"bytes,1,opt,name=registeredAddressNumbers,proto3" json:"registeredAddressNumbers,omitempty"`
}

func (m *MsgRegisterAddressesResponse) Reset()         { *m = MsgRegisterAddressesResponse{} }
func (m *MsgRegisterAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAddressesResponse) ProtoMessage()    {}
func (*MsgRegisterAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{25}
}
func (m *MsgRegisterAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAddressesResponse.Merge(m, src)
}
func (m *MsgRegisterAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAddressesResponse proto.InternalMessageInfo

func (m *MsgRegisterAddressesResponse) GetRegisteredAddressNumbers() *IdRange {
	if m != nil {
		return m.RegisteredAddressNumbers
	}
	return nil
}

func init() {
	proto.RegisterType((*BadgeSupplyAndAmount)(nil), "bitbadges.bitbadgeschain.badges.BadgeSupplyAndAmount")
	proto.RegisterType((*Transfers)(nil), "bitbadges.bitbadgeschain.badges.Transfers")
	proto.RegisterType((*MsgNewCollection)(nil), "bitbadges.bitbadgeschain.badges.MsgNewCollection")
	proto.RegisterType((*MsgNewCollectionResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgNewCollectionResponse")
	proto.RegisterType((*MsgMintBadge)(nil), "bitbadges.bitbadgeschain.badges.MsgMintBadge")
	proto.RegisterType((*MsgMintBadgeResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgMintBadgeResponse")
	proto.RegisterType((*MsgTransferBadge)(nil), "bitbadges.bitbadgeschain.badges.MsgTransferBadge")
	proto.RegisterType((*MsgTransferBadgeResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgTransferBadgeResponse")
	proto.RegisterType((*MsgSetApproval)(nil), "bitbadges.bitbadgeschain.badges.MsgSetApproval")
	proto.RegisterType((*MsgSetApprovalResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgSetApprovalResponse")
	proto.RegisterType((*MsgUpdateDisallowedTransfers)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdateDisallowedTransfers")
	proto.RegisterType((*MsgUpdateDisallowedTransfersResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdateDisallowedTransfersResponse")
	proto.RegisterType((*MsgUpdateManagerApprovedTransfers)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdateManagerApprovedTransfers")
	proto.RegisterType((*MsgUpdateManagerApprovedTransfersResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdateManagerApprovedTransfersResponse")
	proto.RegisterType((*MsgUpdateUris)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdateUris")
	proto.RegisterType((*MsgUpdateUrisResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdateUrisResponse")
	proto.RegisterType((*MsgUpdatePermissions)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdatePermissions")
	proto.RegisterType((*MsgUpdatePermissionsResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdatePermissionsResponse")
	proto.RegisterType((*MsgTransferManager)(nil), "bitbadges.bitbadgeschain.badges.MsgTransferManager")
	proto.RegisterType((*MsgTransferManagerResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgTransferManagerResponse")
	proto.RegisterType((*MsgRequestTransferManager)(nil), "bitbadges.bitbadgeschain.badges.MsgRequestTransferManager")
	proto.RegisterType((*MsgRequestTransferManagerResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgRequestTransferManagerResponse")
	proto.RegisterType((*MsgUpdateBytes)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdateBytes")
	proto.RegisterType((*MsgUpdateBytesResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgUpdateBytesResponse")
	proto.RegisterType((*MsgRegisterAddresses)(nil), "bitbadges.bitbadgeschain.badges.MsgRegisterAddresses")
	proto.RegisterType((*MsgRegisterAddressesResponse)(nil), "bitbadges.bitbadgeschain.badges.MsgRegisterAddressesResponse")
}

func init() { proto.RegisterFile("badges/tx.proto", fileDescriptor_bc897b33479788c9) }

var fileDescriptor_bc897b33479788c9 = []byte{
	// 1098 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6f, 0xdc, 0x44,
	0x14, 0x8f, 0x63, 0xe7, 0x63, 0xdf, 0x26, 0x14, 0x26, 0x69, 0x70, 0xad, 0xca, 0x2c, 0xa6, 0xaa,
	0x02, 0x88, 0xdd, 0x92, 0x2a, 0x7c, 0xaa, 0x95, 0xb2, 0x2d, 0x88, 0x22, 0x5c, 0x21, 0xb7, 0x39,
	0xc0, 0x6d, 0xbc, 0x9e, 0xba, 0x46, 0x5e, 0xdb, 0xf5, 0x78, 0x9b, 0xec, 0xa1, 0x27, 0xb8, 0x70,
	0x82, 0x23, 0x57, 0xfe, 0x01, 0x04, 0xff, 0x01, 0x47, 0x6e, 0xf4, 0xc8, 0x11, 0x25, 0x77, 0xee,
	0xdc, 0x2a, 0x8f, 0xed, 0x59, 0x7b, 0xbd, 0xce, 0x7a, 0x3f, 0x7a, 0xdb, 0x79, 0x7e, 0xbf, 0xf7,
	0x7e, 0xbf, 0xd7, 0x99, 0xf7, 0x5e, 0x03, 0x97, 0x4c, 0x6c, 0xd9, 0x84, 0x76, 0xa2, 0xd3, 0x76,
	0x10, 0xfa, 0x91, 0x8f, 0xde, 0x30, 0x9d, 0x28, 0xb1, 0xb5, 0xf9, 0xaf, 0xde, 0x63, 0xec, 0x78,
	0xed, 0xe4, 0xb7, 0xb2, 0x93, 0x22, 0x42, 0xec, 0xc5, 0x4e, 0x0c, 0xa5, 0x5c, 0x4e, 0x8d, 0x26,
	0x76, 0xb1, 0xd7, 0xe3, 0xe6, 0xcc, 0xb7, 0xe7, 0x62, 0xa7, 0x9f, 0x1a, 0xb5, 0xcf, 0x61, 0xb7,
	0x1b, 0x9b, 0x1f, 0x0c, 0x82, 0xc0, 0x1d, 0x1e, 0x79, 0xd6, 0x51, 0xdf, 0x1f, 0x78, 0x11, 0xda,
	0x83, 0x75, 0xca, 0x4c, 0xb2, 0xd0, 0x12, 0xf6, 0x25, 0x23, 0x3d, 0xc5, 0x76, 0xcc, 0x3c, 0xe4,
	0xd5, 0xc4, 0x9e, 0x9c, 0x34, 0x0a, 0x8d, 0x87, 0x21, 0xf6, 0xe8, 0x23, 0x12, 0x52, 0xd4, 0x82,
	0x66, 0xe4, 0x1f, 0x59, 0x56, 0x48, 0x28, 0x25, 0x54, 0x16, 0x5a, 0xe2, 0xbe, 0x64, 0xe4, 0x4d,
	0xe8, 0x2e, 0x6c, 0x66, 0xec, 0xe4, 0xd5, 0x96, 0xb8, 0xdf, 0x3c, 0xd8, 0x6f, 0x4f, 0xd1, 0xda,
	0xee, 0x26, 0x00, 0x83, 0x23, 0xb5, 0xff, 0x25, 0x78, 0x55, 0xa7, 0xf6, 0x7d, 0x72, 0x72, 0xc7,
	0x77, 0x5d, 0xd2, 0x8b, 0x1c, 0xdf, 0x43, 0x32, 0x6c, 0xf4, 0x42, 0x82, 0x23, 0x3f, 0x64, 0xd4,
	0x1b, 0x46, 0x76, 0x44, 0xd7, 0x60, 0xbb, 0xc7, 0xfd, 0x8e, 0x43, 0x87, 0x49, 0x68, 0x18, 0x45,
	0x23, 0x52, 0x62, 0x6a, 0x96, 0x4d, 0x62, 0x07, 0x91, 0x39, 0xf0, 0x73, 0x2c, 0x2c, 0x20, 0x61,
	0xdf, 0xa1, 0xd4, 0xf1, 0x3d, 0x2a, 0x4b, 0xac, 0x04, 0x79, 0x13, 0xda, 0x85, 0x35, 0x73, 0x18,
	0x11, 0x2a, 0xaf, 0x31, 0x68, 0x72, 0x40, 0x26, 0xec, 0x58, 0x0e, 0xc5, 0xae, 0xeb, 0x9f, 0x10,
	0x8b, 0xd7, 0x49, 0x5e, 0x67, 0xca, 0x6f, 0x4c, 0x55, 0x9e, 0x21, 0x74, 0x1c, 0x04, 0x8e, 0x67,
	0x1b, 0x93, 0x82, 0x21, 0x17, 0xe4, 0x3e, 0xf6, 0xb0, 0x4d, 0xc2, 0xa3, 0x20, 0x08, 0xfd, 0xa7,
	0xf9, 0x44, 0x1b, 0x73, 0x26, 0xaa, 0x8c, 0x18, 0x57, 0x89, 0x46, 0xd8, 0xb3, 0x70, 0x68, 0xc9,
	0x9b, 0xac, 0x0c, 0xfc, 0x8c, 0xbe, 0x81, 0x2d, 0x73, 0x74, 0xa7, 0xa8, 0xdc, 0x60, 0xd9, 0x0f,
	0x6b, 0xfc, 0x03, 0x97, 0x2f, 0xa2, 0x51, 0x08, 0x85, 0xbe, 0x80, 0x46, 0xc4, 0x55, 0x01, 0x8b,
	0xfb, 0x4e, 0x6d, 0x55, 0xd4, 0x18, 0x81, 0xd1, 0x6d, 0x58, 0x4f, 0x1e, 0x82, 0xdc, 0x64, 0x61,
	0xae, 0x4f, 0x0d, 0x73, 0x27, 0x76, 0x37, 0x52, 0x94, 0x76, 0x1b, 0xe4, 0xf1, 0xab, 0x67, 0x10,
	0x1a, 0xf8, 0x1e, 0x25, 0x48, 0x83, 0xad, 0xd1, 0x9d, 0xba, 0x67, 0xa5, 0x4f, 0xa8, 0x60, 0xd3,
	0xfe, 0x58, 0x85, 0x2d, 0x9d, 0xda, 0xba, 0xe3, 0x45, 0x4c, 0xf7, 0x05, 0xf7, 0x76, 0x3c, 0xdc,
	0x6a, 0x39, 0x5c, 0xa9, 0xe6, 0xe2, 0x4b, 0xaa, 0xb9, 0xb4, 0x9c, 0x9a, 0xaf, 0xcd, 0x55, 0xf3,
	0x8f, 0x60, 0x37, 0x5f, 0x32, 0x5e, 0xef, 0x16, 0x34, 0x3d, 0x72, 0x9a, 0x18, 0x79, 0xb9, 0xf3,
	0x26, 0xed, 0x37, 0x81, 0x75, 0x8a, 0x8c, 0xd5, 0x32, 0x2a, 0x8e, 0x40, 0x7a, 0x14, 0xfa, 0x7d,
	0xd6, 0x23, 0x24, 0x83, 0xfd, 0x5e, 0x5e, 0xa9, 0x34, 0x85, 0x5d, 0xaf, 0x02, 0xdf, 0x4c, 0x6e,
	0x2c, 0xe6, 0x15, 0x9d, 0xda, 0x0f, 0x48, 0x94, 0xbc, 0x4b, 0xec, 0x2e, 0x28, 0x45, 0x86, 0x0d,
	0x9c, 0xb4, 0xe6, 0x54, 0x4d, 0x76, 0x2c, 0xf4, 0x69, 0x69, 0xee, 0x3e, 0x2d, 0xc3, 0x5e, 0x91,
	0x2f, 0x97, 0xf2, 0xa7, 0x00, 0x57, 0x75, 0x6a, 0x1f, 0x07, 0x16, 0x8e, 0xc8, 0xdd, 0x09, 0x5d,
	0x6d, 0x31, 0x61, 0x15, 0x7d, 0x57, 0x5c, 0x62, 0xdf, 0xd5, 0xae, 0xc3, 0xb5, 0x8b, 0x14, 0x70,
	0xa9, 0x7f, 0x0b, 0xf0, 0x26, 0x77, 0xd4, 0xab, 0xfa, 0xea, 0x62, 0x7a, 0x2f, 0x9a, 0x01, 0xe2,
	0xb2, 0x67, 0x80, 0xf6, 0x2e, 0xbc, 0x3d, 0x55, 0x10, 0x97, 0xff, 0x93, 0x00, 0xdb, 0xdc, 0xfb,
	0x38, 0x74, 0x16, 0x95, 0x5a, 0x1a, 0xe6, 0xe2, 0xb4, 0x61, 0x2e, 0x15, 0x87, 0xb9, 0xf6, 0x3a,
	0x5c, 0x2e, 0x10, 0xe2, 0x54, 0x9f, 0xb2, 0x36, 0x93, 0x7c, 0xf8, 0x3a, 0x37, 0xdb, 0x17, 0x23,
	0x3c, 0xb6, 0x3b, 0x88, 0xa5, 0xdd, 0x41, 0x53, 0x73, 0x6f, 0x21, 0x97, 0x97, 0xf3, 0x72, 0x01,
	0xe5, 0x7a, 0x42, 0x5a, 0xf1, 0x97, 0xf5, 0xf4, 0xb5, 0xab, 0xa0, 0x94, 0xb3, 0x71, 0x2e, 0x43,
	0xb8, 0xa2, 0x53, 0xdb, 0x20, 0x4f, 0x06, 0x84, 0x46, 0xcb, 0xa5, 0xa4, 0x02, 0x60, 0xcb, 0x4a,
	0x43, 0x33, 0x56, 0x9b, 0x46, 0xce, 0xa2, 0xbd, 0xc5, 0xde, 0xd1, 0xe4, 0xd4, 0x9c, 0xdf, 0x77,
	0xac, 0x45, 0x26, 0xb5, 0xec, 0xb2, 0x1d, 0x6c, 0x31, 0x52, 0x0a, 0x6c, 0x7a, 0xe4, 0x84, 0x45,
	0xca, 0xb6, 0xc2, 0xec, 0x9c, 0xb6, 0xb7, 0x5c, 0x2e, 0xce, 0xc2, 0x64, 0x37, 0xc9, 0x20, 0xb6,
	0x43, 0x23, 0x12, 0x8e, 0xd6, 0xdf, 0x6a, 0x2e, 0x37, 0x60, 0x07, 0x67, 0x6e, 0x0f, 0xfd, 0x0c,
	0xc9, 0x76, 0xe4, 0x86, 0x31, 0xe9, 0x93, 0xf6, 0x43, 0xd2, 0x42, 0x4b, 0x49, 0xf8, 0x74, 0xb4,
	0x40, 0x0e, 0xd3, 0x8f, 0xc4, 0x4a, 0x3f, 0xdf, 0x1f, 0xf4, 0xcd, 0xb8, 0x29, 0xc4, 0xd9, 0xeb,
	0xf4, 0xf4, 0x7b, 0x96, 0x11, 0xff, 0x0f, 0xc3, 0xa8, 0x8c, 0x74, 0xf0, 0xdf, 0x16, 0x88, 0x3a,
	0xb5, 0xd1, 0x33, 0xd8, 0x2e, 0xee, 0xe3, 0xef, 0x4f, 0x0d, 0x3e, 0xbe, 0x47, 0x29, 0x1f, 0xcf,
	0x0c, 0xe1, 0x62, 0x9f, 0x40, 0x63, 0xb4, 0x52, 0xbd, 0x57, 0x27, 0x0e, 0x77, 0x57, 0x0e, 0x67,
	0x72, 0xe7, 0x29, 0x9f, 0xc1, 0x76, 0x71, 0xaf, 0xa8, 0xa5, 0xb8, 0x00, 0xa9, 0xa7, 0x78, 0xe2,
	0x36, 0x80, 0x4e, 0xa0, 0x99, 0xdf, 0x04, 0x3a, 0x75, 0x22, 0xe5, 0x00, 0xca, 0x87, 0x33, 0x02,
	0x78, 0xe2, 0x5f, 0x05, 0xb8, 0x52, 0x3d, 0xb8, 0x6f, 0xd5, 0x09, 0x5b, 0x09, 0x57, 0x3e, 0x5b,
	0x08, 0xce, 0x39, 0xfe, 0x2e, 0x80, 0x3a, 0x65, 0xe2, 0x76, 0xeb, 0x67, 0xaa, 0x8a, 0xa1, 0x7c,
	0xb9, 0x78, 0x0c, 0x4e, 0x39, 0x02, 0xc8, 0x0d, 0xc9, 0x76, 0xfd, 0xc8, 0xb1, 0xbf, 0xf2, 0xc1,
	0x6c, 0xfe, 0x3c, 0xeb, 0x8f, 0x02, 0xbc, 0x56, 0x9e, 0x78, 0x87, 0xf5, 0xa3, 0xe5, 0x60, 0xca,
	0xad, 0xb9, 0x60, 0x9c, 0xcb, 0xf7, 0x02, 0x5c, 0x1a, 0x1f, 0x29, 0x37, 0x67, 0x79, 0x20, 0x29,
	0x48, 0xf9, 0x74, 0x0e, 0x10, 0x67, 0xf1, 0x8b, 0x00, 0x7b, 0x15, 0xf3, 0xed, 0x93, 0x3a, 0x71,
	0x27, 0x63, 0x95, 0xee, 0xfc, 0xd8, 0xfc, 0x93, 0xcf, 0x4f, 0xb6, 0x4e, 0xfd, 0x72, 0x33, 0x40,
	0xbd, 0x27, 0x3f, 0x61, 0x9e, 0xb1, 0x5b, 0x52, 0x9e, 0x66, 0x87, 0xf5, 0x24, 0x8d, 0xc1, 0xea,
	0xdd, 0x92, 0xca, 0xb1, 0xd6, 0xfd, 0xea, 0xaf, 0x33, 0x55, 0x78, 0x7e, 0xa6, 0x0a, 0xff, 0x9e,
	0xa9, 0xc2, 0xcf, 0xe7, 0xea, 0xca, 0xf3, 0x73, 0x75, 0xe5, 0x9f, 0x73, 0x75, 0xe5, 0xdb, 0x03,
	0xdb, 0x89, 0x1e, 0x0f, 0xcc, 0x76, 0xcf, 0xef, 0x77, 0x78, 0xe0, 0x4e, 0x31, 0x45, 0xe7, 0xb4,
	0x93, 0xfd, 0xb1, 0x6d, 0x18, 0x10, 0x6a, 0xae, 0xb3, 0x3f, 0x87, 0xdd, 0x7c, 0x11, 0x00, 0x00,
	0xff, 0xff, 0x5d, 0xa2, 0x67, 0xe0, 0x83, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	NewCollection(ctx context.Context, in *MsgNewCollection, opts ...grpc.CallOption) (*MsgNewCollectionResponse, error)
	MintBadge(ctx context.Context, in *MsgMintBadge, opts ...grpc.CallOption) (*MsgMintBadgeResponse, error)
	TransferBadge(ctx context.Context, in *MsgTransferBadge, opts ...grpc.CallOption) (*MsgTransferBadgeResponse, error)
	SetApproval(ctx context.Context, in *MsgSetApproval, opts ...grpc.CallOption) (*MsgSetApprovalResponse, error)
	UpdateDisallowedTransfers(ctx context.Context, in *MsgUpdateDisallowedTransfers, opts ...grpc.CallOption) (*MsgUpdateDisallowedTransfersResponse, error)
	UpdateManagerApprovedTransfers(ctx context.Context, in *MsgUpdateManagerApprovedTransfers, opts ...grpc.CallOption) (*MsgUpdateManagerApprovedTransfersResponse, error)
	UpdateUris(ctx context.Context, in *MsgUpdateUris, opts ...grpc.CallOption) (*MsgUpdateUrisResponse, error)
	UpdatePermissions(ctx context.Context, in *MsgUpdatePermissions, opts ...grpc.CallOption) (*MsgUpdatePermissionsResponse, error)
	TransferManager(ctx context.Context, in *MsgTransferManager, opts ...grpc.CallOption) (*MsgTransferManagerResponse, error)
	RequestTransferManager(ctx context.Context, in *MsgRequestTransferManager, opts ...grpc.CallOption) (*MsgRequestTransferManagerResponse, error)
	UpdateBytes(ctx context.Context, in *MsgUpdateBytes, opts ...grpc.CallOption) (*MsgUpdateBytesResponse, error)
	RegisterAddresses(ctx context.Context, in *MsgRegisterAddresses, opts ...grpc.CallOption) (*MsgRegisterAddressesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewCollection(ctx context.Context, in *MsgNewCollection, opts ...grpc.CallOption) (*MsgNewCollectionResponse, error) {
	out := new(MsgNewCollectionResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/NewCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintBadge(ctx context.Context, in *MsgMintBadge, opts ...grpc.CallOption) (*MsgMintBadgeResponse, error) {
	out := new(MsgMintBadgeResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/MintBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferBadge(ctx context.Context, in *MsgTransferBadge, opts ...grpc.CallOption) (*MsgTransferBadgeResponse, error) {
	out := new(MsgTransferBadgeResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/TransferBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetApproval(ctx context.Context, in *MsgSetApproval, opts ...grpc.CallOption) (*MsgSetApprovalResponse, error) {
	out := new(MsgSetApprovalResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/SetApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDisallowedTransfers(ctx context.Context, in *MsgUpdateDisallowedTransfers, opts ...grpc.CallOption) (*MsgUpdateDisallowedTransfersResponse, error) {
	out := new(MsgUpdateDisallowedTransfersResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/UpdateDisallowedTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateManagerApprovedTransfers(ctx context.Context, in *MsgUpdateManagerApprovedTransfers, opts ...grpc.CallOption) (*MsgUpdateManagerApprovedTransfersResponse, error) {
	out := new(MsgUpdateManagerApprovedTransfersResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/UpdateManagerApprovedTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateUris(ctx context.Context, in *MsgUpdateUris, opts ...grpc.CallOption) (*MsgUpdateUrisResponse, error) {
	out := new(MsgUpdateUrisResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/UpdateUris", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePermissions(ctx context.Context, in *MsgUpdatePermissions, opts ...grpc.CallOption) (*MsgUpdatePermissionsResponse, error) {
	out := new(MsgUpdatePermissionsResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/UpdatePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferManager(ctx context.Context, in *MsgTransferManager, opts ...grpc.CallOption) (*MsgTransferManagerResponse, error) {
	out := new(MsgTransferManagerResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/TransferManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestTransferManager(ctx context.Context, in *MsgRequestTransferManager, opts ...grpc.CallOption) (*MsgRequestTransferManagerResponse, error) {
	out := new(MsgRequestTransferManagerResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/RequestTransferManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBytes(ctx context.Context, in *MsgUpdateBytes, opts ...grpc.CallOption) (*MsgUpdateBytesResponse, error) {
	out := new(MsgUpdateBytesResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/UpdateBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterAddresses(ctx context.Context, in *MsgRegisterAddresses, opts ...grpc.CallOption) (*MsgRegisterAddressesResponse, error) {
	out := new(MsgRegisterAddressesResponse)
	err := c.cc.Invoke(ctx, "/bitbadges.bitbadgeschain.badges.Msg/RegisterAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	NewCollection(context.Context, *MsgNewCollection) (*MsgNewCollectionResponse, error)
	MintBadge(context.Context, *MsgMintBadge) (*MsgMintBadgeResponse, error)
	TransferBadge(context.Context, *MsgTransferBadge) (*MsgTransferBadgeResponse, error)
	SetApproval(context.Context, *MsgSetApproval) (*MsgSetApprovalResponse, error)
	UpdateDisallowedTransfers(context.Context, *MsgUpdateDisallowedTransfers) (*MsgUpdateDisallowedTransfersResponse, error)
	UpdateManagerApprovedTransfers(context.Context, *MsgUpdateManagerApprovedTransfers) (*MsgUpdateManagerApprovedTransfersResponse, error)
	UpdateUris(context.Context, *MsgUpdateUris) (*MsgUpdateUrisResponse, error)
	UpdatePermissions(context.Context, *MsgUpdatePermissions) (*MsgUpdatePermissionsResponse, error)
	TransferManager(context.Context, *MsgTransferManager) (*MsgTransferManagerResponse, error)
	RequestTransferManager(context.Context, *MsgRequestTransferManager) (*MsgRequestTransferManagerResponse, error)
	UpdateBytes(context.Context, *MsgUpdateBytes) (*MsgUpdateBytesResponse, error)
	RegisterAddresses(context.Context, *MsgRegisterAddresses) (*MsgRegisterAddressesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewCollection(ctx context.Context, req *MsgNewCollection) (*MsgNewCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCollection not implemented")
}
func (*UnimplementedMsgServer) MintBadge(ctx context.Context, req *MsgMintBadge) (*MsgMintBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintBadge not implemented")
}
func (*UnimplementedMsgServer) TransferBadge(ctx context.Context, req *MsgTransferBadge) (*MsgTransferBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBadge not implemented")
}
func (*UnimplementedMsgServer) SetApproval(ctx context.Context, req *MsgSetApproval) (*MsgSetApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApproval not implemented")
}
func (*UnimplementedMsgServer) UpdateDisallowedTransfers(ctx context.Context, req *MsgUpdateDisallowedTransfers) (*MsgUpdateDisallowedTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisallowedTransfers not implemented")
}
func (*UnimplementedMsgServer) UpdateManagerApprovedTransfers(ctx context.Context, req *MsgUpdateManagerApprovedTransfers) (*MsgUpdateManagerApprovedTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManagerApprovedTransfers not implemented")
}
func (*UnimplementedMsgServer) UpdateUris(ctx context.Context, req *MsgUpdateUris) (*MsgUpdateUrisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUris not implemented")
}
func (*UnimplementedMsgServer) UpdatePermissions(ctx context.Context, req *MsgUpdatePermissions) (*MsgUpdatePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissions not implemented")
}
func (*UnimplementedMsgServer) TransferManager(ctx context.Context, req *MsgTransferManager) (*MsgTransferManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferManager not implemented")
}
func (*UnimplementedMsgServer) RequestTransferManager(ctx context.Context, req *MsgRequestTransferManager) (*MsgRequestTransferManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTransferManager not implemented")
}
func (*UnimplementedMsgServer) UpdateBytes(ctx context.Context, req *MsgUpdateBytes) (*MsgUpdateBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBytes not implemented")
}
func (*UnimplementedMsgServer) RegisterAddresses(ctx context.Context, req *MsgRegisterAddresses) (*MsgRegisterAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAddresses not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/NewCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewCollection(ctx, req.(*MsgNewCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/MintBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintBadge(ctx, req.(*MsgMintBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/TransferBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferBadge(ctx, req.(*MsgTransferBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetApproval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/SetApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetApproval(ctx, req.(*MsgSetApproval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDisallowedTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDisallowedTransfers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDisallowedTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/UpdateDisallowedTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDisallowedTransfers(ctx, req.(*MsgUpdateDisallowedTransfers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateManagerApprovedTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateManagerApprovedTransfers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateManagerApprovedTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/UpdateManagerApprovedTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateManagerApprovedTransfers(ctx, req.(*MsgUpdateManagerApprovedTransfers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateUris_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateUris)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateUris(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/UpdateUris",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateUris(ctx, req.(*MsgUpdateUris))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/UpdatePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePermissions(ctx, req.(*MsgUpdatePermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/TransferManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferManager(ctx, req.(*MsgTransferManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestTransferManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestTransferManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestTransferManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/RequestTransferManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestTransferManager(ctx, req.(*MsgRequestTransferManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/UpdateBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBytes(ctx, req.(*MsgUpdateBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitbadges.bitbadgeschain.badges.Msg/RegisterAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAddresses(ctx, req.(*MsgRegisterAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitbadges.bitbadgeschain.badges.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCollection",
			Handler:    _Msg_NewCollection_Handler,
		},
		{
			MethodName: "MintBadge",
			Handler:    _Msg_MintBadge_Handler,
		},
		{
			MethodName: "TransferBadge",
			Handler:    _Msg_TransferBadge_Handler,
		},
		{
			MethodName: "SetApproval",
			Handler:    _Msg_SetApproval_Handler,
		},
		{
			MethodName: "UpdateDisallowedTransfers",
			Handler:    _Msg_UpdateDisallowedTransfers_Handler,
		},
		{
			MethodName: "UpdateManagerApprovedTransfers",
			Handler:    _Msg_UpdateManagerApprovedTransfers_Handler,
		},
		{
			MethodName: "UpdateUris",
			Handler:    _Msg_UpdateUris_Handler,
		},
		{
			MethodName: "UpdatePermissions",
			Handler:    _Msg_UpdatePermissions_Handler,
		},
		{
			MethodName: "TransferManager",
			Handler:    _Msg_TransferManager_Handler,
		},
		{
			MethodName: "RequestTransferManager",
			Handler:    _Msg_RequestTransferManager_Handler,
		},
		{
			MethodName: "UpdateBytes",
			Handler:    _Msg_UpdateBytes_Handler,
		},
		{
			MethodName: "RegisterAddresses",
			Handler:    _Msg_RegisterAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "badges/tx.proto",
}

func (m *BadgeSupplyAndAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeSupplyAndAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeSupplyAndAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Supply != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Transfers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transfers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ToAddresses) > 0 {
		dAtA2 := make([]byte, len(m.ToAddresses)*10)
		var j1 int
		for _, num := range m.ToAddresses {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.BadgeSupplys) > 0 {
		for iNdEx := len(m.BadgeSupplys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeSupplys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Standard != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Standard))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ManagerApprovedTransfers) > 0 {
		for iNdEx := len(m.ManagerApprovedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerApprovedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DisallowedTransfers) > 0 {
		for iNdEx := len(m.DisallowedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisallowedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Permissions != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BadgeUri) > 0 {
		i -= len(m.BadgeUri)
		copy(dAtA[i:], m.BadgeUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BadgeUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollectionUri) > 0 {
		i -= len(m.CollectionUri)
		copy(dAtA[i:], m.CollectionUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BadgeSupplys) > 0 {
		for iNdEx := len(m.BadgeSupplys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeSupplys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextBadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NextBadgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.From != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetApproval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetApproval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetApproval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Address != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Address))
		i--
		dAtA[i] = 0x18
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetApprovalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetApprovalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetApprovalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDisallowedTransfers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDisallowedTransfers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDisallowedTransfers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisallowedTransfers) > 0 {
		for iNdEx := len(m.DisallowedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisallowedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDisallowedTransfersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDisallowedTransfersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDisallowedTransfersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateManagerApprovedTransfers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateManagerApprovedTransfers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateManagerApprovedTransfers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerApprovedTransfers) > 0 {
		for iNdEx := len(m.ManagerApprovedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerApprovedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateManagerApprovedTransfersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateManagerApprovedTransfersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateManagerApprovedTransfersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateUris) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateUris) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateUris) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BadgeUri) > 0 {
		i -= len(m.BadgeUri)
		copy(dAtA[i:], m.BadgeUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BadgeUri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionUri) > 0 {
		i -= len(m.CollectionUri)
		copy(dAtA[i:], m.CollectionUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionUri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateUrisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateUrisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateUrisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x18
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Address))
		i--
		dAtA[i] = 0x18
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestTransferManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestTransferManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestTransferManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddRequest {
		i--
		if m.AddRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestTransferManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestTransferManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestTransferManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewBytes) > 0 {
		i -= len(m.NewBytes)
		copy(dAtA[i:], m.NewBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CollectionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBytesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBytesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBytesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddressesToRegister) > 0 {
		for iNdEx := len(m.AddressesToRegister) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddressesToRegister[iNdEx])
			copy(dAtA[i:], m.AddressesToRegister[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AddressesToRegister[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegisteredAddressNumbers != nil {
		{
			size, err := m.RegisteredAddressNumbers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BadgeSupplyAndAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Supply != 0 {
		n += 1 + sovTx(uint64(m.Supply))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *Transfers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ToAddresses) > 0 {
		l = 0
		for _, e := range m.ToAddresses {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgNewCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BadgeUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Permissions != 0 {
		n += 1 + sovTx(uint64(m.Permissions))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DisallowedTransfers) > 0 {
		for _, e := range m.DisallowedTransfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ManagerApprovedTransfers) > 0 {
		for _, e := range m.ManagerApprovedTransfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Standard != 0 {
		n += 1 + sovTx(uint64(m.Standard))
	}
	if len(m.BadgeSupplys) > 0 {
		for _, e := range m.BadgeSupplys {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgNewCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	return n
}

func (m *MsgMintBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	if len(m.BadgeSupplys) > 0 {
		for _, e := range m.BadgeSupplys {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMintBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextBadgeId != 0 {
		n += 1 + sovTx(uint64(m.NextBadgeId))
	}
	return n
}

func (m *MsgTransferBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	if m.From != 0 {
		n += 1 + sovTx(uint64(m.From))
	}
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransferBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetApproval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	if m.Address != 0 {
		n += 1 + sovTx(uint64(m.Address))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetApprovalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDisallowedTransfers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	if len(m.DisallowedTransfers) > 0 {
		for _, e := range m.DisallowedTransfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateDisallowedTransfersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateManagerApprovedTransfers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	if len(m.ManagerApprovedTransfers) > 0 {
		for _, e := range m.ManagerApprovedTransfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateManagerApprovedTransfersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateUris) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	l = len(m.CollectionUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BadgeUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateUrisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	if m.Permissions != 0 {
		n += 1 + sovTx(uint64(m.Permissions))
	}
	return n
}

func (m *MsgUpdatePermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	if m.Address != 0 {
		n += 1 + sovTx(uint64(m.Address))
	}
	return n
}

func (m *MsgTransferManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestTransferManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	if m.AddRequest {
		n += 2
	}
	return n
}

func (m *MsgRequestTransferManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTx(uint64(m.CollectionId))
	}
	l = len(m.NewBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateBytesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.AddressesToRegister) > 0 {
		for _, s := range m.AddressesToRegister {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRegisterAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisteredAddressNumbers != nil {
		l = m.RegisteredAddressNumbers.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BadgeSupplyAndAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeSupplyAndAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeSupplyAndAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transfers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ToAddresses = append(m.ToAddresses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ToAddresses) == 0 {
					m.ToAddresses = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ToAddresses = append(m.ToAddresses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddresses", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisallowedTransfers = append(m.DisallowedTransfers, &TransferMapping{})
			if err := m.DisallowedTransfers[len(m.DisallowedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerApprovedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerApprovedTransfers = append(m.ManagerApprovedTransfers, &TransferMapping{})
			if err := m.ManagerApprovedTransfers[len(m.ManagerApprovedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			m.Standard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Standard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeSupplys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeSupplys = append(m.BadgeSupplys, &BadgeSupplyAndAmount{})
			if err := m.BadgeSupplys[len(m.BadgeSupplys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &Transfers{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, &Claim{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeSupplys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeSupplys = append(m.BadgeSupplys, &BadgeSupplyAndAmount{})
			if err := m.BadgeSupplys[len(m.BadgeSupplys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &Transfers{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, &Claim{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBadgeId", wireType)
			}
			m.NextBadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextBadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &Transfers{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetApproval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetApproval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetApproval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetApprovalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetApprovalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetApprovalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDisallowedTransfers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDisallowedTransfers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDisallowedTransfers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisallowedTransfers = append(m.DisallowedTransfers, &TransferMapping{})
			if err := m.DisallowedTransfers[len(m.DisallowedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDisallowedTransfersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDisallowedTransfersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDisallowedTransfersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateManagerApprovedTransfers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateManagerApprovedTransfers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateManagerApprovedTransfers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerApprovedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerApprovedTransfers = append(m.ManagerApprovedTransfers, &TransferMapping{})
			if err := m.ManagerApprovedTransfers[len(m.ManagerApprovedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateManagerApprovedTransfersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateManagerApprovedTransfersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateManagerApprovedTransfersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateUris) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateUris: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateUris: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateUrisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateUrisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateUrisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestTransferManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestTransferManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestTransferManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestTransferManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestTransferManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestTransferManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBytesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBytesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBytesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressesToRegister", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressesToRegister = append(m.AddressesToRegister, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredAddressNumbers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisteredAddressNumbers == nil {
				m.RegisteredAddressNumbers = &IdRange{}
			}
			if err := m.RegisteredAddressNumbers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

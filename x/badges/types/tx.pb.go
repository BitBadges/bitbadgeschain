// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgNewBadge struct {
	Creator               string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Uri                   string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	SubassetUris          string `protobuf:"bytes,3,opt,name=subassetUris,proto3" json:"subassetUris,omitempty"`
	Permissions           uint64 `protobuf:"varint,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	FreezeAddressesDigest string `protobuf:"bytes,5,opt,name=freezeAddressesDigest,proto3" json:"freezeAddressesDigest,omitempty"`
}

func (m *MsgNewBadge) Reset()         { *m = MsgNewBadge{} }
func (m *MsgNewBadge) String() string { return proto.CompactTextString(m) }
func (*MsgNewBadge) ProtoMessage()    {}
func (*MsgNewBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{0}
}
func (m *MsgNewBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBadge.Merge(m, src)
}
func (m *MsgNewBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBadge proto.InternalMessageInfo

func (m *MsgNewBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewBadge) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MsgNewBadge) GetSubassetUris() string {
	if m != nil {
		return m.SubassetUris
	}
	return ""
}

func (m *MsgNewBadge) GetPermissions() uint64 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *MsgNewBadge) GetFreezeAddressesDigest() string {
	if m != nil {
		return m.FreezeAddressesDigest
	}
	return ""
}

type MsgNewBadgeResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewBadgeResponse) Reset()         { *m = MsgNewBadgeResponse{} }
func (m *MsgNewBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewBadgeResponse) ProtoMessage()    {}
func (*MsgNewBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{1}
}
func (m *MsgNewBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBadgeResponse.Merge(m, src)
}
func (m *MsgNewBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBadgeResponse proto.InternalMessageInfo

func (m *MsgNewBadgeResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgNewSubBadge struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Supply  uint64 `protobuf:"varint,3,opt,name=supply,proto3" json:"supply,omitempty"`
}

func (m *MsgNewSubBadge) Reset()         { *m = MsgNewSubBadge{} }
func (m *MsgNewSubBadge) String() string { return proto.CompactTextString(m) }
func (*MsgNewSubBadge) ProtoMessage()    {}
func (*MsgNewSubBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{2}
}
func (m *MsgNewSubBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewSubBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewSubBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewSubBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewSubBadge.Merge(m, src)
}
func (m *MsgNewSubBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewSubBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewSubBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewSubBadge proto.InternalMessageInfo

func (m *MsgNewSubBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewSubBadge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgNewSubBadge) GetSupply() uint64 {
	if m != nil {
		return m.Supply
	}
	return 0
}

type MsgNewSubBadgeResponse struct {
	SubassetId uint64 `protobuf:"varint,1,opt,name=subassetId,proto3" json:"subassetId,omitempty"`
}

func (m *MsgNewSubBadgeResponse) Reset()         { *m = MsgNewSubBadgeResponse{} }
func (m *MsgNewSubBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewSubBadgeResponse) ProtoMessage()    {}
func (*MsgNewSubBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{3}
}
func (m *MsgNewSubBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewSubBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewSubBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewSubBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewSubBadgeResponse.Merge(m, src)
}
func (m *MsgNewSubBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewSubBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewSubBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewSubBadgeResponse proto.InternalMessageInfo

func (m *MsgNewSubBadgeResponse) GetSubassetId() uint64 {
	if m != nil {
		return m.SubassetId
	}
	return 0
}

type MsgTransferBadge struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From       uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To         uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount     uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BadgeId    uint64 `protobuf:"varint,5,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeId uint64 `protobuf:"varint,6,opt,name=subbadgeId,proto3" json:"subbadgeId,omitempty"`
}

func (m *MsgTransferBadge) Reset()         { *m = MsgTransferBadge{} }
func (m *MsgTransferBadge) String() string { return proto.CompactTextString(m) }
func (*MsgTransferBadge) ProtoMessage()    {}
func (*MsgTransferBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{4}
}
func (m *MsgTransferBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferBadge.Merge(m, src)
}
func (m *MsgTransferBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferBadge proto.InternalMessageInfo

func (m *MsgTransferBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferBadge) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *MsgTransferBadge) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *MsgTransferBadge) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgTransferBadge) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgTransferBadge) GetSubbadgeId() uint64 {
	if m != nil {
		return m.SubbadgeId
	}
	return 0
}

type MsgTransferBadgeResponse struct {
}

func (m *MsgTransferBadgeResponse) Reset()         { *m = MsgTransferBadgeResponse{} }
func (m *MsgTransferBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferBadgeResponse) ProtoMessage()    {}
func (*MsgTransferBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{5}
}
func (m *MsgTransferBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferBadgeResponse.Merge(m, src)
}
func (m *MsgTransferBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferBadgeResponse proto.InternalMessageInfo

type MsgRequestTransferBadge struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From       uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Amount     uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BadgeId    uint64 `protobuf:"varint,5,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeId uint64 `protobuf:"varint,6,opt,name=subbadgeId,proto3" json:"subbadgeId,omitempty"`
}

func (m *MsgRequestTransferBadge) Reset()         { *m = MsgRequestTransferBadge{} }
func (m *MsgRequestTransferBadge) String() string { return proto.CompactTextString(m) }
func (*MsgRequestTransferBadge) ProtoMessage()    {}
func (*MsgRequestTransferBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{6}
}
func (m *MsgRequestTransferBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestTransferBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestTransferBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestTransferBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestTransferBadge.Merge(m, src)
}
func (m *MsgRequestTransferBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestTransferBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestTransferBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestTransferBadge proto.InternalMessageInfo

func (m *MsgRequestTransferBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestTransferBadge) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *MsgRequestTransferBadge) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgRequestTransferBadge) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgRequestTransferBadge) GetSubbadgeId() uint64 {
	if m != nil {
		return m.SubbadgeId
	}
	return 0
}

type MsgRequestTransferBadgeResponse struct {
}

func (m *MsgRequestTransferBadgeResponse) Reset()         { *m = MsgRequestTransferBadgeResponse{} }
func (m *MsgRequestTransferBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestTransferBadgeResponse) ProtoMessage()    {}
func (*MsgRequestTransferBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{7}
}
func (m *MsgRequestTransferBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestTransferBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestTransferBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestTransferBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestTransferBadgeResponse.Merge(m, src)
}
func (m *MsgRequestTransferBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestTransferBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestTransferBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestTransferBadgeResponse proto.InternalMessageInfo

type MsgHandlePendingTransfer struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Accept     bool   `protobuf:"varint,2,opt,name=accept,proto3" json:"accept,omitempty"`
	BadgeId    uint64 `protobuf:"varint,3,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeId uint64 `protobuf:"varint,4,opt,name=subbadgeId,proto3" json:"subbadgeId,omitempty"`
	ThisNonce  uint64 `protobuf:"varint,5,opt,name=this_nonce,json=thisNonce,proto3" json:"this_nonce,omitempty"`
}

func (m *MsgHandlePendingTransfer) Reset()         { *m = MsgHandlePendingTransfer{} }
func (m *MsgHandlePendingTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgHandlePendingTransfer) ProtoMessage()    {}
func (*MsgHandlePendingTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{8}
}
func (m *MsgHandlePendingTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHandlePendingTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHandlePendingTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHandlePendingTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHandlePendingTransfer.Merge(m, src)
}
func (m *MsgHandlePendingTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgHandlePendingTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHandlePendingTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHandlePendingTransfer proto.InternalMessageInfo

func (m *MsgHandlePendingTransfer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgHandlePendingTransfer) GetAccept() bool {
	if m != nil {
		return m.Accept
	}
	return false
}

func (m *MsgHandlePendingTransfer) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgHandlePendingTransfer) GetSubbadgeId() uint64 {
	if m != nil {
		return m.SubbadgeId
	}
	return 0
}

func (m *MsgHandlePendingTransfer) GetThisNonce() uint64 {
	if m != nil {
		return m.ThisNonce
	}
	return 0
}

type MsgHandlePendingTransferResponse struct {
}

func (m *MsgHandlePendingTransferResponse) Reset()         { *m = MsgHandlePendingTransferResponse{} }
func (m *MsgHandlePendingTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgHandlePendingTransferResponse) ProtoMessage()    {}
func (*MsgHandlePendingTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{9}
}
func (m *MsgHandlePendingTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHandlePendingTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHandlePendingTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHandlePendingTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHandlePendingTransferResponse.Merge(m, src)
}
func (m *MsgHandlePendingTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgHandlePendingTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHandlePendingTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHandlePendingTransferResponse proto.InternalMessageInfo

type MsgSetApproval struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount     uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Address    uint64 `protobuf:"varint,3,opt,name=address,proto3" json:"address,omitempty"`
	BadgeId    uint64 `protobuf:"varint,4,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeId uint64 `protobuf:"varint,5,opt,name=subbadgeId,proto3" json:"subbadgeId,omitempty"`
}

func (m *MsgSetApproval) Reset()         { *m = MsgSetApproval{} }
func (m *MsgSetApproval) String() string { return proto.CompactTextString(m) }
func (*MsgSetApproval) ProtoMessage()    {}
func (*MsgSetApproval) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{10}
}
func (m *MsgSetApproval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetApproval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetApproval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetApproval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetApproval.Merge(m, src)
}
func (m *MsgSetApproval) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetApproval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetApproval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetApproval proto.InternalMessageInfo

func (m *MsgSetApproval) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetApproval) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgSetApproval) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *MsgSetApproval) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgSetApproval) GetSubbadgeId() uint64 {
	if m != nil {
		return m.SubbadgeId
	}
	return 0
}

type MsgSetApprovalResponse struct {
}

func (m *MsgSetApprovalResponse) Reset()         { *m = MsgSetApprovalResponse{} }
func (m *MsgSetApprovalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetApprovalResponse) ProtoMessage()    {}
func (*MsgSetApprovalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{11}
}
func (m *MsgSetApprovalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetApprovalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetApprovalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetApprovalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetApprovalResponse.Merge(m, src)
}
func (m *MsgSetApprovalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetApprovalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetApprovalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetApprovalResponse proto.InternalMessageInfo

type MsgRevokeBadge struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Address    uint64 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount     uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	BadgeId    uint64 `protobuf:"varint,4,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeId uint64 `protobuf:"varint,5,opt,name=subbadgeId,proto3" json:"subbadgeId,omitempty"`
}

func (m *MsgRevokeBadge) Reset()         { *m = MsgRevokeBadge{} }
func (m *MsgRevokeBadge) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeBadge) ProtoMessage()    {}
func (*MsgRevokeBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{12}
}
func (m *MsgRevokeBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeBadge.Merge(m, src)
}
func (m *MsgRevokeBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeBadge proto.InternalMessageInfo

func (m *MsgRevokeBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRevokeBadge) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *MsgRevokeBadge) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgRevokeBadge) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgRevokeBadge) GetSubbadgeId() uint64 {
	if m != nil {
		return m.SubbadgeId
	}
	return 0
}

type MsgRevokeBadgeResponse struct {
}

func (m *MsgRevokeBadgeResponse) Reset()         { *m = MsgRevokeBadgeResponse{} }
func (m *MsgRevokeBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeBadgeResponse) ProtoMessage()    {}
func (*MsgRevokeBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{13}
}
func (m *MsgRevokeBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeBadgeResponse.Merge(m, src)
}
func (m *MsgRevokeBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeBadgeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewBadge)(nil), "trevormil.bitbadgeschain.badges.MsgNewBadge")
	proto.RegisterType((*MsgNewBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgNewBadgeResponse")
	proto.RegisterType((*MsgNewSubBadge)(nil), "trevormil.bitbadgeschain.badges.MsgNewSubBadge")
	proto.RegisterType((*MsgNewSubBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgNewSubBadgeResponse")
	proto.RegisterType((*MsgTransferBadge)(nil), "trevormil.bitbadgeschain.badges.MsgTransferBadge")
	proto.RegisterType((*MsgTransferBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgTransferBadgeResponse")
	proto.RegisterType((*MsgRequestTransferBadge)(nil), "trevormil.bitbadgeschain.badges.MsgRequestTransferBadge")
	proto.RegisterType((*MsgRequestTransferBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgRequestTransferBadgeResponse")
	proto.RegisterType((*MsgHandlePendingTransfer)(nil), "trevormil.bitbadgeschain.badges.MsgHandlePendingTransfer")
	proto.RegisterType((*MsgHandlePendingTransferResponse)(nil), "trevormil.bitbadgeschain.badges.MsgHandlePendingTransferResponse")
	proto.RegisterType((*MsgSetApproval)(nil), "trevormil.bitbadgeschain.badges.MsgSetApproval")
	proto.RegisterType((*MsgSetApprovalResponse)(nil), "trevormil.bitbadgeschain.badges.MsgSetApprovalResponse")
	proto.RegisterType((*MsgRevokeBadge)(nil), "trevormil.bitbadgeschain.badges.MsgRevokeBadge")
	proto.RegisterType((*MsgRevokeBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgRevokeBadgeResponse")
}

func init() { proto.RegisterFile("badges/tx.proto", fileDescriptor_bc897b33479788c9) }

var fileDescriptor_bc897b33479788c9 = []byte{
	// 683 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x3b, 0xbb, 0xe9, 0xaf, 0x57, 0xad, 0x25, 0xda, 0x1a, 0x16, 0x4c, 0xd7, 0x80, 0xd0,
	0x83, 0x6c, 0xb0, 0x16, 0xac, 0x37, 0x5b, 0x3c, 0x58, 0x70, 0x8b, 0xa4, 0x7a, 0xf1, 0x22, 0xd9,
	0xcd, 0x6b, 0x3a, 0xb8, 0x9b, 0x89, 0x33, 0x93, 0xfe, 0x10, 0xfc, 0x0f, 0x3c, 0x88, 0xa0, 0xe0,
	0x55, 0xf0, 0x4f, 0xf0, 0x7f, 0xf0, 0xd8, 0xa3, 0x47, 0x69, 0xff, 0x11, 0xc9, 0x6c, 0x12, 0x67,
	0xd7, 0xb4, 0x9b, 0x56, 0x6f, 0x99, 0x37, 0xf9, 0xbe, 0xf9, 0x7c, 0x27, 0xef, 0x3d, 0x02, 0xd7,
	0x3a, 0x7e, 0x10, 0xa2, 0x70, 0xe5, 0x61, 0x2b, 0xe6, 0x4c, 0x32, 0x73, 0x59, 0x72, 0xdc, 0x67,
	0xbc, 0x4f, 0x7b, 0xad, 0x0e, 0x95, 0x83, 0xdd, 0xee, 0x9e, 0x4f, 0xa3, 0xd6, 0xe0, 0xd9, 0xf9,
	0x4e, 0x60, 0xae, 0x2d, 0xc2, 0x6d, 0x3c, 0xd8, 0x4c, 0x03, 0xa6, 0x05, 0xd3, 0x5d, 0x8e, 0xbe,
	0x64, 0xdc, 0x22, 0x4d, 0xb2, 0x32, 0xeb, 0xe5, 0x4b, 0x73, 0x01, 0xea, 0x09, 0xa7, 0x56, 0x4d,
	0x45, 0xd3, 0x47, 0xd3, 0x81, 0x2b, 0x22, 0xe9, 0xf8, 0x42, 0xa0, 0x7c, 0xc1, 0xa9, 0xb0, 0xea,
	0x6a, 0x6b, 0x28, 0x66, 0x36, 0x61, 0x2e, 0x46, 0xde, 0xa7, 0x42, 0x50, 0x16, 0x09, 0xcb, 0x68,
	0x92, 0x15, 0xc3, 0xd3, 0x43, 0xe6, 0x1a, 0x2c, 0xee, 0x72, 0xc4, 0xb7, 0xb8, 0x11, 0x04, 0x1c,
	0x85, 0x40, 0xf1, 0x98, 0x86, 0x28, 0xa4, 0x35, 0xa9, 0xd2, 0x95, 0x6f, 0x3a, 0x77, 0xe0, 0xba,
	0x86, 0xed, 0xa1, 0x88, 0x59, 0x24, 0xd0, 0x9c, 0x87, 0x1a, 0x0d, 0x14, 0xb9, 0xe1, 0xd5, 0x68,
	0xe0, 0x78, 0x30, 0x3f, 0x78, 0x6d, 0x27, 0xe9, 0x8c, 0x33, 0x38, 0xd0, 0xd6, 0x72, 0xad, 0xb9,
	0x04, 0x53, 0x22, 0x89, 0xe3, 0xde, 0x91, 0x32, 0x66, 0x78, 0xd9, 0xca, 0x59, 0x87, 0xa5, 0xe1,
	0x9c, 0xc5, 0xe9, 0x36, 0x40, 0x6e, 0x7e, 0x2b, 0xa7, 0xd0, 0x22, 0xce, 0x57, 0x02, 0x0b, 0x6d,
	0x11, 0x3e, 0xe7, 0x7e, 0x24, 0x76, 0x91, 0x8f, 0x03, 0x32, 0xc1, 0xd8, 0xe5, 0xac, 0x9f, 0x21,
	0xa9, 0xe7, 0x14, 0x52, 0xb2, 0x0c, 0xa8, 0x26, 0x59, 0x0a, 0xe9, 0xf7, 0x59, 0x12, 0xc9, 0xec,
	0x6a, 0xb3, 0x55, 0x9a, 0x55, 0x7d, 0xe1, 0xad, 0x40, 0xdd, 0xa3, 0xe1, 0xe5, 0xcb, 0x0c, 0x32,
	0xdf, 0x9c, 0x2a, 0x20, 0xb3, 0x88, 0xd3, 0x00, 0x6b, 0x94, 0x31, 0x37, 0xe8, 0x7c, 0x21, 0x70,
	0xb3, 0x2d, 0x42, 0x0f, 0xdf, 0x24, 0x28, 0xe4, 0xbf, 0xf8, 0xf8, 0xff, 0xdc, 0xb7, 0x61, 0xf9,
	0x0c, 0xb4, 0x02, 0xff, 0x1b, 0x51, 0xde, 0x9e, 0xf8, 0x51, 0xd0, 0xc3, 0x67, 0x18, 0x05, 0x34,
	0x2a, 0x8c, 0x9e, 0xc3, 0x9f, 0xb2, 0x76, 0xbb, 0x18, 0x4b, 0xe5, 0x60, 0xc6, 0xcb, 0x56, 0x3a,
	0x6b, 0xfd, 0x3c, 0x56, 0x63, 0x94, 0xd5, 0xbc, 0x05, 0x20, 0xf7, 0xa8, 0x78, 0x15, 0xb1, 0xa8,
	0x8b, 0x99, 0xd1, 0xd9, 0x34, 0xb2, 0x9d, 0x06, 0x1c, 0x07, 0x9a, 0x67, 0x61, 0x16, 0x5e, 0x3e,
	0x13, 0x55, 0xda, 0x3b, 0x28, 0x37, 0xe2, 0x98, 0xb3, 0x7d, 0xbf, 0x37, 0xc6, 0xc1, 0xe0, 0xb6,
	0x6b, 0xa3, 0xb7, 0xed, 0x0f, 0x1a, 0x2b, 0x77, 0x90, 0x2d, 0x75, 0x6f, 0xc6, 0x79, 0xde, 0x26,
	0xff, 0xfa, 0x0e, 0x96, 0x6a, 0x0f, 0x8d, 0x6b, 0x14, 0xd9, 0xc3, 0x7d, 0xf6, 0x1a, 0xc7, 0x15,
	0x8d, 0x86, 0x56, 0x1b, 0x46, 0xfb, 0x63, 0xa6, 0x7e, 0x56, 0xe9, 0x5c, 0x0a, 0x59, 0xe3, 0xca,
	0x91, 0x57, 0xdf, 0x4f, 0x43, 0xbd, 0x2d, 0x42, 0x33, 0x82, 0x99, 0x62, 0x44, 0xde, 0x6d, 0x8d,
	0x19, 0xaa, 0x2d, 0x6d, 0x32, 0x35, 0xd6, 0x2e, 0xf2, 0x76, 0x31, 0x49, 0x0e, 0x60, 0x4e, 0x1f,
	0x5a, 0x6e, 0xc5, 0x24, 0xb9, 0xa0, 0xf1, 0xe0, 0x82, 0x82, 0xe2, 0xe0, 0x77, 0x70, 0x75, 0xb8,
	0xad, 0xef, 0x55, 0xc9, 0x34, 0x24, 0x69, 0x3c, 0xbc, 0xb0, 0xa4, 0x38, 0xfe, 0x23, 0x81, 0x1b,
	0xa5, 0xd3, 0x65, 0xbd, 0x4a, 0xce, 0x32, 0x65, 0xe3, 0xd1, 0x65, 0x95, 0x05, 0xd4, 0x27, 0x02,
	0x8b, 0xe5, 0x33, 0xa3, 0x92, 0xd3, 0x52, 0x69, 0x63, 0xe3, 0xd2, 0x52, 0xbd, 0x48, 0xf4, 0xf6,
	0xaf, 0x54, 0x24, 0x9a, 0xa0, 0x5a, 0x91, 0x94, 0x34, 0x72, 0x7a, 0xb0, 0xde, 0xc4, 0x6e, 0xb5,
	0x1b, 0x2e, 0x04, 0xd5, 0x0e, 0x2e, 0x69, 0xc7, 0xcd, 0xa7, 0x3f, 0x4e, 0x6c, 0x72, 0x7c, 0x62,
	0x93, 0x5f, 0x27, 0x36, 0xf9, 0x70, 0x6a, 0x4f, 0x1c, 0x9f, 0xda, 0x13, 0x3f, 0x4f, 0xed, 0x89,
	0x97, 0xab, 0x21, 0x95, 0x7b, 0x49, 0xa7, 0xd5, 0x65, 0x7d, 0xb7, 0x48, 0xee, 0x0e, 0x27, 0x77,
	0x0f, 0xdd, 0xfc, 0xff, 0xe8, 0x28, 0x46, 0xd1, 0x99, 0x52, 0xff, 0x48, 0xf7, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x97, 0xe0, 0x07, 0xd6, 0x36, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	NewBadge(ctx context.Context, in *MsgNewBadge, opts ...grpc.CallOption) (*MsgNewBadgeResponse, error)
	NewSubBadge(ctx context.Context, in *MsgNewSubBadge, opts ...grpc.CallOption) (*MsgNewSubBadgeResponse, error)
	TransferBadge(ctx context.Context, in *MsgTransferBadge, opts ...grpc.CallOption) (*MsgTransferBadgeResponse, error)
	RequestTransferBadge(ctx context.Context, in *MsgRequestTransferBadge, opts ...grpc.CallOption) (*MsgRequestTransferBadgeResponse, error)
	HandlePendingTransfer(ctx context.Context, in *MsgHandlePendingTransfer, opts ...grpc.CallOption) (*MsgHandlePendingTransferResponse, error)
	SetApproval(ctx context.Context, in *MsgSetApproval, opts ...grpc.CallOption) (*MsgSetApprovalResponse, error)
	RevokeBadge(ctx context.Context, in *MsgRevokeBadge, opts ...grpc.CallOption) (*MsgRevokeBadgeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewBadge(ctx context.Context, in *MsgNewBadge, opts ...grpc.CallOption) (*MsgNewBadgeResponse, error) {
	out := new(MsgNewBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/NewBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewSubBadge(ctx context.Context, in *MsgNewSubBadge, opts ...grpc.CallOption) (*MsgNewSubBadgeResponse, error) {
	out := new(MsgNewSubBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/NewSubBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferBadge(ctx context.Context, in *MsgTransferBadge, opts ...grpc.CallOption) (*MsgTransferBadgeResponse, error) {
	out := new(MsgTransferBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/TransferBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestTransferBadge(ctx context.Context, in *MsgRequestTransferBadge, opts ...grpc.CallOption) (*MsgRequestTransferBadgeResponse, error) {
	out := new(MsgRequestTransferBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/RequestTransferBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandlePendingTransfer(ctx context.Context, in *MsgHandlePendingTransfer, opts ...grpc.CallOption) (*MsgHandlePendingTransferResponse, error) {
	out := new(MsgHandlePendingTransferResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/HandlePendingTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetApproval(ctx context.Context, in *MsgSetApproval, opts ...grpc.CallOption) (*MsgSetApprovalResponse, error) {
	out := new(MsgSetApprovalResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/SetApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeBadge(ctx context.Context, in *MsgRevokeBadge, opts ...grpc.CallOption) (*MsgRevokeBadgeResponse, error) {
	out := new(MsgRevokeBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/RevokeBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	NewBadge(context.Context, *MsgNewBadge) (*MsgNewBadgeResponse, error)
	NewSubBadge(context.Context, *MsgNewSubBadge) (*MsgNewSubBadgeResponse, error)
	TransferBadge(context.Context, *MsgTransferBadge) (*MsgTransferBadgeResponse, error)
	RequestTransferBadge(context.Context, *MsgRequestTransferBadge) (*MsgRequestTransferBadgeResponse, error)
	HandlePendingTransfer(context.Context, *MsgHandlePendingTransfer) (*MsgHandlePendingTransferResponse, error)
	SetApproval(context.Context, *MsgSetApproval) (*MsgSetApprovalResponse, error)
	RevokeBadge(context.Context, *MsgRevokeBadge) (*MsgRevokeBadgeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewBadge(ctx context.Context, req *MsgNewBadge) (*MsgNewBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBadge not implemented")
}
func (*UnimplementedMsgServer) NewSubBadge(ctx context.Context, req *MsgNewSubBadge) (*MsgNewSubBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSubBadge not implemented")
}
func (*UnimplementedMsgServer) TransferBadge(ctx context.Context, req *MsgTransferBadge) (*MsgTransferBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBadge not implemented")
}
func (*UnimplementedMsgServer) RequestTransferBadge(ctx context.Context, req *MsgRequestTransferBadge) (*MsgRequestTransferBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTransferBadge not implemented")
}
func (*UnimplementedMsgServer) HandlePendingTransfer(ctx context.Context, req *MsgHandlePendingTransfer) (*MsgHandlePendingTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePendingTransfer not implemented")
}
func (*UnimplementedMsgServer) SetApproval(ctx context.Context, req *MsgSetApproval) (*MsgSetApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApproval not implemented")
}
func (*UnimplementedMsgServer) RevokeBadge(ctx context.Context, req *MsgRevokeBadge) (*MsgRevokeBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeBadge not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/NewBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewBadge(ctx, req.(*MsgNewBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewSubBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewSubBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewSubBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/NewSubBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewSubBadge(ctx, req.(*MsgNewSubBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/TransferBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferBadge(ctx, req.(*MsgTransferBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestTransferBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestTransferBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestTransferBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/RequestTransferBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestTransferBadge(ctx, req.(*MsgRequestTransferBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandlePendingTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHandlePendingTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandlePendingTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/HandlePendingTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandlePendingTransfer(ctx, req.(*MsgHandlePendingTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetApproval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/SetApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetApproval(ctx, req.(*MsgSetApproval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/RevokeBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeBadge(ctx, req.(*MsgRevokeBadge))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trevormil.bitbadgeschain.badges.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBadge",
			Handler:    _Msg_NewBadge_Handler,
		},
		{
			MethodName: "NewSubBadge",
			Handler:    _Msg_NewSubBadge_Handler,
		},
		{
			MethodName: "TransferBadge",
			Handler:    _Msg_TransferBadge_Handler,
		},
		{
			MethodName: "RequestTransferBadge",
			Handler:    _Msg_RequestTransferBadge_Handler,
		},
		{
			MethodName: "HandlePendingTransfer",
			Handler:    _Msg_HandlePendingTransfer_Handler,
		},
		{
			MethodName: "SetApproval",
			Handler:    _Msg_SetApproval_Handler,
		},
		{
			MethodName: "RevokeBadge",
			Handler:    _Msg_RevokeBadge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "badges/tx.proto",
}

func (m *MsgNewBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FreezeAddressesDigest) > 0 {
		i -= len(m.FreezeAddressesDigest)
		copy(dAtA[i:], m.FreezeAddressesDigest)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FreezeAddressesDigest)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Permissions != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SubassetUris) > 0 {
		i -= len(m.SubassetUris)
		copy(dAtA[i:], m.SubassetUris)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubassetUris)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewSubBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewSubBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewSubBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Supply != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewSubBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewSubBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewSubBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubassetId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubassetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubbadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubbadgeId))
		i--
		dAtA[i] = 0x30
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if m.To != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestTransferBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestTransferBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestTransferBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubbadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubbadgeId))
		i--
		dAtA[i] = 0x30
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if m.From != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestTransferBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestTransferBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestTransferBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgHandlePendingTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHandlePendingTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHandlePendingTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThisNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ThisNonce))
		i--
		dAtA[i] = 0x28
	}
	if m.SubbadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubbadgeId))
		i--
		dAtA[i] = 0x20
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x18
	}
	if m.Accept {
		i--
		if m.Accept {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgHandlePendingTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHandlePendingTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHandlePendingTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetApproval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetApproval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetApproval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubbadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubbadgeId))
		i--
		dAtA[i] = 0x28
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x20
	}
	if m.Address != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Address))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetApprovalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetApprovalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetApprovalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevokeBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubbadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubbadgeId))
		i--
		dAtA[i] = 0x28
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Address != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Address))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubassetUris)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Permissions != 0 {
		n += 1 + sovTx(uint64(m.Permissions))
	}
	l = len(m.FreezeAddressesDigest)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgNewSubBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.Supply != 0 {
		n += 1 + sovTx(uint64(m.Supply))
	}
	return n
}

func (m *MsgNewSubBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubassetId != 0 {
		n += 1 + sovTx(uint64(m.SubassetId))
	}
	return n
}

func (m *MsgTransferBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovTx(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovTx(uint64(m.To))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.SubbadgeId != 0 {
		n += 1 + sovTx(uint64(m.SubbadgeId))
	}
	return n
}

func (m *MsgTransferBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestTransferBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovTx(uint64(m.From))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.SubbadgeId != 0 {
		n += 1 + sovTx(uint64(m.SubbadgeId))
	}
	return n
}

func (m *MsgRequestTransferBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgHandlePendingTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Accept {
		n += 2
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.SubbadgeId != 0 {
		n += 1 + sovTx(uint64(m.SubbadgeId))
	}
	if m.ThisNonce != 0 {
		n += 1 + sovTx(uint64(m.ThisNonce))
	}
	return n
}

func (m *MsgHandlePendingTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetApproval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.Address != 0 {
		n += 1 + sovTx(uint64(m.Address))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.SubbadgeId != 0 {
		n += 1 + sovTx(uint64(m.SubbadgeId))
	}
	return n
}

func (m *MsgSetApprovalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevokeBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Address != 0 {
		n += 1 + sovTx(uint64(m.Address))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.SubbadgeId != 0 {
		n += 1 + sovTx(uint64(m.SubbadgeId))
	}
	return n
}

func (m *MsgRevokeBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubassetUris", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubassetUris = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeAddressesDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreezeAddressesDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewSubBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewSubBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewSubBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewSubBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewSubBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewSubBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubassetId", wireType)
			}
			m.SubassetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubassetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeId", wireType)
			}
			m.SubbadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubbadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestTransferBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestTransferBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestTransferBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeId", wireType)
			}
			m.SubbadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubbadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestTransferBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestTransferBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestTransferBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHandlePendingTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHandlePendingTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHandlePendingTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accept", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accept = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeId", wireType)
			}
			m.SubbadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubbadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisNonce", wireType)
			}
			m.ThisNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThisNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHandlePendingTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHandlePendingTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHandlePendingTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetApproval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetApproval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetApproval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeId", wireType)
			}
			m.SubbadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubbadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetApprovalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetApprovalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetApprovalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeId", wireType)
			}
			m.SubbadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubbadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

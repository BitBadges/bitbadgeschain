// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgNewBadge struct {
	// See badges.proto for more details about these MsgNewBadge fields. Defines the badge details. Leave unneeded fields empty.
	Creator               string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Uri                   *UriObject `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Permissions           uint64     `protobuf:"varint,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	ArbitraryBytes        []byte     `protobuf:"bytes,5,opt,name=arbitraryBytes,proto3" json:"arbitraryBytes,omitempty"`
	DefaultSubassetSupply uint64     `protobuf:"varint,6,opt,name=defaultSubassetSupply,proto3" json:"defaultSubassetSupply,omitempty"`
	FreezeAddressRanges   []*IdRange `protobuf:"bytes,9,rep,name=freezeAddressRanges,proto3" json:"freezeAddressRanges,omitempty"`
	Standard              uint64     `protobuf:"varint,10,opt,name=standard,proto3" json:"standard,omitempty"`
	//Subasset supplys and amounts to create must be same length. For each idx, we create amounts[idx] subbadges each with a supply of supplys[idx].
	//If supply[idx] == 0, we assume default supply. amountsToCreate[idx] can't equal 0.
	SubassetSupplys         []uint64 `protobuf:"varint,7,rep,packed,name=subassetSupplys,proto3" json:"subassetSupplys,omitempty"`
	SubassetAmountsToCreate []uint64 `protobuf:"varint,8,rep,packed,name=subassetAmountsToCreate,proto3" json:"subassetAmountsToCreate,omitempty"`
}

func (m *MsgNewBadge) Reset()         { *m = MsgNewBadge{} }
func (m *MsgNewBadge) String() string { return proto.CompactTextString(m) }
func (*MsgNewBadge) ProtoMessage()    {}
func (*MsgNewBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{0}
}
func (m *MsgNewBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBadge.Merge(m, src)
}
func (m *MsgNewBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBadge proto.InternalMessageInfo

func (m *MsgNewBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewBadge) GetUri() *UriObject {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *MsgNewBadge) GetPermissions() uint64 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *MsgNewBadge) GetArbitraryBytes() []byte {
	if m != nil {
		return m.ArbitraryBytes
	}
	return nil
}

func (m *MsgNewBadge) GetDefaultSubassetSupply() uint64 {
	if m != nil {
		return m.DefaultSubassetSupply
	}
	return 0
}

func (m *MsgNewBadge) GetFreezeAddressRanges() []*IdRange {
	if m != nil {
		return m.FreezeAddressRanges
	}
	return nil
}

func (m *MsgNewBadge) GetStandard() uint64 {
	if m != nil {
		return m.Standard
	}
	return 0
}

func (m *MsgNewBadge) GetSubassetSupplys() []uint64 {
	if m != nil {
		return m.SubassetSupplys
	}
	return nil
}

func (m *MsgNewBadge) GetSubassetAmountsToCreate() []uint64 {
	if m != nil {
		return m.SubassetAmountsToCreate
	}
	return nil
}

type MsgNewBadgeResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewBadgeResponse) Reset()         { *m = MsgNewBadgeResponse{} }
func (m *MsgNewBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewBadgeResponse) ProtoMessage()    {}
func (*MsgNewBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{1}
}
func (m *MsgNewBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBadgeResponse.Merge(m, src)
}
func (m *MsgNewBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBadgeResponse proto.InternalMessageInfo

func (m *MsgNewBadgeResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgNewSubBadge struct {
	Creator         string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id              uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Supplys         []uint64 `protobuf:"varint,3,rep,packed,name=supplys,proto3" json:"supplys,omitempty"`
	AmountsToCreate []uint64 `protobuf:"varint,4,rep,packed,name=amountsToCreate,proto3" json:"amountsToCreate,omitempty"`
}

func (m *MsgNewSubBadge) Reset()         { *m = MsgNewSubBadge{} }
func (m *MsgNewSubBadge) String() string { return proto.CompactTextString(m) }
func (*MsgNewSubBadge) ProtoMessage()    {}
func (*MsgNewSubBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{2}
}
func (m *MsgNewSubBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewSubBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewSubBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewSubBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewSubBadge.Merge(m, src)
}
func (m *MsgNewSubBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewSubBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewSubBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewSubBadge proto.InternalMessageInfo

func (m *MsgNewSubBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewSubBadge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgNewSubBadge) GetSupplys() []uint64 {
	if m != nil {
		return m.Supplys
	}
	return nil
}

func (m *MsgNewSubBadge) GetAmountsToCreate() []uint64 {
	if m != nil {
		return m.AmountsToCreate
	}
	return nil
}

type MsgNewSubBadgeResponse struct {
	SubassetId uint64 `protobuf:"varint,1,opt,name=subassetId,proto3" json:"subassetId,omitempty"`
}

func (m *MsgNewSubBadgeResponse) Reset()         { *m = MsgNewSubBadgeResponse{} }
func (m *MsgNewSubBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewSubBadgeResponse) ProtoMessage()    {}
func (*MsgNewSubBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{3}
}
func (m *MsgNewSubBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewSubBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewSubBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewSubBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewSubBadgeResponse.Merge(m, src)
}
func (m *MsgNewSubBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewSubBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewSubBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewSubBadgeResponse proto.InternalMessageInfo

func (m *MsgNewSubBadgeResponse) GetSubassetId() uint64 {
	if m != nil {
		return m.SubassetId
	}
	return 0
}

type MsgTransferBadge struct {
	Creator              string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From                 uint64     `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	ToAddresses          []uint64   `protobuf:"varint,3,rep,packed,name=toAddresses,proto3" json:"toAddresses,omitempty"`
	Amounts              []uint64   `protobuf:"varint,4,rep,packed,name=amounts,proto3" json:"amounts,omitempty"`
	BadgeId              uint64     `protobuf:"varint,5,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeRanges       []*IdRange `protobuf:"bytes,6,rep,name=subbadgeRanges,proto3" json:"subbadgeRanges,omitempty"`
	ExpirationTime       uint64     `protobuf:"varint,7,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	CantCancelBeforeTime uint64     `protobuf:"varint,8,opt,name=cantCancelBeforeTime,proto3" json:"cantCancelBeforeTime,omitempty"`
}

func (m *MsgTransferBadge) Reset()         { *m = MsgTransferBadge{} }
func (m *MsgTransferBadge) String() string { return proto.CompactTextString(m) }
func (*MsgTransferBadge) ProtoMessage()    {}
func (*MsgTransferBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{4}
}
func (m *MsgTransferBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferBadge.Merge(m, src)
}
func (m *MsgTransferBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferBadge proto.InternalMessageInfo

func (m *MsgTransferBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferBadge) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *MsgTransferBadge) GetToAddresses() []uint64 {
	if m != nil {
		return m.ToAddresses
	}
	return nil
}

func (m *MsgTransferBadge) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *MsgTransferBadge) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgTransferBadge) GetSubbadgeRanges() []*IdRange {
	if m != nil {
		return m.SubbadgeRanges
	}
	return nil
}

func (m *MsgTransferBadge) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

func (m *MsgTransferBadge) GetCantCancelBeforeTime() uint64 {
	if m != nil {
		return m.CantCancelBeforeTime
	}
	return 0
}

type MsgTransferBadgeResponse struct {
}

func (m *MsgTransferBadgeResponse) Reset()         { *m = MsgTransferBadgeResponse{} }
func (m *MsgTransferBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferBadgeResponse) ProtoMessage()    {}
func (*MsgTransferBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{5}
}
func (m *MsgTransferBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferBadgeResponse.Merge(m, src)
}
func (m *MsgTransferBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferBadgeResponse proto.InternalMessageInfo

type MsgRequestTransferBadge struct {
	Creator              string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From                 uint64     `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Amount               uint64     `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BadgeId              uint64     `protobuf:"varint,5,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeRanges       []*IdRange `protobuf:"bytes,6,rep,name=subbadgeRanges,proto3" json:"subbadgeRanges,omitempty"`
	ExpirationTime       uint64     `protobuf:"varint,7,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	CantCancelBeforeTime uint64     `protobuf:"varint,8,opt,name=cantCancelBeforeTime,proto3" json:"cantCancelBeforeTime,omitempty"`
}

func (m *MsgRequestTransferBadge) Reset()         { *m = MsgRequestTransferBadge{} }
func (m *MsgRequestTransferBadge) String() string { return proto.CompactTextString(m) }
func (*MsgRequestTransferBadge) ProtoMessage()    {}
func (*MsgRequestTransferBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{6}
}
func (m *MsgRequestTransferBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestTransferBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestTransferBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestTransferBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestTransferBadge.Merge(m, src)
}
func (m *MsgRequestTransferBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestTransferBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestTransferBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestTransferBadge proto.InternalMessageInfo

func (m *MsgRequestTransferBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestTransferBadge) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *MsgRequestTransferBadge) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgRequestTransferBadge) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgRequestTransferBadge) GetSubbadgeRanges() []*IdRange {
	if m != nil {
		return m.SubbadgeRanges
	}
	return nil
}

func (m *MsgRequestTransferBadge) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

func (m *MsgRequestTransferBadge) GetCantCancelBeforeTime() uint64 {
	if m != nil {
		return m.CantCancelBeforeTime
	}
	return 0
}

type MsgRequestTransferBadgeResponse struct {
}

func (m *MsgRequestTransferBadgeResponse) Reset()         { *m = MsgRequestTransferBadgeResponse{} }
func (m *MsgRequestTransferBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestTransferBadgeResponse) ProtoMessage()    {}
func (*MsgRequestTransferBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{7}
}
func (m *MsgRequestTransferBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestTransferBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestTransferBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestTransferBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestTransferBadgeResponse.Merge(m, src)
}
func (m *MsgRequestTransferBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestTransferBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestTransferBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestTransferBadgeResponse proto.InternalMessageInfo

type MsgHandlePendingTransfer struct {
	Creator        string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Accept         bool       `protobuf:"varint,2,opt,name=accept,proto3" json:"accept,omitempty"`
	BadgeId        uint64     `protobuf:"varint,3,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	NonceRanges    []*IdRange `protobuf:"bytes,4,rep,name=nonceRanges,proto3" json:"nonceRanges,omitempty"`
	ForcefulAccept bool       `protobuf:"varint,5,opt,name=forcefulAccept,proto3" json:"forcefulAccept,omitempty"`
}

func (m *MsgHandlePendingTransfer) Reset()         { *m = MsgHandlePendingTransfer{} }
func (m *MsgHandlePendingTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgHandlePendingTransfer) ProtoMessage()    {}
func (*MsgHandlePendingTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{8}
}
func (m *MsgHandlePendingTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHandlePendingTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHandlePendingTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHandlePendingTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHandlePendingTransfer.Merge(m, src)
}
func (m *MsgHandlePendingTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgHandlePendingTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHandlePendingTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHandlePendingTransfer proto.InternalMessageInfo

func (m *MsgHandlePendingTransfer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgHandlePendingTransfer) GetAccept() bool {
	if m != nil {
		return m.Accept
	}
	return false
}

func (m *MsgHandlePendingTransfer) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgHandlePendingTransfer) GetNonceRanges() []*IdRange {
	if m != nil {
		return m.NonceRanges
	}
	return nil
}

func (m *MsgHandlePendingTransfer) GetForcefulAccept() bool {
	if m != nil {
		return m.ForcefulAccept
	}
	return false
}

type MsgHandlePendingTransferResponse struct {
}

func (m *MsgHandlePendingTransferResponse) Reset()         { *m = MsgHandlePendingTransferResponse{} }
func (m *MsgHandlePendingTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgHandlePendingTransferResponse) ProtoMessage()    {}
func (*MsgHandlePendingTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{9}
}
func (m *MsgHandlePendingTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHandlePendingTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHandlePendingTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHandlePendingTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHandlePendingTransferResponse.Merge(m, src)
}
func (m *MsgHandlePendingTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgHandlePendingTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHandlePendingTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHandlePendingTransferResponse proto.InternalMessageInfo

type MsgSetApproval struct {
	Creator        string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount         uint64     `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Address        uint64     `protobuf:"varint,3,opt,name=address,proto3" json:"address,omitempty"`
	BadgeId        uint64     `protobuf:"varint,4,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeRanges []*IdRange `protobuf:"bytes,5,rep,name=subbadgeRanges,proto3" json:"subbadgeRanges,omitempty"`
	ExpirationTime uint64     `protobuf:"varint,6,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
}

func (m *MsgSetApproval) Reset()         { *m = MsgSetApproval{} }
func (m *MsgSetApproval) String() string { return proto.CompactTextString(m) }
func (*MsgSetApproval) ProtoMessage()    {}
func (*MsgSetApproval) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{10}
}
func (m *MsgSetApproval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetApproval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetApproval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetApproval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetApproval.Merge(m, src)
}
func (m *MsgSetApproval) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetApproval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetApproval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetApproval proto.InternalMessageInfo

func (m *MsgSetApproval) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetApproval) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgSetApproval) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *MsgSetApproval) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgSetApproval) GetSubbadgeRanges() []*IdRange {
	if m != nil {
		return m.SubbadgeRanges
	}
	return nil
}

func (m *MsgSetApproval) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

type MsgSetApprovalResponse struct {
}

func (m *MsgSetApprovalResponse) Reset()         { *m = MsgSetApprovalResponse{} }
func (m *MsgSetApprovalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetApprovalResponse) ProtoMessage()    {}
func (*MsgSetApprovalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{11}
}
func (m *MsgSetApprovalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetApprovalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetApprovalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetApprovalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetApprovalResponse.Merge(m, src)
}
func (m *MsgSetApprovalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetApprovalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetApprovalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetApprovalResponse proto.InternalMessageInfo

type MsgRevokeBadge struct {
	Creator        string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Addresses      []uint64   `protobuf:"varint,2,rep,packed,name=addresses,proto3" json:"addresses,omitempty"`
	Amounts        []uint64   `protobuf:"varint,3,rep,packed,name=amounts,proto3" json:"amounts,omitempty"`
	BadgeId        uint64     `protobuf:"varint,4,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	SubbadgeRanges []*IdRange `protobuf:"bytes,5,rep,name=subbadgeRanges,proto3" json:"subbadgeRanges,omitempty"`
}

func (m *MsgRevokeBadge) Reset()         { *m = MsgRevokeBadge{} }
func (m *MsgRevokeBadge) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeBadge) ProtoMessage()    {}
func (*MsgRevokeBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{12}
}
func (m *MsgRevokeBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeBadge.Merge(m, src)
}
func (m *MsgRevokeBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeBadge proto.InternalMessageInfo

func (m *MsgRevokeBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRevokeBadge) GetAddresses() []uint64 {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *MsgRevokeBadge) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *MsgRevokeBadge) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgRevokeBadge) GetSubbadgeRanges() []*IdRange {
	if m != nil {
		return m.SubbadgeRanges
	}
	return nil
}

type MsgRevokeBadgeResponse struct {
}

func (m *MsgRevokeBadgeResponse) Reset()         { *m = MsgRevokeBadgeResponse{} }
func (m *MsgRevokeBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeBadgeResponse) ProtoMessage()    {}
func (*MsgRevokeBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{13}
}
func (m *MsgRevokeBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeBadgeResponse.Merge(m, src)
}
func (m *MsgRevokeBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeBadgeResponse proto.InternalMessageInfo

type MsgFreezeAddress struct {
	Creator       string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AddressRanges []*IdRange `protobuf:"bytes,2,rep,name=addressRanges,proto3" json:"addressRanges,omitempty"`
	BadgeId       uint64     `protobuf:"varint,3,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	Add           bool       `protobuf:"varint,4,opt,name=add,proto3" json:"add,omitempty"`
}

func (m *MsgFreezeAddress) Reset()         { *m = MsgFreezeAddress{} }
func (m *MsgFreezeAddress) String() string { return proto.CompactTextString(m) }
func (*MsgFreezeAddress) ProtoMessage()    {}
func (*MsgFreezeAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{14}
}
func (m *MsgFreezeAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFreezeAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFreezeAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFreezeAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFreezeAddress.Merge(m, src)
}
func (m *MsgFreezeAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgFreezeAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFreezeAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFreezeAddress proto.InternalMessageInfo

func (m *MsgFreezeAddress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFreezeAddress) GetAddressRanges() []*IdRange {
	if m != nil {
		return m.AddressRanges
	}
	return nil
}

func (m *MsgFreezeAddress) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgFreezeAddress) GetAdd() bool {
	if m != nil {
		return m.Add
	}
	return false
}

type MsgFreezeAddressResponse struct {
}

func (m *MsgFreezeAddressResponse) Reset()         { *m = MsgFreezeAddressResponse{} }
func (m *MsgFreezeAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFreezeAddressResponse) ProtoMessage()    {}
func (*MsgFreezeAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{15}
}
func (m *MsgFreezeAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFreezeAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFreezeAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFreezeAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFreezeAddressResponse.Merge(m, src)
}
func (m *MsgFreezeAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFreezeAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFreezeAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFreezeAddressResponse proto.InternalMessageInfo

type MsgUpdateUris struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BadgeId uint64     `protobuf:"varint,2,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	Uri     *UriObject `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *MsgUpdateUris) Reset()         { *m = MsgUpdateUris{} }
func (m *MsgUpdateUris) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateUris) ProtoMessage()    {}
func (*MsgUpdateUris) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{16}
}
func (m *MsgUpdateUris) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateUris) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateUris.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateUris) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateUris.Merge(m, src)
}
func (m *MsgUpdateUris) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateUris) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateUris.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateUris proto.InternalMessageInfo

func (m *MsgUpdateUris) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateUris) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgUpdateUris) GetUri() *UriObject {
	if m != nil {
		return m.Uri
	}
	return nil
}

type MsgUpdateUrisResponse struct {
}

func (m *MsgUpdateUrisResponse) Reset()         { *m = MsgUpdateUrisResponse{} }
func (m *MsgUpdateUrisResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateUrisResponse) ProtoMessage()    {}
func (*MsgUpdateUrisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{17}
}
func (m *MsgUpdateUrisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateUrisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateUrisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateUrisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateUrisResponse.Merge(m, src)
}
func (m *MsgUpdateUrisResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateUrisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateUrisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateUrisResponse proto.InternalMessageInfo

type MsgUpdatePermissions struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BadgeId     uint64 `protobuf:"varint,2,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	Permissions uint64 `protobuf:"varint,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *MsgUpdatePermissions) Reset()         { *m = MsgUpdatePermissions{} }
func (m *MsgUpdatePermissions) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePermissions) ProtoMessage()    {}
func (*MsgUpdatePermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{18}
}
func (m *MsgUpdatePermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePermissions.Merge(m, src)
}
func (m *MsgUpdatePermissions) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePermissions.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePermissions proto.InternalMessageInfo

func (m *MsgUpdatePermissions) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdatePermissions) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgUpdatePermissions) GetPermissions() uint64 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

type MsgUpdatePermissionsResponse struct {
}

func (m *MsgUpdatePermissionsResponse) Reset()         { *m = MsgUpdatePermissionsResponse{} }
func (m *MsgUpdatePermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePermissionsResponse) ProtoMessage()    {}
func (*MsgUpdatePermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{19}
}
func (m *MsgUpdatePermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePermissionsResponse.Merge(m, src)
}
func (m *MsgUpdatePermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePermissionsResponse proto.InternalMessageInfo

type MsgTransferManager struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BadgeId uint64 `protobuf:"varint,2,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	Address uint64 `protobuf:"varint,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgTransferManager) Reset()         { *m = MsgTransferManager{} }
func (m *MsgTransferManager) String() string { return proto.CompactTextString(m) }
func (*MsgTransferManager) ProtoMessage()    {}
func (*MsgTransferManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{20}
}
func (m *MsgTransferManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferManager.Merge(m, src)
}
func (m *MsgTransferManager) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferManager) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferManager.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferManager proto.InternalMessageInfo

func (m *MsgTransferManager) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferManager) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgTransferManager) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

type MsgTransferManagerResponse struct {
}

func (m *MsgTransferManagerResponse) Reset()         { *m = MsgTransferManagerResponse{} }
func (m *MsgTransferManagerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferManagerResponse) ProtoMessage()    {}
func (*MsgTransferManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{21}
}
func (m *MsgTransferManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferManagerResponse.Merge(m, src)
}
func (m *MsgTransferManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferManagerResponse proto.InternalMessageInfo

type MsgRequestTransferManager struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BadgeId uint64 `protobuf:"varint,2,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	Add     bool   `protobuf:"varint,3,opt,name=add,proto3" json:"add,omitempty"`
}

func (m *MsgRequestTransferManager) Reset()         { *m = MsgRequestTransferManager{} }
func (m *MsgRequestTransferManager) String() string { return proto.CompactTextString(m) }
func (*MsgRequestTransferManager) ProtoMessage()    {}
func (*MsgRequestTransferManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{22}
}
func (m *MsgRequestTransferManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestTransferManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestTransferManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestTransferManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestTransferManager.Merge(m, src)
}
func (m *MsgRequestTransferManager) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestTransferManager) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestTransferManager.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestTransferManager proto.InternalMessageInfo

func (m *MsgRequestTransferManager) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestTransferManager) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgRequestTransferManager) GetAdd() bool {
	if m != nil {
		return m.Add
	}
	return false
}

type MsgRequestTransferManagerResponse struct {
}

func (m *MsgRequestTransferManagerResponse) Reset()         { *m = MsgRequestTransferManagerResponse{} }
func (m *MsgRequestTransferManagerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestTransferManagerResponse) ProtoMessage()    {}
func (*MsgRequestTransferManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{23}
}
func (m *MsgRequestTransferManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestTransferManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestTransferManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestTransferManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestTransferManagerResponse.Merge(m, src)
}
func (m *MsgRequestTransferManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestTransferManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestTransferManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestTransferManagerResponse proto.InternalMessageInfo

type MsgSelfDestructBadge struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BadgeId uint64 `protobuf:"varint,2,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
}

func (m *MsgSelfDestructBadge) Reset()         { *m = MsgSelfDestructBadge{} }
func (m *MsgSelfDestructBadge) String() string { return proto.CompactTextString(m) }
func (*MsgSelfDestructBadge) ProtoMessage()    {}
func (*MsgSelfDestructBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{24}
}
func (m *MsgSelfDestructBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelfDestructBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelfDestructBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelfDestructBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelfDestructBadge.Merge(m, src)
}
func (m *MsgSelfDestructBadge) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelfDestructBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelfDestructBadge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelfDestructBadge proto.InternalMessageInfo

func (m *MsgSelfDestructBadge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSelfDestructBadge) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

type MsgSelfDestructBadgeResponse struct {
}

func (m *MsgSelfDestructBadgeResponse) Reset()         { *m = MsgSelfDestructBadgeResponse{} }
func (m *MsgSelfDestructBadgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSelfDestructBadgeResponse) ProtoMessage()    {}
func (*MsgSelfDestructBadgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{25}
}
func (m *MsgSelfDestructBadgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelfDestructBadgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelfDestructBadgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelfDestructBadgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelfDestructBadgeResponse.Merge(m, src)
}
func (m *MsgSelfDestructBadgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelfDestructBadgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelfDestructBadgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelfDestructBadgeResponse proto.InternalMessageInfo

type MsgPruneBalances struct {
	Creator   string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BadgeIds  []uint64 `protobuf:"varint,2,rep,packed,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	Addresses []uint64 `protobuf:"varint,3,rep,packed,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *MsgPruneBalances) Reset()         { *m = MsgPruneBalances{} }
func (m *MsgPruneBalances) String() string { return proto.CompactTextString(m) }
func (*MsgPruneBalances) ProtoMessage()    {}
func (*MsgPruneBalances) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{26}
}
func (m *MsgPruneBalances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPruneBalances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPruneBalances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPruneBalances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPruneBalances.Merge(m, src)
}
func (m *MsgPruneBalances) XXX_Size() int {
	return m.Size()
}
func (m *MsgPruneBalances) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPruneBalances.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPruneBalances proto.InternalMessageInfo

func (m *MsgPruneBalances) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPruneBalances) GetBadgeIds() []uint64 {
	if m != nil {
		return m.BadgeIds
	}
	return nil
}

func (m *MsgPruneBalances) GetAddresses() []uint64 {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type MsgPruneBalancesResponse struct {
}

func (m *MsgPruneBalancesResponse) Reset()         { *m = MsgPruneBalancesResponse{} }
func (m *MsgPruneBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPruneBalancesResponse) ProtoMessage()    {}
func (*MsgPruneBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{27}
}
func (m *MsgPruneBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPruneBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPruneBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPruneBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPruneBalancesResponse.Merge(m, src)
}
func (m *MsgPruneBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPruneBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPruneBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPruneBalancesResponse proto.InternalMessageInfo

type MsgUpdateBytes struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BadgeId  uint64 `protobuf:"varint,2,opt,name=badgeId,proto3" json:"badgeId,omitempty"`
	NewBytes []byte `protobuf:"bytes,3,opt,name=newBytes,proto3" json:"newBytes,omitempty"`
}

func (m *MsgUpdateBytes) Reset()         { *m = MsgUpdateBytes{} }
func (m *MsgUpdateBytes) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBytes) ProtoMessage()    {}
func (*MsgUpdateBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{28}
}
func (m *MsgUpdateBytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBytes.Merge(m, src)
}
func (m *MsgUpdateBytes) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBytes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBytes proto.InternalMessageInfo

func (m *MsgUpdateBytes) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateBytes) GetBadgeId() uint64 {
	if m != nil {
		return m.BadgeId
	}
	return 0
}

func (m *MsgUpdateBytes) GetNewBytes() []byte {
	if m != nil {
		return m.NewBytes
	}
	return nil
}

type MsgUpdateBytesResponse struct {
}

func (m *MsgUpdateBytesResponse) Reset()         { *m = MsgUpdateBytesResponse{} }
func (m *MsgUpdateBytesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBytesResponse) ProtoMessage()    {}
func (*MsgUpdateBytesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc897b33479788c9, []int{29}
}
func (m *MsgUpdateBytesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBytesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBytesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBytesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBytesResponse.Merge(m, src)
}
func (m *MsgUpdateBytesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBytesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBytesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBytesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewBadge)(nil), "trevormil.bitbadgeschain.badges.MsgNewBadge")
	proto.RegisterType((*MsgNewBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgNewBadgeResponse")
	proto.RegisterType((*MsgNewSubBadge)(nil), "trevormil.bitbadgeschain.badges.MsgNewSubBadge")
	proto.RegisterType((*MsgNewSubBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgNewSubBadgeResponse")
	proto.RegisterType((*MsgTransferBadge)(nil), "trevormil.bitbadgeschain.badges.MsgTransferBadge")
	proto.RegisterType((*MsgTransferBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgTransferBadgeResponse")
	proto.RegisterType((*MsgRequestTransferBadge)(nil), "trevormil.bitbadgeschain.badges.MsgRequestTransferBadge")
	proto.RegisterType((*MsgRequestTransferBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgRequestTransferBadgeResponse")
	proto.RegisterType((*MsgHandlePendingTransfer)(nil), "trevormil.bitbadgeschain.badges.MsgHandlePendingTransfer")
	proto.RegisterType((*MsgHandlePendingTransferResponse)(nil), "trevormil.bitbadgeschain.badges.MsgHandlePendingTransferResponse")
	proto.RegisterType((*MsgSetApproval)(nil), "trevormil.bitbadgeschain.badges.MsgSetApproval")
	proto.RegisterType((*MsgSetApprovalResponse)(nil), "trevormil.bitbadgeschain.badges.MsgSetApprovalResponse")
	proto.RegisterType((*MsgRevokeBadge)(nil), "trevormil.bitbadgeschain.badges.MsgRevokeBadge")
	proto.RegisterType((*MsgRevokeBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgRevokeBadgeResponse")
	proto.RegisterType((*MsgFreezeAddress)(nil), "trevormil.bitbadgeschain.badges.MsgFreezeAddress")
	proto.RegisterType((*MsgFreezeAddressResponse)(nil), "trevormil.bitbadgeschain.badges.MsgFreezeAddressResponse")
	proto.RegisterType((*MsgUpdateUris)(nil), "trevormil.bitbadgeschain.badges.MsgUpdateUris")
	proto.RegisterType((*MsgUpdateUrisResponse)(nil), "trevormil.bitbadgeschain.badges.MsgUpdateUrisResponse")
	proto.RegisterType((*MsgUpdatePermissions)(nil), "trevormil.bitbadgeschain.badges.MsgUpdatePermissions")
	proto.RegisterType((*MsgUpdatePermissionsResponse)(nil), "trevormil.bitbadgeschain.badges.MsgUpdatePermissionsResponse")
	proto.RegisterType((*MsgTransferManager)(nil), "trevormil.bitbadgeschain.badges.MsgTransferManager")
	proto.RegisterType((*MsgTransferManagerResponse)(nil), "trevormil.bitbadgeschain.badges.MsgTransferManagerResponse")
	proto.RegisterType((*MsgRequestTransferManager)(nil), "trevormil.bitbadgeschain.badges.MsgRequestTransferManager")
	proto.RegisterType((*MsgRequestTransferManagerResponse)(nil), "trevormil.bitbadgeschain.badges.MsgRequestTransferManagerResponse")
	proto.RegisterType((*MsgSelfDestructBadge)(nil), "trevormil.bitbadgeschain.badges.MsgSelfDestructBadge")
	proto.RegisterType((*MsgSelfDestructBadgeResponse)(nil), "trevormil.bitbadgeschain.badges.MsgSelfDestructBadgeResponse")
	proto.RegisterType((*MsgPruneBalances)(nil), "trevormil.bitbadgeschain.badges.MsgPruneBalances")
	proto.RegisterType((*MsgPruneBalancesResponse)(nil), "trevormil.bitbadgeschain.badges.MsgPruneBalancesResponse")
	proto.RegisterType((*MsgUpdateBytes)(nil), "trevormil.bitbadgeschain.badges.MsgUpdateBytes")
	proto.RegisterType((*MsgUpdateBytesResponse)(nil), "trevormil.bitbadgeschain.badges.MsgUpdateBytesResponse")
}

func init() { proto.RegisterFile("badges/tx.proto", fileDescriptor_bc897b33479788c9) }

var fileDescriptor_bc897b33479788c9 = []byte{
	// 1279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x4d, 0x6f, 0xe3, 0xc4,
	0x1b, 0x5f, 0xc7, 0xd9, 0x36, 0x7d, 0xf2, 0x6f, 0xbb, 0xeb, 0xbe, 0xf9, 0x6f, 0x55, 0xd9, 0xac,
	0x11, 0x4b, 0x84, 0x50, 0x22, 0xba, 0xbb, 0x50, 0xde, 0x24, 0x9a, 0x45, 0x88, 0xae, 0xc8, 0x52,
	0xb9, 0xed, 0x65, 0x2f, 0x30, 0x89, 0x27, 0x59, 0x43, 0x62, 0x87, 0x99, 0x71, 0x5f, 0x90, 0x40,
	0x42, 0x9c, 0xb8, 0x21, 0x24, 0x24, 0x3e, 0x02, 0x67, 0xbe, 0x01, 0x07, 0x24, 0x4e, 0x68, 0x8f,
	0x88, 0x13, 0x6a, 0xbf, 0x00, 0x1f, 0x01, 0x79, 0x6c, 0x4f, 0xc7, 0x8e, 0x93, 0x38, 0xa9, 0xb8,
	0x70, 0xcb, 0xcc, 0xf8, 0x37, 0xcf, 0xef, 0xf9, 0xcd, 0xf3, 0xd6, 0xc2, 0x6a, 0x1b, 0xd9, 0x3d,
	0x4c, 0x1b, 0xec, 0xac, 0x3e, 0x24, 0x1e, 0xf3, 0xb4, 0x3b, 0x8c, 0xe0, 0x13, 0x8f, 0x0c, 0x9c,
	0x7e, 0xbd, 0xed, 0xb0, 0xf0, 0xb4, 0xf3, 0x0c, 0x39, 0x6e, 0x3d, 0xfc, 0x6d, 0xac, 0x45, 0x08,
	0x82, 0xdc, 0x1e, 0xa6, 0x21, 0xca, 0xb8, 0x1d, 0x6d, 0xfa, 0xc4, 0x89, 0xb6, 0xcc, 0x5f, 0x54,
	0x28, 0xb7, 0x68, 0xef, 0x09, 0x3e, 0x6d, 0x06, 0x67, 0x9a, 0x0e, 0x8b, 0x1d, 0x82, 0x11, 0xf3,
	0x88, 0xae, 0x54, 0x95, 0xda, 0x92, 0x15, 0x2f, 0xb5, 0xb7, 0x41, 0xf5, 0x89, 0xa3, 0x17, 0xaa,
	0x4a, 0xad, 0xbc, 0xf3, 0x72, 0x7d, 0x0a, 0x81, 0xfa, 0x31, 0x71, 0x3e, 0x6a, 0x7f, 0x8a, 0x3b,
	0xcc, 0x0a, 0x60, 0x5a, 0x15, 0xca, 0x43, 0x4c, 0x06, 0x0e, 0xa5, 0x8e, 0xe7, 0x52, 0xbd, 0x58,
	0x55, 0x6a, 0x45, 0x4b, 0xde, 0xd2, 0xee, 0xc1, 0x0a, 0x22, 0x6d, 0x87, 0x11, 0x44, 0xce, 0x9b,
	0xe7, 0x0c, 0x53, 0xfd, 0x66, 0x55, 0xa9, 0xfd, 0xcf, 0x4a, 0xed, 0x6a, 0x0f, 0x60, 0xc3, 0xc6,
	0x5d, 0xe4, 0xf7, 0xd9, 0xa1, 0xdf, 0x46, 0x94, 0x62, 0x76, 0xe8, 0x0f, 0x87, 0xfd, 0x73, 0x7d,
	0x81, 0xdf, 0x99, 0x7d, 0xa8, 0x3d, 0x85, 0xb5, 0x2e, 0xc1, 0xf8, 0x0b, 0xbc, 0x67, 0xdb, 0x04,
	0x53, 0x6a, 0x71, 0x5d, 0xf4, 0xa5, 0xaa, 0x5a, 0x2b, 0xef, 0xd4, 0xa6, 0x7a, 0xb3, 0x6f, 0x73,
	0x80, 0x95, 0x75, 0x89, 0x66, 0x40, 0x89, 0x32, 0xe4, 0xda, 0x88, 0xd8, 0x3a, 0x70, 0x12, 0x62,
	0xad, 0xd5, 0x60, 0x95, 0x26, 0x98, 0x50, 0x7d, 0xb1, 0xaa, 0xd6, 0x8a, 0x56, 0x7a, 0x5b, 0xdb,
	0x85, 0xad, 0x78, 0x6b, 0x6f, 0xe0, 0xf9, 0x2e, 0xa3, 0x47, 0xde, 0xa3, 0x40, 0x7b, 0xac, 0x97,
	0x38, 0x62, 0xdc, 0xb1, 0xf9, 0x22, 0xac, 0x49, 0x4f, 0x68, 0x61, 0x3a, 0xf4, 0x5c, 0x8a, 0xb5,
	0x15, 0x28, 0x38, 0x36, 0x7f, 0xc5, 0xa2, 0x55, 0x70, 0x6c, 0xf3, 0x2b, 0x58, 0x09, 0x3f, 0x3b,
	0xf4, 0xdb, 0xd3, 0x1e, 0x3b, 0xc4, 0x16, 0x62, 0x6c, 0xf0, 0x25, 0x8d, 0xe8, 0xab, 0x9c, 0x4c,
	0xbc, 0x0c, 0x1c, 0x44, 0x29, 0xba, 0xc5, 0xd0, 0xc1, 0xd4, 0xb6, 0xb9, 0x0b, 0x9b, 0x49, 0xfb,
	0x82, 0x69, 0x05, 0x20, 0xf6, 0x6d, 0x3f, 0x66, 0x2c, 0xed, 0x98, 0xbf, 0x16, 0xe0, 0x56, 0x8b,
	0xf6, 0x8e, 0x08, 0x72, 0x69, 0x17, 0x93, 0x69, 0xe4, 0x35, 0x28, 0x76, 0x89, 0x37, 0x88, 0xe8,
	0xf3, 0xdf, 0x41, 0xfc, 0x31, 0x2f, 0x7a, 0x36, 0x1c, 0x3b, 0x21, 0x6f, 0x05, 0xf7, 0x45, 0x8c,
	0x23, 0x07, 0xe2, 0x65, 0x70, 0xc2, 0xc3, 0x60, 0xdf, 0xe6, 0x21, 0x59, 0xb4, 0xe2, 0xa5, 0x76,
	0x00, 0x2b, 0xd4, 0x6f, 0xf3, 0x55, 0x14, 0x50, 0x0b, 0x33, 0x06, 0x54, 0x0a, 0xaf, 0xbd, 0x04,
	0xab, 0xf8, 0x6c, 0xe8, 0x10, 0xc4, 0x1c, 0xcf, 0xfd, 0x98, 0x39, 0x03, 0xac, 0x2f, 0x72, 0x9b,
	0x2b, 0x57, 0xdb, 0x47, 0xce, 0x00, 0x6b, 0x3b, 0xb0, 0xde, 0x41, 0x2e, 0x7b, 0x84, 0xdc, 0x0e,
	0xee, 0x37, 0x71, 0xd7, 0x23, 0x38, 0xd8, 0xd7, 0x4b, 0xfc, 0xeb, 0xcc, 0x33, 0xd3, 0x00, 0x3d,
	0x2d, 0x63, 0xfc, 0x06, 0xe6, 0x4f, 0x05, 0xd8, 0x6a, 0xd1, 0x9e, 0x85, 0x3f, 0xf7, 0x31, 0x65,
	0xd7, 0x91, 0x7a, 0x13, 0x16, 0x42, 0xe5, 0xa2, 0x2c, 0x8f, 0x56, 0xff, 0x1d, 0x19, 0xef, 0xc2,
	0x9d, 0x31, 0x4a, 0x09, 0x35, 0xff, 0x54, 0xb8, 0xd4, 0x1f, 0x20, 0xd7, 0xee, 0xe3, 0x03, 0xec,
	0xda, 0x8e, 0x2b, 0x74, 0x9f, 0x20, 0x67, 0x20, 0x5d, 0xa7, 0x83, 0x87, 0x8c, 0x0b, 0x5a, 0xb2,
	0xa2, 0x95, 0x2c, 0x9d, 0x9a, 0x94, 0xee, 0x31, 0x94, 0x5d, 0xcf, 0xed, 0xc4, 0xba, 0x15, 0x67,
	0xd4, 0x4d, 0x06, 0x07, 0x15, 0xb8, 0xeb, 0x91, 0x0e, 0xee, 0xfa, 0xfd, 0xbd, 0x90, 0xc5, 0x4d,
	0xce, 0x22, 0xb5, 0x6b, 0x9a, 0x50, 0x1d, 0xe7, 0x9b, 0x10, 0xe0, 0x6f, 0x85, 0x57, 0x9b, 0x43,
	0xcc, 0xf6, 0x86, 0x43, 0xe2, 0x9d, 0xa0, 0xfe, 0x14, 0xb7, 0xc3, 0x88, 0x29, 0xa4, 0x23, 0x06,
	0x85, 0xf9, 0x19, 0xbb, 0x1d, 0x2d, 0x65, 0x41, 0x8a, 0xd3, 0x62, 0xe9, 0xe6, 0x35, 0x63, 0xe9,
	0x1e, 0xa4, 0x82, 0x26, 0xea, 0x34, 0xa9, 0x5d, 0x53, 0xe7, 0xf5, 0x4d, 0xf2, 0x58, 0x88, 0xf1,
	0x7b, 0x28, 0x86, 0x85, 0x4f, 0xbc, 0xcf, 0xf0, 0xb4, 0x94, 0xda, 0x86, 0x25, 0x24, 0xea, 0x54,
	0x81, 0x57, 0xa2, 0xab, 0x0d, 0xb9, 0x4a, 0xa9, 0x63, 0xab, 0xd4, 0xbf, 0x2d, 0x49, 0xe4, 0xaa,
	0xe4, 0xcf, 0x55, 0x19, 0x51, 0x78, 0xa9, 0x7e, 0x5f, 0x6e, 0x93, 0x13, 0x9c, 0x7d, 0x02, 0xcb,
	0x28, 0xd1, 0x90, 0x0b, 0x33, 0x32, 0x4b, 0xc2, 0x27, 0x24, 0xca, 0x2d, 0x50, 0x91, 0x1d, 0x4a,
	0x53, 0xb2, 0x82, 0x9f, 0x51, 0x35, 0x4c, 0x30, 0x15, 0x6e, 0x7c, 0xad, 0xc0, 0x72, 0x8b, 0xf6,
	0x8e, 0x87, 0x36, 0x62, 0xf8, 0x98, 0x38, 0x93, 0x7c, 0x90, 0x6c, 0x16, 0x92, 0x36, 0xa3, 0x91,
	0x49, 0x9d, 0x6b, 0x64, 0x32, 0xb7, 0x60, 0x23, 0x41, 0x41, 0x90, 0xeb, 0xc3, 0xba, 0x38, 0x38,
	0x90, 0x26, 0xa8, 0x79, 0x28, 0xa6, 0xe6, 0x32, 0x75, 0x64, 0x2e, 0x33, 0x2b, 0xb0, 0x9d, 0x65,
	0x4d, 0xb0, 0x69, 0x83, 0x26, 0x35, 0x95, 0x16, 0x72, 0x51, 0x6f, 0x62, 0x8d, 0x1b, 0xcf, 0x65,
	0x6c, 0xba, 0x9b, 0xdb, 0x60, 0x8c, 0xda, 0x10, 0x0c, 0x10, 0xfc, 0x7f, 0xb4, 0x1e, 0x5f, 0x87,
	0x48, 0x14, 0x2b, 0xea, 0x55, 0xac, 0xbc, 0x00, 0x77, 0xc7, 0x9a, 0x10, 0x3c, 0x1e, 0xf3, 0x77,
	0x39, 0xc4, 0xfd, 0xee, 0x7b, 0x98, 0x32, 0xe2, 0x77, 0xd8, 0xb4, 0x5c, 0x1f, 0x4b, 0x21, 0x52,
	0x7d, 0xe4, 0x2e, 0x61, 0xab, 0xcb, 0xd3, 0xec, 0x80, 0xf8, 0x2e, 0x6e, 0xa2, 0x7e, 0xd0, 0xa1,
	0x26, 0xbd, 0xbf, 0x01, 0xa5, 0xe8, 0xe2, 0xb8, 0xa4, 0x88, 0x75, 0xb2, 0xde, 0xa8, 0xa9, 0x7a,
	0x13, 0x25, 0x49, 0xc2, 0x8e, 0xe0, 0xf0, 0x09, 0xaf, 0x6a, 0x61, 0x64, 0x84, 0xb3, 0xf9, 0x3c,
	0x62, 0x1b, 0x50, 0x72, 0xf1, 0x69, 0x38, 0xf1, 0xab, 0x7c, 0xe2, 0x17, 0xeb, 0xa8, 0xce, 0x48,
	0x16, 0x62, 0xdb, 0x3b, 0x3f, 0xaf, 0x82, 0xda, 0xa2, 0x3d, 0xcd, 0x85, 0x92, 0xf8, 0xdb, 0xe5,
	0x95, 0xa9, 0x19, 0x26, 0x8d, 0xc9, 0xc6, 0x83, 0x59, 0xbe, 0x16, 0xa3, 0xea, 0x29, 0x94, 0xe5,
	0x09, 0xba, 0x91, 0xf3, 0x92, 0x18, 0x60, 0xbc, 0x3e, 0x23, 0x40, 0x18, 0xfe, 0x12, 0x96, 0x93,
	0x43, 0xd9, 0xab, 0x79, 0x6e, 0x4a, 0x40, 0x8c, 0x37, 0x66, 0x86, 0x08, 0xf3, 0xdf, 0x2b, 0xb0,
	0x9e, 0x39, 0x1b, 0xee, 0xe6, 0xb9, 0x33, 0x0b, 0x69, 0xbc, 0x3b, 0x2f, 0x52, 0x90, 0xfa, 0x41,
	0x81, 0x8d, 0xec, 0x11, 0x2b, 0x97, 0xa7, 0x99, 0x50, 0x63, 0x6f, 0x6e, 0xa8, 0x1c, 0x24, 0xf2,
	0xe0, 0x93, 0x2b, 0x48, 0x24, 0x40, 0xbe, 0x20, 0xc9, 0x18, 0x34, 0x02, 0xc3, 0xf2, 0x90, 0xd1,
	0xc8, 0xa7, 0xb0, 0x00, 0xe4, 0x33, 0x9c, 0xd1, 0xf6, 0x83, 0xe8, 0x4c, 0xb6, 0xfc, 0x5c, 0xd1,
	0x99, 0x80, 0xe4, 0x8b, 0xce, 0xcc, 0x76, 0xad, 0x31, 0x00, 0xa9, 0x55, 0xd7, 0xf3, 0x5c, 0x74,
	0xf5, 0xbd, 0xf1, 0xda, 0x6c, 0xdf, 0x0b, 0xab, 0xdf, 0x2a, 0x70, 0x7b, 0xb4, 0x0b, 0x3f, 0xcc,
	0x7f, 0x9b, 0x04, 0x33, 0xde, 0x99, 0x0b, 0x26, 0xb8, 0x7c, 0xa3, 0xc0, 0x6a, 0xba, 0xf5, 0xdd,
	0x9f, 0x25, 0xdd, 0x23, 0x90, 0xf1, 0xd6, 0x1c, 0x20, 0xc1, 0xe2, 0x47, 0x05, 0x36, 0xc7, 0xf4,
	0xe1, 0x37, 0xe7, 0xc8, 0xf6, 0x98, 0x53, 0x73, 0x7e, 0x6c, 0xe2, 0xb1, 0x46, 0x5b, 0xf3, 0xc3,
	0x7c, 0x99, 0x96, 0x82, 0xe5, 0x7b, 0xac, 0xb1, 0xcd, 0x3b, 0xc8, 0x96, 0x64, 0xe7, 0xce, 0x95,
	0x2d, 0x09, 0x48, 0xbe, 0x6c, 0xc9, 0xec, 0xdb, 0x41, 0x95, 0x90, 0x9b, 0x76, 0x23, 0x7f, 0xe4,
	0x71, 0x40, 0xbe, 0x2a, 0x91, 0xd1, 0xb4, 0x9b, 0x1f, 0xfe, 0x76, 0x51, 0x51, 0x9e, 0x5f, 0x54,
	0x94, 0xbf, 0x2e, 0x2a, 0xca, 0x77, 0x97, 0x95, 0x1b, 0xcf, 0x2f, 0x2b, 0x37, 0xfe, 0xb8, 0xac,
	0xdc, 0x78, 0xba, 0xd3, 0x73, 0xd8, 0x33, 0xbf, 0x5d, 0xef, 0x78, 0x83, 0x86, 0xb8, 0xbc, 0x91,
	0xbc, 0xbc, 0x71, 0xd6, 0x88, 0xff, 0x0d, 0x7a, 0x3e, 0xc4, 0xb4, 0xbd, 0xc0, 0xff, 0x83, 0x79,
	0xff, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0xd5, 0x5a, 0xd5, 0x1d, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	NewBadge(ctx context.Context, in *MsgNewBadge, opts ...grpc.CallOption) (*MsgNewBadgeResponse, error)
	NewSubBadge(ctx context.Context, in *MsgNewSubBadge, opts ...grpc.CallOption) (*MsgNewSubBadgeResponse, error)
	TransferBadge(ctx context.Context, in *MsgTransferBadge, opts ...grpc.CallOption) (*MsgTransferBadgeResponse, error)
	RequestTransferBadge(ctx context.Context, in *MsgRequestTransferBadge, opts ...grpc.CallOption) (*MsgRequestTransferBadgeResponse, error)
	HandlePendingTransfer(ctx context.Context, in *MsgHandlePendingTransfer, opts ...grpc.CallOption) (*MsgHandlePendingTransferResponse, error)
	SetApproval(ctx context.Context, in *MsgSetApproval, opts ...grpc.CallOption) (*MsgSetApprovalResponse, error)
	RevokeBadge(ctx context.Context, in *MsgRevokeBadge, opts ...grpc.CallOption) (*MsgRevokeBadgeResponse, error)
	FreezeAddress(ctx context.Context, in *MsgFreezeAddress, opts ...grpc.CallOption) (*MsgFreezeAddressResponse, error)
	UpdateUris(ctx context.Context, in *MsgUpdateUris, opts ...grpc.CallOption) (*MsgUpdateUrisResponse, error)
	UpdatePermissions(ctx context.Context, in *MsgUpdatePermissions, opts ...grpc.CallOption) (*MsgUpdatePermissionsResponse, error)
	TransferManager(ctx context.Context, in *MsgTransferManager, opts ...grpc.CallOption) (*MsgTransferManagerResponse, error)
	RequestTransferManager(ctx context.Context, in *MsgRequestTransferManager, opts ...grpc.CallOption) (*MsgRequestTransferManagerResponse, error)
	SelfDestructBadge(ctx context.Context, in *MsgSelfDestructBadge, opts ...grpc.CallOption) (*MsgSelfDestructBadgeResponse, error)
	PruneBalances(ctx context.Context, in *MsgPruneBalances, opts ...grpc.CallOption) (*MsgPruneBalancesResponse, error)
	UpdateBytes(ctx context.Context, in *MsgUpdateBytes, opts ...grpc.CallOption) (*MsgUpdateBytesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewBadge(ctx context.Context, in *MsgNewBadge, opts ...grpc.CallOption) (*MsgNewBadgeResponse, error) {
	out := new(MsgNewBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/NewBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewSubBadge(ctx context.Context, in *MsgNewSubBadge, opts ...grpc.CallOption) (*MsgNewSubBadgeResponse, error) {
	out := new(MsgNewSubBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/NewSubBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferBadge(ctx context.Context, in *MsgTransferBadge, opts ...grpc.CallOption) (*MsgTransferBadgeResponse, error) {
	out := new(MsgTransferBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/TransferBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestTransferBadge(ctx context.Context, in *MsgRequestTransferBadge, opts ...grpc.CallOption) (*MsgRequestTransferBadgeResponse, error) {
	out := new(MsgRequestTransferBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/RequestTransferBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandlePendingTransfer(ctx context.Context, in *MsgHandlePendingTransfer, opts ...grpc.CallOption) (*MsgHandlePendingTransferResponse, error) {
	out := new(MsgHandlePendingTransferResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/HandlePendingTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetApproval(ctx context.Context, in *MsgSetApproval, opts ...grpc.CallOption) (*MsgSetApprovalResponse, error) {
	out := new(MsgSetApprovalResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/SetApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeBadge(ctx context.Context, in *MsgRevokeBadge, opts ...grpc.CallOption) (*MsgRevokeBadgeResponse, error) {
	out := new(MsgRevokeBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/RevokeBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FreezeAddress(ctx context.Context, in *MsgFreezeAddress, opts ...grpc.CallOption) (*MsgFreezeAddressResponse, error) {
	out := new(MsgFreezeAddressResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/FreezeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateUris(ctx context.Context, in *MsgUpdateUris, opts ...grpc.CallOption) (*MsgUpdateUrisResponse, error) {
	out := new(MsgUpdateUrisResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/UpdateUris", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePermissions(ctx context.Context, in *MsgUpdatePermissions, opts ...grpc.CallOption) (*MsgUpdatePermissionsResponse, error) {
	out := new(MsgUpdatePermissionsResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/UpdatePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferManager(ctx context.Context, in *MsgTransferManager, opts ...grpc.CallOption) (*MsgTransferManagerResponse, error) {
	out := new(MsgTransferManagerResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/TransferManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestTransferManager(ctx context.Context, in *MsgRequestTransferManager, opts ...grpc.CallOption) (*MsgRequestTransferManagerResponse, error) {
	out := new(MsgRequestTransferManagerResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/RequestTransferManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SelfDestructBadge(ctx context.Context, in *MsgSelfDestructBadge, opts ...grpc.CallOption) (*MsgSelfDestructBadgeResponse, error) {
	out := new(MsgSelfDestructBadgeResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/SelfDestructBadge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PruneBalances(ctx context.Context, in *MsgPruneBalances, opts ...grpc.CallOption) (*MsgPruneBalancesResponse, error) {
	out := new(MsgPruneBalancesResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/PruneBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBytes(ctx context.Context, in *MsgUpdateBytes, opts ...grpc.CallOption) (*MsgUpdateBytesResponse, error) {
	out := new(MsgUpdateBytesResponse)
	err := c.cc.Invoke(ctx, "/trevormil.bitbadgeschain.badges.Msg/UpdateBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	NewBadge(context.Context, *MsgNewBadge) (*MsgNewBadgeResponse, error)
	NewSubBadge(context.Context, *MsgNewSubBadge) (*MsgNewSubBadgeResponse, error)
	TransferBadge(context.Context, *MsgTransferBadge) (*MsgTransferBadgeResponse, error)
	RequestTransferBadge(context.Context, *MsgRequestTransferBadge) (*MsgRequestTransferBadgeResponse, error)
	HandlePendingTransfer(context.Context, *MsgHandlePendingTransfer) (*MsgHandlePendingTransferResponse, error)
	SetApproval(context.Context, *MsgSetApproval) (*MsgSetApprovalResponse, error)
	RevokeBadge(context.Context, *MsgRevokeBadge) (*MsgRevokeBadgeResponse, error)
	FreezeAddress(context.Context, *MsgFreezeAddress) (*MsgFreezeAddressResponse, error)
	UpdateUris(context.Context, *MsgUpdateUris) (*MsgUpdateUrisResponse, error)
	UpdatePermissions(context.Context, *MsgUpdatePermissions) (*MsgUpdatePermissionsResponse, error)
	TransferManager(context.Context, *MsgTransferManager) (*MsgTransferManagerResponse, error)
	RequestTransferManager(context.Context, *MsgRequestTransferManager) (*MsgRequestTransferManagerResponse, error)
	SelfDestructBadge(context.Context, *MsgSelfDestructBadge) (*MsgSelfDestructBadgeResponse, error)
	PruneBalances(context.Context, *MsgPruneBalances) (*MsgPruneBalancesResponse, error)
	UpdateBytes(context.Context, *MsgUpdateBytes) (*MsgUpdateBytesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewBadge(ctx context.Context, req *MsgNewBadge) (*MsgNewBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBadge not implemented")
}
func (*UnimplementedMsgServer) NewSubBadge(ctx context.Context, req *MsgNewSubBadge) (*MsgNewSubBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSubBadge not implemented")
}
func (*UnimplementedMsgServer) TransferBadge(ctx context.Context, req *MsgTransferBadge) (*MsgTransferBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBadge not implemented")
}
func (*UnimplementedMsgServer) RequestTransferBadge(ctx context.Context, req *MsgRequestTransferBadge) (*MsgRequestTransferBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTransferBadge not implemented")
}
func (*UnimplementedMsgServer) HandlePendingTransfer(ctx context.Context, req *MsgHandlePendingTransfer) (*MsgHandlePendingTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePendingTransfer not implemented")
}
func (*UnimplementedMsgServer) SetApproval(ctx context.Context, req *MsgSetApproval) (*MsgSetApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApproval not implemented")
}
func (*UnimplementedMsgServer) RevokeBadge(ctx context.Context, req *MsgRevokeBadge) (*MsgRevokeBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeBadge not implemented")
}
func (*UnimplementedMsgServer) FreezeAddress(ctx context.Context, req *MsgFreezeAddress) (*MsgFreezeAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeAddress not implemented")
}
func (*UnimplementedMsgServer) UpdateUris(ctx context.Context, req *MsgUpdateUris) (*MsgUpdateUrisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUris not implemented")
}
func (*UnimplementedMsgServer) UpdatePermissions(ctx context.Context, req *MsgUpdatePermissions) (*MsgUpdatePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissions not implemented")
}
func (*UnimplementedMsgServer) TransferManager(ctx context.Context, req *MsgTransferManager) (*MsgTransferManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferManager not implemented")
}
func (*UnimplementedMsgServer) RequestTransferManager(ctx context.Context, req *MsgRequestTransferManager) (*MsgRequestTransferManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTransferManager not implemented")
}
func (*UnimplementedMsgServer) SelfDestructBadge(ctx context.Context, req *MsgSelfDestructBadge) (*MsgSelfDestructBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfDestructBadge not implemented")
}
func (*UnimplementedMsgServer) PruneBalances(ctx context.Context, req *MsgPruneBalances) (*MsgPruneBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneBalances not implemented")
}
func (*UnimplementedMsgServer) UpdateBytes(ctx context.Context, req *MsgUpdateBytes) (*MsgUpdateBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBytes not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/NewBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewBadge(ctx, req.(*MsgNewBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewSubBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewSubBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewSubBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/NewSubBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewSubBadge(ctx, req.(*MsgNewSubBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/TransferBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferBadge(ctx, req.(*MsgTransferBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestTransferBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestTransferBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestTransferBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/RequestTransferBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestTransferBadge(ctx, req.(*MsgRequestTransferBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandlePendingTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHandlePendingTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandlePendingTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/HandlePendingTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandlePendingTransfer(ctx, req.(*MsgHandlePendingTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetApproval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/SetApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetApproval(ctx, req.(*MsgSetApproval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/RevokeBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeBadge(ctx, req.(*MsgRevokeBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FreezeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFreezeAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FreezeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/FreezeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FreezeAddress(ctx, req.(*MsgFreezeAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateUris_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateUris)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateUris(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/UpdateUris",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateUris(ctx, req.(*MsgUpdateUris))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/UpdatePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePermissions(ctx, req.(*MsgUpdatePermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/TransferManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferManager(ctx, req.(*MsgTransferManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestTransferManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestTransferManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestTransferManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/RequestTransferManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestTransferManager(ctx, req.(*MsgRequestTransferManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SelfDestructBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSelfDestructBadge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SelfDestructBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/SelfDestructBadge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SelfDestructBadge(ctx, req.(*MsgSelfDestructBadge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PruneBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPruneBalances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PruneBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/PruneBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PruneBalances(ctx, req.(*MsgPruneBalances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trevormil.bitbadgeschain.badges.Msg/UpdateBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBytes(ctx, req.(*MsgUpdateBytes))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trevormil.bitbadgeschain.badges.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBadge",
			Handler:    _Msg_NewBadge_Handler,
		},
		{
			MethodName: "NewSubBadge",
			Handler:    _Msg_NewSubBadge_Handler,
		},
		{
			MethodName: "TransferBadge",
			Handler:    _Msg_TransferBadge_Handler,
		},
		{
			MethodName: "RequestTransferBadge",
			Handler:    _Msg_RequestTransferBadge_Handler,
		},
		{
			MethodName: "HandlePendingTransfer",
			Handler:    _Msg_HandlePendingTransfer_Handler,
		},
		{
			MethodName: "SetApproval",
			Handler:    _Msg_SetApproval_Handler,
		},
		{
			MethodName: "RevokeBadge",
			Handler:    _Msg_RevokeBadge_Handler,
		},
		{
			MethodName: "FreezeAddress",
			Handler:    _Msg_FreezeAddress_Handler,
		},
		{
			MethodName: "UpdateUris",
			Handler:    _Msg_UpdateUris_Handler,
		},
		{
			MethodName: "UpdatePermissions",
			Handler:    _Msg_UpdatePermissions_Handler,
		},
		{
			MethodName: "TransferManager",
			Handler:    _Msg_TransferManager_Handler,
		},
		{
			MethodName: "RequestTransferManager",
			Handler:    _Msg_RequestTransferManager_Handler,
		},
		{
			MethodName: "SelfDestructBadge",
			Handler:    _Msg_SelfDestructBadge_Handler,
		},
		{
			MethodName: "PruneBalances",
			Handler:    _Msg_PruneBalances_Handler,
		},
		{
			MethodName: "UpdateBytes",
			Handler:    _Msg_UpdateBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "badges/tx.proto",
}

func (m *MsgNewBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Standard != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Standard))
		i--
		dAtA[i] = 0x50
	}
	if len(m.FreezeAddressRanges) > 0 {
		for iNdEx := len(m.FreezeAddressRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FreezeAddressRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.SubassetAmountsToCreate) > 0 {
		dAtA2 := make([]byte, len(m.SubassetAmountsToCreate)*10)
		var j1 int
		for _, num := range m.SubassetAmountsToCreate {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SubassetSupplys) > 0 {
		dAtA4 := make([]byte, len(m.SubassetSupplys)*10)
		var j3 int
		for _, num := range m.SubassetSupplys {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTx(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if m.DefaultSubassetSupply != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DefaultSubassetSupply))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ArbitraryBytes) > 0 {
		i -= len(m.ArbitraryBytes)
		copy(dAtA[i:], m.ArbitraryBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ArbitraryBytes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Permissions != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x20
	}
	if m.Uri != nil {
		{
			size, err := m.Uri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewSubBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewSubBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewSubBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountsToCreate) > 0 {
		dAtA7 := make([]byte, len(m.AmountsToCreate)*10)
		var j6 int
		for _, num := range m.AmountsToCreate {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintTx(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Supplys) > 0 {
		dAtA9 := make([]byte, len(m.Supplys)*10)
		var j8 int
		for _, num := range m.Supplys {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTx(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewSubBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewSubBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewSubBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubassetId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubassetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CantCancelBeforeTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CantCancelBeforeTime))
		i--
		dAtA[i] = 0x40
	}
	if m.ExpirationTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpirationTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SubbadgeRanges) > 0 {
		for iNdEx := len(m.SubbadgeRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubbadgeRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Amounts) > 0 {
		dAtA11 := make([]byte, len(m.Amounts)*10)
		var j10 int
		for _, num := range m.Amounts {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTx(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToAddresses) > 0 {
		dAtA13 := make([]byte, len(m.ToAddresses)*10)
		var j12 int
		for _, num := range m.ToAddresses {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintTx(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x1a
	}
	if m.From != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestTransferBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestTransferBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestTransferBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CantCancelBeforeTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CantCancelBeforeTime))
		i--
		dAtA[i] = 0x40
	}
	if m.ExpirationTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpirationTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SubbadgeRanges) > 0 {
		for iNdEx := len(m.SubbadgeRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubbadgeRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if m.From != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestTransferBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestTransferBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestTransferBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgHandlePendingTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHandlePendingTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHandlePendingTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForcefulAccept {
		i--
		if m.ForcefulAccept {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.NonceRanges) > 0 {
		for iNdEx := len(m.NonceRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NonceRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x18
	}
	if m.Accept {
		i--
		if m.Accept {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgHandlePendingTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHandlePendingTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHandlePendingTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetApproval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetApproval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetApproval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpirationTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SubbadgeRanges) > 0 {
		for iNdEx := len(m.SubbadgeRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubbadgeRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x20
	}
	if m.Address != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Address))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetApprovalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetApprovalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetApprovalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevokeBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubbadgeRanges) > 0 {
		for iNdEx := len(m.SubbadgeRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubbadgeRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amounts) > 0 {
		dAtA15 := make([]byte, len(m.Amounts)*10)
		var j14 int
		for _, num := range m.Amounts {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintTx(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addresses) > 0 {
		dAtA17 := make([]byte, len(m.Addresses)*10)
		var j16 int
		for _, num := range m.Addresses {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintTx(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFreezeAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFreezeAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFreezeAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Add {
		i--
		if m.Add {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AddressRanges) > 0 {
		for iNdEx := len(m.AddressRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddressRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFreezeAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFreezeAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFreezeAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateUris) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateUris) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateUris) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uri != nil {
		{
			size, err := m.Uri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateUrisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateUrisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateUrisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x18
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Address))
		i--
		dAtA[i] = 0x18
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestTransferManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestTransferManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestTransferManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Add {
		i--
		if m.Add {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestTransferManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestTransferManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestTransferManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSelfDestructBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelfDestructBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelfDestructBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelfDestructBadgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelfDestructBadgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelfDestructBadgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPruneBalances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPruneBalances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPruneBalances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		dAtA20 := make([]byte, len(m.Addresses)*10)
		var j19 int
		for _, num := range m.Addresses {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintTx(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BadgeIds) > 0 {
		dAtA22 := make([]byte, len(m.BadgeIds)*10)
		var j21 int
		for _, num := range m.BadgeIds {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintTx(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPruneBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPruneBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPruneBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewBytes) > 0 {
		i -= len(m.NewBytes)
		copy(dAtA[i:], m.NewBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BadgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BadgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBytesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBytesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBytesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Uri != nil {
		l = m.Uri.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Permissions != 0 {
		n += 1 + sovTx(uint64(m.Permissions))
	}
	l = len(m.ArbitraryBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DefaultSubassetSupply != 0 {
		n += 1 + sovTx(uint64(m.DefaultSubassetSupply))
	}
	if len(m.SubassetSupplys) > 0 {
		l = 0
		for _, e := range m.SubassetSupplys {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.SubassetAmountsToCreate) > 0 {
		l = 0
		for _, e := range m.SubassetAmountsToCreate {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.FreezeAddressRanges) > 0 {
		for _, e := range m.FreezeAddressRanges {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Standard != 0 {
		n += 1 + sovTx(uint64(m.Standard))
	}
	return n
}

func (m *MsgNewBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgNewSubBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if len(m.Supplys) > 0 {
		l = 0
		for _, e := range m.Supplys {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.AmountsToCreate) > 0 {
		l = 0
		for _, e := range m.AmountsToCreate {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgNewSubBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubassetId != 0 {
		n += 1 + sovTx(uint64(m.SubassetId))
	}
	return n
}

func (m *MsgTransferBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovTx(uint64(m.From))
	}
	if len(m.ToAddresses) > 0 {
		l = 0
		for _, e := range m.ToAddresses {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Amounts) > 0 {
		l = 0
		for _, e := range m.Amounts {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if len(m.SubbadgeRanges) > 0 {
		for _, e := range m.SubbadgeRanges {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovTx(uint64(m.ExpirationTime))
	}
	if m.CantCancelBeforeTime != 0 {
		n += 1 + sovTx(uint64(m.CantCancelBeforeTime))
	}
	return n
}

func (m *MsgTransferBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestTransferBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovTx(uint64(m.From))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if len(m.SubbadgeRanges) > 0 {
		for _, e := range m.SubbadgeRanges {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovTx(uint64(m.ExpirationTime))
	}
	if m.CantCancelBeforeTime != 0 {
		n += 1 + sovTx(uint64(m.CantCancelBeforeTime))
	}
	return n
}

func (m *MsgRequestTransferBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgHandlePendingTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Accept {
		n += 2
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if len(m.NonceRanges) > 0 {
		for _, e := range m.NonceRanges {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ForcefulAccept {
		n += 2
	}
	return n
}

func (m *MsgHandlePendingTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetApproval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.Address != 0 {
		n += 1 + sovTx(uint64(m.Address))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if len(m.SubbadgeRanges) > 0 {
		for _, e := range m.SubbadgeRanges {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovTx(uint64(m.ExpirationTime))
	}
	return n
}

func (m *MsgSetApprovalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevokeBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Addresses) > 0 {
		l = 0
		for _, e := range m.Addresses {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Amounts) > 0 {
		l = 0
		for _, e := range m.Amounts {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if len(m.SubbadgeRanges) > 0 {
		for _, e := range m.SubbadgeRanges {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRevokeBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFreezeAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.AddressRanges) > 0 {
		for _, e := range m.AddressRanges {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.Add {
		n += 2
	}
	return n
}

func (m *MsgFreezeAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateUris) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.Uri != nil {
		l = m.Uri.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateUrisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.Permissions != 0 {
		n += 1 + sovTx(uint64(m.Permissions))
	}
	return n
}

func (m *MsgUpdatePermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.Address != 0 {
		n += 1 + sovTx(uint64(m.Address))
	}
	return n
}

func (m *MsgTransferManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestTransferManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	if m.Add {
		n += 2
	}
	return n
}

func (m *MsgRequestTransferManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSelfDestructBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	return n
}

func (m *MsgSelfDestructBadgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPruneBalances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BadgeIds) > 0 {
		l = 0
		for _, e := range m.BadgeIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Addresses) > 0 {
		l = 0
		for _, e := range m.Addresses {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgPruneBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BadgeId != 0 {
		n += 1 + sovTx(uint64(m.BadgeId))
	}
	l = len(m.NewBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateBytesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uri == nil {
				m.Uri = &UriObject{}
			}
			if err := m.Uri.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArbitraryBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArbitraryBytes = append(m.ArbitraryBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ArbitraryBytes == nil {
				m.ArbitraryBytes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubassetSupply", wireType)
			}
			m.DefaultSubassetSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultSubassetSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubassetSupplys = append(m.SubassetSupplys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SubassetSupplys) == 0 {
					m.SubassetSupplys = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubassetSupplys = append(m.SubassetSupplys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubassetSupplys", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubassetAmountsToCreate = append(m.SubassetAmountsToCreate, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SubassetAmountsToCreate) == 0 {
					m.SubassetAmountsToCreate = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubassetAmountsToCreate = append(m.SubassetAmountsToCreate, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubassetAmountsToCreate", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeAddressRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreezeAddressRanges = append(m.FreezeAddressRanges, &IdRange{})
			if err := m.FreezeAddressRanges[len(m.FreezeAddressRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			m.Standard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Standard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewSubBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewSubBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewSubBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Supplys = append(m.Supplys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Supplys) == 0 {
					m.Supplys = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Supplys = append(m.Supplys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplys", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AmountsToCreate = append(m.AmountsToCreate, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AmountsToCreate) == 0 {
					m.AmountsToCreate = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AmountsToCreate = append(m.AmountsToCreate, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountsToCreate", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewSubBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewSubBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewSubBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubassetId", wireType)
			}
			m.SubassetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubassetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ToAddresses = append(m.ToAddresses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ToAddresses) == 0 {
					m.ToAddresses = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ToAddresses = append(m.ToAddresses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddresses", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Amounts = append(m.Amounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Amounts) == 0 {
					m.Amounts = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Amounts = append(m.Amounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubbadgeRanges = append(m.SubbadgeRanges, &IdRange{})
			if err := m.SubbadgeRanges[len(m.SubbadgeRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CantCancelBeforeTime", wireType)
			}
			m.CantCancelBeforeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CantCancelBeforeTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestTransferBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestTransferBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestTransferBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubbadgeRanges = append(m.SubbadgeRanges, &IdRange{})
			if err := m.SubbadgeRanges[len(m.SubbadgeRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CantCancelBeforeTime", wireType)
			}
			m.CantCancelBeforeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CantCancelBeforeTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestTransferBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestTransferBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestTransferBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHandlePendingTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHandlePendingTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHandlePendingTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accept", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accept = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonceRanges = append(m.NonceRanges, &IdRange{})
			if err := m.NonceRanges[len(m.NonceRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcefulAccept", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcefulAccept = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHandlePendingTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHandlePendingTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHandlePendingTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetApproval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetApproval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetApproval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubbadgeRanges = append(m.SubbadgeRanges, &IdRange{})
			if err := m.SubbadgeRanges[len(m.SubbadgeRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetApprovalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetApprovalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetApprovalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Addresses = append(m.Addresses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Addresses) == 0 {
					m.Addresses = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Addresses = append(m.Addresses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Amounts = append(m.Amounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Amounts) == 0 {
					m.Amounts = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Amounts = append(m.Amounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubbadgeRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubbadgeRanges = append(m.SubbadgeRanges, &IdRange{})
			if err := m.SubbadgeRanges[len(m.SubbadgeRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFreezeAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFreezeAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFreezeAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressRanges = append(m.AddressRanges, &IdRange{})
			if err := m.AddressRanges[len(m.AddressRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Add = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFreezeAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFreezeAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFreezeAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateUris) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateUris: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateUris: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uri == nil {
				m.Uri = &UriObject{}
			}
			if err := m.Uri.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateUrisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateUrisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateUrisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestTransferManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestTransferManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestTransferManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Add = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestTransferManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestTransferManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestTransferManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelfDestructBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelfDestructBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelfDestructBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelfDestructBadgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelfDestructBadgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelfDestructBadgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPruneBalances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPruneBalances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPruneBalances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BadgeIds = append(m.BadgeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BadgeIds) == 0 {
					m.BadgeIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BadgeIds = append(m.BadgeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Addresses = append(m.Addresses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Addresses) == 0 {
					m.Addresses = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Addresses = append(m.Addresses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPruneBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPruneBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPruneBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeId", wireType)
			}
			m.BadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewBytes = append(m.NewBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.NewBytes == nil {
				m.NewBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBytesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBytesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBytesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

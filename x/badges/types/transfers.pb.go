// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/transfers.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserApprovedTransferTimeline struct {
	ApprovedTransfers []*UserApprovedTransfer `protobuf:"bytes,1,rep,name=approvedTransfers,proto3" json:"approvedTransfers,omitempty"`
	Times             []*IdRange              `protobuf:"bytes,2,rep,name=times,proto3" json:"times,omitempty"`
}

func (m *UserApprovedTransferTimeline) Reset()         { *m = UserApprovedTransferTimeline{} }
func (m *UserApprovedTransferTimeline) String() string { return proto.CompactTextString(m) }
func (*UserApprovedTransferTimeline) ProtoMessage()    {}
func (*UserApprovedTransferTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{0}
}
func (m *UserApprovedTransferTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserApprovedTransferTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserApprovedTransferTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserApprovedTransferTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserApprovedTransferTimeline.Merge(m, src)
}
func (m *UserApprovedTransferTimeline) XXX_Size() int {
	return m.Size()
}
func (m *UserApprovedTransferTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_UserApprovedTransferTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_UserApprovedTransferTimeline proto.InternalMessageInfo

func (m *UserApprovedTransferTimeline) GetApprovedTransfers() []*UserApprovedTransfer {
	if m != nil {
		return m.ApprovedTransfers
	}
	return nil
}

func (m *UserApprovedTransferTimeline) GetTimes() []*IdRange {
	if m != nil {
		return m.Times
	}
	return nil
}

// Defines a user balance object for a badge w/ the user's balances and approvals. All badge IDs for a collection are handled within this object.
type UserBalanceStore struct {
	Balances                  []*Balance                      `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
	ApprovedTransfersTimeline []*UserApprovedTransferTimeline `protobuf:"bytes,2,rep,name=approvedTransfersTimeline,proto3" json:"approvedTransfersTimeline,omitempty"`
	NextTransferTrackerId     Uint                            `protobuf:"bytes,3,opt,name=nextTransferTrackerId,proto3,customtype=Uint" json:"nextTransferTrackerId"`
	Permissions               *UserPermissions                `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *UserBalanceStore) Reset()         { *m = UserBalanceStore{} }
func (m *UserBalanceStore) String() string { return proto.CompactTextString(m) }
func (*UserBalanceStore) ProtoMessage()    {}
func (*UserBalanceStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{1}
}
func (m *UserBalanceStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBalanceStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBalanceStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserBalanceStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBalanceStore.Merge(m, src)
}
func (m *UserBalanceStore) XXX_Size() int {
	return m.Size()
}
func (m *UserBalanceStore) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBalanceStore.DiscardUnknown(m)
}

var xxx_messageInfo_UserBalanceStore proto.InternalMessageInfo

func (m *UserBalanceStore) GetBalances() []*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *UserBalanceStore) GetApprovedTransfersTimeline() []*UserApprovedTransferTimeline {
	if m != nil {
		return m.ApprovedTransfersTimeline
	}
	return nil
}

func (m *UserBalanceStore) GetPermissions() *UserPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type Restrictions struct {
	UnlimitedAmountPerAddress    bool `protobuf:"varint,1,opt,name=unlimitedAmountPerAddress,proto3" json:"unlimitedAmountPerAddress,omitempty"`
	AmountPerAddress             Uint `protobuf:"bytes,2,opt,name=amountPerAddress,proto3,customtype=Uint" json:"amountPerAddress"`
	UnlimitedTransfersPerAddress bool `protobuf:"varint,3,opt,name=unlimitedTransfersPerAddress,proto3" json:"unlimitedTransfersPerAddress,omitempty"`
	TransfersPerAddress          Uint `protobuf:"bytes,4,opt,name=transfersPerAddress,proto3,customtype=Uint" json:"transfersPerAddress"`
}

func (m *Restrictions) Reset()         { *m = Restrictions{} }
func (m *Restrictions) String() string { return proto.CompactTextString(m) }
func (*Restrictions) ProtoMessage()    {}
func (*Restrictions) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{2}
}
func (m *Restrictions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Restrictions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Restrictions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Restrictions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restrictions.Merge(m, src)
}
func (m *Restrictions) XXX_Size() int {
	return m.Size()
}
func (m *Restrictions) XXX_DiscardUnknown() {
	xxx_messageInfo_Restrictions.DiscardUnknown(m)
}

var xxx_messageInfo_Restrictions proto.InternalMessageInfo

func (m *Restrictions) GetUnlimitedAmountPerAddress() bool {
	if m != nil {
		return m.UnlimitedAmountPerAddress
	}
	return false
}

func (m *Restrictions) GetUnlimitedTransfersPerAddress() bool {
	if m != nil {
		return m.UnlimitedTransfersPerAddress
	}
	return false
}

// We will add more fields to this message later (e.g. ZKP proofs)
type Challenge struct {
	Root                    string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	ExpectedProofLength     Uint   `protobuf:"bytes,2,opt,name=expectedProofLength,proto3,customtype=Uint" json:"expectedProofLength"`
	UseCreatorAddressAsLeaf bool   `protobuf:"varint,3,opt,name=useCreatorAddressAsLeaf,proto3" json:"useCreatorAddressAsLeaf,omitempty"`
	//For codes, this should always be true.
	//For whitelist, you can choose to allow multiple uses per leaf. We provide this as an option for flexibility.
	//For example, if you want to allow addresses to claim multiple times, you can set this to false.
	MaxOneUsePerLeaf bool `protobuf:"varint,4,opt,name=maxOneUsePerLeaf,proto3" json:"maxOneUsePerLeaf,omitempty"`
	//If true, then the order of the leaves in the claim matters. If false, then the order of the leaves in the claim does not matter.
	//The leftmost leaf (2^expectedProofLength) is the first leaf and will transfer the starting amounts.
	//The second leaf will transfer the starting amounts + incrementIdsBy.
	//And so on.
	UseLeafIndexForDistributionOrder bool `protobuf:"varint,5,opt,name=useLeafIndexForDistributionOrder,proto3" json:"useLeafIndexForDistributionOrder,omitempty"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{3}
}
func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return m.Size()
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *Challenge) GetUseCreatorAddressAsLeaf() bool {
	if m != nil {
		return m.UseCreatorAddressAsLeaf
	}
	return false
}

func (m *Challenge) GetMaxOneUsePerLeaf() bool {
	if m != nil {
		return m.MaxOneUsePerLeaf
	}
	return false
}

func (m *Challenge) GetUseLeafIndexForDistributionOrder() bool {
	if m != nil {
		return m.UseLeafIndexForDistributionOrder
	}
	return false
}

type Claim struct {
	Uri              string       `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	CustomData       string       `protobuf:"bytes,2,opt,name=customData,proto3" json:"customData,omitempty"`
	IncrementIdsBy   Uint         `protobuf:"bytes,3,opt,name=incrementIdsBy,proto3,customtype=Uint" json:"incrementIdsBy"`
	IncrementTimesBy Uint         `protobuf:"bytes,4,opt,name=incrementTimesBy,proto3,customtype=Uint" json:"incrementTimesBy"`
	StartAmounts     []*Balance   `protobuf:"bytes,5,rep,name=startAmounts,proto3" json:"startAmounts,omitempty"`
	Challenges       []*Challenge `protobuf:"bytes,6,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{4}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func (m *Claim) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Claim) GetCustomData() string {
	if m != nil {
		return m.CustomData
	}
	return ""
}

func (m *Claim) GetStartAmounts() []*Balance {
	if m != nil {
		return m.StartAmounts
	}
	return nil
}

func (m *Claim) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

type AmountRestrictions struct {
	BalancesTimes           []*IdRange    `protobuf:"bytes,1,rep,name=balancesTimes,proto3" json:"balancesTimes,omitempty"`
	UnlimitedAmount         bool          `protobuf:"varint,2,opt,name=unlimitedAmount,proto3" json:"unlimitedAmount,omitempty"`
	Amount                  Uint          `protobuf:"bytes,3,opt,name=amount,proto3,customtype=Uint" json:"amount"`
	UnlimitedTransfers      bool          `protobuf:"varint,4,opt,name=unlimitedTransfers,proto3" json:"unlimitedTransfers,omitempty"`
	MaxNumTransfers         Uint          `protobuf:"bytes,5,opt,name=maxNumTransfers,proto3,customtype=Uint" json:"maxNumTransfers"`
	FromRestrictions        *Restrictions `protobuf:"bytes,6,opt,name=fromRestrictions,proto3" json:"fromRestrictions,omitempty"`
	ToRestrictions          *Restrictions `protobuf:"bytes,7,opt,name=toRestrictions,proto3" json:"toRestrictions,omitempty"`
	InitiatedByRestrictions *Restrictions `protobuf:"bytes,8,opt,name=initiatedByRestrictions,proto3" json:"initiatedByRestrictions,omitempty"`
}

func (m *AmountRestrictions) Reset()         { *m = AmountRestrictions{} }
func (m *AmountRestrictions) String() string { return proto.CompactTextString(m) }
func (*AmountRestrictions) ProtoMessage()    {}
func (*AmountRestrictions) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{5}
}
func (m *AmountRestrictions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmountRestrictions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmountRestrictions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmountRestrictions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmountRestrictions.Merge(m, src)
}
func (m *AmountRestrictions) XXX_Size() int {
	return m.Size()
}
func (m *AmountRestrictions) XXX_DiscardUnknown() {
	xxx_messageInfo_AmountRestrictions.DiscardUnknown(m)
}

var xxx_messageInfo_AmountRestrictions proto.InternalMessageInfo

func (m *AmountRestrictions) GetBalancesTimes() []*IdRange {
	if m != nil {
		return m.BalancesTimes
	}
	return nil
}

func (m *AmountRestrictions) GetUnlimitedAmount() bool {
	if m != nil {
		return m.UnlimitedAmount
	}
	return false
}

func (m *AmountRestrictions) GetUnlimitedTransfers() bool {
	if m != nil {
		return m.UnlimitedTransfers
	}
	return false
}

func (m *AmountRestrictions) GetFromRestrictions() *Restrictions {
	if m != nil {
		return m.FromRestrictions
	}
	return nil
}

func (m *AmountRestrictions) GetToRestrictions() *Restrictions {
	if m != nil {
		return m.ToRestrictions
	}
	return nil
}

func (m *AmountRestrictions) GetInitiatedByRestrictions() *Restrictions {
	if m != nil {
		return m.InitiatedByRestrictions
	}
	return nil
}

type IsTransferAllowed struct {
	InvertTo            bool `protobuf:"varint,2,opt,name=invertTo,proto3" json:"invertTo,omitempty"`
	InvertInitiatedBy   bool `protobuf:"varint,3,opt,name=invertInitiatedBy,proto3" json:"invertInitiatedBy,omitempty"`
	InvertTransferTimes bool `protobuf:"varint,4,opt,name=invertTransferTimes,proto3" json:"invertTransferTimes,omitempty"`
	InvertBadgeIds      bool `protobuf:"varint,5,opt,name=invertBadgeIds,proto3" json:"invertBadgeIds,omitempty"`
	IsAllowed           bool `protobuf:"varint,6,opt,name=isAllowed,proto3" json:"isAllowed,omitempty"`
}

func (m *IsTransferAllowed) Reset()         { *m = IsTransferAllowed{} }
func (m *IsTransferAllowed) String() string { return proto.CompactTextString(m) }
func (*IsTransferAllowed) ProtoMessage()    {}
func (*IsTransferAllowed) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{6}
}
func (m *IsTransferAllowed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTransferAllowed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTransferAllowed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTransferAllowed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTransferAllowed.Merge(m, src)
}
func (m *IsTransferAllowed) XXX_Size() int {
	return m.Size()
}
func (m *IsTransferAllowed) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTransferAllowed.DiscardUnknown(m)
}

var xxx_messageInfo_IsTransferAllowed proto.InternalMessageInfo

func (m *IsTransferAllowed) GetInvertTo() bool {
	if m != nil {
		return m.InvertTo
	}
	return false
}

func (m *IsTransferAllowed) GetInvertInitiatedBy() bool {
	if m != nil {
		return m.InvertInitiatedBy
	}
	return false
}

func (m *IsTransferAllowed) GetInvertTransferTimes() bool {
	if m != nil {
		return m.InvertTransferTimes
	}
	return false
}

func (m *IsTransferAllowed) GetInvertBadgeIds() bool {
	if m != nil {
		return m.InvertBadgeIds
	}
	return false
}

func (m *IsTransferAllowed) GetIsAllowed() bool {
	if m != nil {
		return m.IsAllowed
	}
	return false
}

type UserApprovedTransfer struct {
	ToMappingId          string     `protobuf:"bytes,1,opt,name=toMappingId,proto3" json:"toMappingId,omitempty"`
	InitiatedByMappingId string     `protobuf:"bytes,2,opt,name=initiatedByMappingId,proto3" json:"initiatedByMappingId,omitempty"`
	TransferTimes        []*IdRange `protobuf:"bytes,3,rep,name=transferTimes,proto3" json:"transferTimes,omitempty"`
	BadgeIds             []*IdRange `protobuf:"bytes,4,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	//Ensure there is no overlap between allowed and disallowed combinations.
	AllowedCombinations []*IsTransferAllowed `protobuf:"bytes,5,rep,name=allowedCombinations,proto3" json:"allowedCombinations,omitempty"`
	//If everything above matches, we check the restrictions below
	AmountRestrictions []*AmountRestrictions `protobuf:"bytes,7,rep,name=amountRestrictions,proto3" json:"amountRestrictions,omitempty"`
	//The transferTrackerId is used to track the number of transfers that have happened for this collection.
	TransferTrackerId Uint `protobuf:"bytes,6,opt,name=transferTrackerId,proto3,customtype=Uint" json:"transferTrackerId"`
	//Claim fields
	Claim *Claim `protobuf:"bytes,8,opt,name=claim,proto3" json:"claim,omitempty"`
	//The rest of the fields are for handling transfers, if it is deemed allowed and has valid badgeIDs are for handling transfers, if it is deemed allowed and has valid badgeIDs.
	RequireToEqualsInitiatedBy       bool `protobuf:"varint,9,opt,name=requireToEqualsInitiatedBy,proto3" json:"requireToEqualsInitiatedBy,omitempty"`
	RequireToDoesNotEqualInitiatedBy bool `protobuf:"varint,10,opt,name=requireToDoesNotEqualInitiatedBy,proto3" json:"requireToDoesNotEqualInitiatedBy,omitempty"`
}

func (m *UserApprovedTransfer) Reset()         { *m = UserApprovedTransfer{} }
func (m *UserApprovedTransfer) String() string { return proto.CompactTextString(m) }
func (*UserApprovedTransfer) ProtoMessage()    {}
func (*UserApprovedTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{7}
}
func (m *UserApprovedTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserApprovedTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserApprovedTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserApprovedTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserApprovedTransfer.Merge(m, src)
}
func (m *UserApprovedTransfer) XXX_Size() int {
	return m.Size()
}
func (m *UserApprovedTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_UserApprovedTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_UserApprovedTransfer proto.InternalMessageInfo

func (m *UserApprovedTransfer) GetToMappingId() string {
	if m != nil {
		return m.ToMappingId
	}
	return ""
}

func (m *UserApprovedTransfer) GetInitiatedByMappingId() string {
	if m != nil {
		return m.InitiatedByMappingId
	}
	return ""
}

func (m *UserApprovedTransfer) GetTransferTimes() []*IdRange {
	if m != nil {
		return m.TransferTimes
	}
	return nil
}

func (m *UserApprovedTransfer) GetBadgeIds() []*IdRange {
	if m != nil {
		return m.BadgeIds
	}
	return nil
}

func (m *UserApprovedTransfer) GetAllowedCombinations() []*IsTransferAllowed {
	if m != nil {
		return m.AllowedCombinations
	}
	return nil
}

func (m *UserApprovedTransfer) GetAmountRestrictions() []*AmountRestrictions {
	if m != nil {
		return m.AmountRestrictions
	}
	return nil
}

func (m *UserApprovedTransfer) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *UserApprovedTransfer) GetRequireToEqualsInitiatedBy() bool {
	if m != nil {
		return m.RequireToEqualsInitiatedBy
	}
	return false
}

func (m *UserApprovedTransfer) GetRequireToDoesNotEqualInitiatedBy() bool {
	if m != nil {
		return m.RequireToDoesNotEqualInitiatedBy
	}
	return false
}

type IsCollectionTransferAllowed struct {
	InvertFrom          bool `protobuf:"varint,1,opt,name=invertFrom,proto3" json:"invertFrom,omitempty"`
	InvertTo            bool `protobuf:"varint,2,opt,name=invertTo,proto3" json:"invertTo,omitempty"`
	InvertInitiatedBy   bool `protobuf:"varint,3,opt,name=invertInitiatedBy,proto3" json:"invertInitiatedBy,omitempty"`
	InvertTransferTimes bool `protobuf:"varint,4,opt,name=invertTransferTimes,proto3" json:"invertTransferTimes,omitempty"`
	InvertBadgeIds      bool `protobuf:"varint,5,opt,name=invertBadgeIds,proto3" json:"invertBadgeIds,omitempty"`
	IsAllowed           bool `protobuf:"varint,6,opt,name=isAllowed,proto3" json:"isAllowed,omitempty"`
}

func (m *IsCollectionTransferAllowed) Reset()         { *m = IsCollectionTransferAllowed{} }
func (m *IsCollectionTransferAllowed) String() string { return proto.CompactTextString(m) }
func (*IsCollectionTransferAllowed) ProtoMessage()    {}
func (*IsCollectionTransferAllowed) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{8}
}
func (m *IsCollectionTransferAllowed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsCollectionTransferAllowed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsCollectionTransferAllowed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsCollectionTransferAllowed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsCollectionTransferAllowed.Merge(m, src)
}
func (m *IsCollectionTransferAllowed) XXX_Size() int {
	return m.Size()
}
func (m *IsCollectionTransferAllowed) XXX_DiscardUnknown() {
	xxx_messageInfo_IsCollectionTransferAllowed.DiscardUnknown(m)
}

var xxx_messageInfo_IsCollectionTransferAllowed proto.InternalMessageInfo

func (m *IsCollectionTransferAllowed) GetInvertFrom() bool {
	if m != nil {
		return m.InvertFrom
	}
	return false
}

func (m *IsCollectionTransferAllowed) GetInvertTo() bool {
	if m != nil {
		return m.InvertTo
	}
	return false
}

func (m *IsCollectionTransferAllowed) GetInvertInitiatedBy() bool {
	if m != nil {
		return m.InvertInitiatedBy
	}
	return false
}

func (m *IsCollectionTransferAllowed) GetInvertTransferTimes() bool {
	if m != nil {
		return m.InvertTransferTimes
	}
	return false
}

func (m *IsCollectionTransferAllowed) GetInvertBadgeIds() bool {
	if m != nil {
		return m.InvertBadgeIds
	}
	return false
}

func (m *IsCollectionTransferAllowed) GetIsAllowed() bool {
	if m != nil {
		return m.IsAllowed
	}
	return false
}

type CollectionApprovedTransfer struct {
	FromMappingId        string     `protobuf:"bytes,1,opt,name=fromMappingId,proto3" json:"fromMappingId,omitempty"`
	ToMappingId          string     `protobuf:"bytes,2,opt,name=toMappingId,proto3" json:"toMappingId,omitempty"`
	InitiatedByMappingId string     `protobuf:"bytes,3,opt,name=initiatedByMappingId,proto3" json:"initiatedByMappingId,omitempty"`
	TransferTimes        []*IdRange `protobuf:"bytes,4,rep,name=transferTimes,proto3" json:"transferTimes,omitempty"`
	BadgeIds             []*IdRange `protobuf:"bytes,5,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	//Ensure there is no overlap between allowed and disallowed combinations.
	AllowedCombinations []*IsCollectionTransferAllowed `protobuf:"bytes,6,rep,name=allowedCombinations,proto3" json:"allowedCombinations,omitempty"`
	//If everything above matches, we check the restrictions below
	AmountRestrictions []*AmountRestrictions `protobuf:"bytes,8,rep,name=amountRestrictions,proto3" json:"amountRestrictions,omitempty"`
	//The transferTrackerId is used to track the number of transfers that have happened for this collection.
	TransferTrackerId Uint `protobuf:"bytes,9,opt,name=transferTrackerId,proto3,customtype=Uint" json:"transferTrackerId"`
	//Claim fields
	Claim *Claim `protobuf:"bytes,10,opt,name=claim,proto3" json:"claim,omitempty"`
	//If true, then we do not even check the approvals and allow the transfer.
	//No approval will be deducted, this step is skipped.
	//Required to be true for transfers because 'Mint' address does not have and will never have any approvals.
	OverridesFromApprovedTransfers     bool `protobuf:"varint,11,opt,name=overridesFromApprovedTransfers,proto3" json:"overridesFromApprovedTransfers,omitempty"`
	RequireToEqualsInitiatedBy         bool `protobuf:"varint,12,opt,name=requireToEqualsInitiatedBy,proto3" json:"requireToEqualsInitiatedBy,omitempty"`
	RequireFromEqualsInitiatedBy       bool `protobuf:"varint,13,opt,name=requireFromEqualsInitiatedBy,proto3" json:"requireFromEqualsInitiatedBy,omitempty"`
	RequireToDoesNotEqualInitiatedBy   bool `protobuf:"varint,14,opt,name=requireToDoesNotEqualInitiatedBy,proto3" json:"requireToDoesNotEqualInitiatedBy,omitempty"`
	RequireFromDoesNotEqualInitiatedBy bool `protobuf:"varint,15,opt,name=requireFromDoesNotEqualInitiatedBy,proto3" json:"requireFromDoesNotEqualInitiatedBy,omitempty"`
}

func (m *CollectionApprovedTransfer) Reset()         { *m = CollectionApprovedTransfer{} }
func (m *CollectionApprovedTransfer) String() string { return proto.CompactTextString(m) }
func (*CollectionApprovedTransfer) ProtoMessage()    {}
func (*CollectionApprovedTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7d8388ebf2a03f, []int{9}
}
func (m *CollectionApprovedTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionApprovedTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionApprovedTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionApprovedTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionApprovedTransfer.Merge(m, src)
}
func (m *CollectionApprovedTransfer) XXX_Size() int {
	return m.Size()
}
func (m *CollectionApprovedTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionApprovedTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionApprovedTransfer proto.InternalMessageInfo

func (m *CollectionApprovedTransfer) GetFromMappingId() string {
	if m != nil {
		return m.FromMappingId
	}
	return ""
}

func (m *CollectionApprovedTransfer) GetToMappingId() string {
	if m != nil {
		return m.ToMappingId
	}
	return ""
}

func (m *CollectionApprovedTransfer) GetInitiatedByMappingId() string {
	if m != nil {
		return m.InitiatedByMappingId
	}
	return ""
}

func (m *CollectionApprovedTransfer) GetTransferTimes() []*IdRange {
	if m != nil {
		return m.TransferTimes
	}
	return nil
}

func (m *CollectionApprovedTransfer) GetBadgeIds() []*IdRange {
	if m != nil {
		return m.BadgeIds
	}
	return nil
}

func (m *CollectionApprovedTransfer) GetAllowedCombinations() []*IsCollectionTransferAllowed {
	if m != nil {
		return m.AllowedCombinations
	}
	return nil
}

func (m *CollectionApprovedTransfer) GetAmountRestrictions() []*AmountRestrictions {
	if m != nil {
		return m.AmountRestrictions
	}
	return nil
}

func (m *CollectionApprovedTransfer) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *CollectionApprovedTransfer) GetOverridesFromApprovedTransfers() bool {
	if m != nil {
		return m.OverridesFromApprovedTransfers
	}
	return false
}

func (m *CollectionApprovedTransfer) GetRequireToEqualsInitiatedBy() bool {
	if m != nil {
		return m.RequireToEqualsInitiatedBy
	}
	return false
}

func (m *CollectionApprovedTransfer) GetRequireFromEqualsInitiatedBy() bool {
	if m != nil {
		return m.RequireFromEqualsInitiatedBy
	}
	return false
}

func (m *CollectionApprovedTransfer) GetRequireToDoesNotEqualInitiatedBy() bool {
	if m != nil {
		return m.RequireToDoesNotEqualInitiatedBy
	}
	return false
}

func (m *CollectionApprovedTransfer) GetRequireFromDoesNotEqualInitiatedBy() bool {
	if m != nil {
		return m.RequireFromDoesNotEqualInitiatedBy
	}
	return false
}

func init() {
	proto.RegisterType((*UserApprovedTransferTimeline)(nil), "bitbadges.bitbadgeschain.badges.UserApprovedTransferTimeline")
	proto.RegisterType((*UserBalanceStore)(nil), "bitbadges.bitbadgeschain.badges.UserBalanceStore")
	proto.RegisterType((*Restrictions)(nil), "bitbadges.bitbadgeschain.badges.Restrictions")
	proto.RegisterType((*Challenge)(nil), "bitbadges.bitbadgeschain.badges.Challenge")
	proto.RegisterType((*Claim)(nil), "bitbadges.bitbadgeschain.badges.Claim")
	proto.RegisterType((*AmountRestrictions)(nil), "bitbadges.bitbadgeschain.badges.AmountRestrictions")
	proto.RegisterType((*IsTransferAllowed)(nil), "bitbadges.bitbadgeschain.badges.IsTransferAllowed")
	proto.RegisterType((*UserApprovedTransfer)(nil), "bitbadges.bitbadgeschain.badges.UserApprovedTransfer")
	proto.RegisterType((*IsCollectionTransferAllowed)(nil), "bitbadges.bitbadgeschain.badges.IsCollectionTransferAllowed")
	proto.RegisterType((*CollectionApprovedTransfer)(nil), "bitbadges.bitbadgeschain.badges.CollectionApprovedTransfer")
}

func init() { proto.RegisterFile("badges/transfers.proto", fileDescriptor_db7d8388ebf2a03f) }

var fileDescriptor_db7d8388ebf2a03f = []byte{
	// 1200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0x8e, 0xbf, 0x52, 0xfb, 0x24, 0xcd, 0xc7, 0x24, 0x7d, 0xeb, 0xfa, 0x8d, 0x1c, 0xcb, 0xaa,
	0x2a, 0xab, 0x02, 0xbb, 0x4a, 0x01, 0x55, 0x28, 0x44, 0xb2, 0x13, 0x22, 0xb9, 0x0a, 0x69, 0xb4,
	0x24, 0x17, 0x70, 0x37, 0xde, 0x3d, 0x71, 0x46, 0x78, 0x77, 0xdc, 0x99, 0x71, 0x70, 0xc4, 0x3f,
	0xe0, 0x0a, 0x7e, 0x0d, 0x3f, 0xa0, 0x37, 0xbd, 0xac, 0x84, 0x90, 0x10, 0x17, 0x15, 0x4a, 0xc4,
	0x25, 0xbf, 0x01, 0xb4, 0x5f, 0xf6, 0x7a, 0x77, 0x9d, 0xb5, 0x23, 0xc4, 0x05, 0x77, 0x93, 0x33,
	0xcf, 0x79, 0x66, 0xce, 0xd7, 0x33, 0x1b, 0xc3, 0xff, 0x3a, 0xd4, 0xe8, 0xa2, 0x6c, 0x28, 0x41,
	0x2d, 0x79, 0x8e, 0x42, 0xd6, 0xfb, 0x82, 0x2b, 0x4e, 0xb6, 0x3b, 0x4c, 0xb9, 0x5b, 0xf5, 0xd1,
	0x4a, 0xbf, 0xa0, 0xcc, 0xaa, 0xbb, 0xeb, 0xd2, 0x66, 0x97, 0x77, 0xb9, 0x83, 0x6d, 0xd8, 0x2b,
	0xd7, 0xad, 0x54, 0xf4, 0xe8, 0xfa, 0x28, 0x4c, 0x26, 0x25, 0xe3, 0x96, 0x47, 0x58, 0xf2, 0x0f,
	0xa2, 0x86, 0x21, 0x50, 0x4a, 0xf4, 0xed, 0x0f, 0x3c, 0x7b, 0x87, 0xf6, 0xa8, 0xa5, 0xfb, 0xe6,
	0xea, 0x9b, 0x14, 0x6c, 0x9d, 0x49, 0x14, 0xcd, 0x7e, 0x5f, 0xf0, 0x4b, 0x34, 0x4e, 0xbd, 0xfb,
	0x9d, 0x32, 0x13, 0x7b, 0xcc, 0x42, 0xa2, 0xc3, 0x3a, 0x0d, 0xed, 0xc9, 0x62, 0xaa, 0x92, 0xa9,
	0x2d, 0xed, 0x7c, 0x5c, 0x4f, 0xb8, 0x7c, 0x3d, 0x8e, 0x59, 0x8b, 0xf2, 0x91, 0x3d, 0xc8, 0x29,
	0x66, 0xa2, 0x2c, 0xa6, 0x1d, 0xe2, 0x5a, 0x22, 0x71, 0xdb, 0xd0, 0xa8, 0xd5, 0x45, 0xcd, 0x75,
	0xab, 0xfe, 0x99, 0x86, 0x35, 0xfb, 0xac, 0x96, 0x1b, 0xdc, 0x97, 0x8a, 0x0b, 0x24, 0x07, 0x90,
	0xf7, 0x83, 0xf5, 0x2e, 0x9c, 0xcc, 0xeb, 0x11, 0x68, 0x23, 0x4f, 0xf2, 0x1d, 0x3c, 0x8a, 0xdc,
	0xd7, 0x4f, 0x8e, 0x77, 0xdd, 0xcf, 0xee, 0x94, 0x07, 0x9f, 0x44, 0x9b, 0xce, 0x4f, 0x5a, 0xf0,
	0xc0, 0xc2, 0xa1, 0x1a, 0xb9, 0x08, 0xaa, 0x7f, 0x83, 0xa2, 0x6d, 0x14, 0x33, 0x95, 0x54, 0xad,
	0xd0, 0x5a, 0x7e, 0xfb, 0x7e, 0x7b, 0xe1, 0xb7, 0xf7, 0xdb, 0xd9, 0x33, 0x66, 0x29, 0x2d, 0x1e,
	0x4a, 0x34, 0x58, 0x0a, 0x74, 0x49, 0x31, 0x5b, 0x49, 0xd5, 0x96, 0x76, 0x9e, 0xcd, 0x74, 0xe5,
	0x93, 0xb1, 0x9f, 0x16, 0x24, 0xa9, 0x7e, 0x9f, 0x86, 0x65, 0x0d, 0xa5, 0x12, 0x4c, 0x57, 0xb6,
	0x81, 0xec, 0xc2, 0xa3, 0x81, 0xd5, 0x63, 0x26, 0x53, 0x68, 0x34, 0x4d, 0x3e, 0xb0, 0xd4, 0x09,
	0x8a, 0xa6, 0xdb, 0x82, 0xc5, 0x54, 0x25, 0x55, 0xcb, 0x6b, 0xd3, 0x01, 0xe4, 0x05, 0xac, 0xd1,
	0xb0, 0x53, 0x3a, 0x26, 0xc2, 0x08, 0x8a, 0xb4, 0x60, 0x6b, 0x44, 0x3b, 0x4a, 0x5f, 0x80, 0x25,
	0xe3, 0x1c, 0x7d, 0x2b, 0x86, 0xec, 0xc1, 0x86, 0x8a, 0x71, 0xcd, 0xc6, 0x5c, 0x20, 0x0e, 0x58,
	0xfd, 0x31, 0x0d, 0x85, 0xfd, 0x0b, 0xda, 0xeb, 0xa1, 0xd5, 0x45, 0x42, 0x20, 0x2b, 0x38, 0x57,
	0x4e, 0xd0, 0x05, 0xcd, 0x59, 0xdb, 0x27, 0xe0, 0xb0, 0x8f, 0xba, 0x42, 0xe3, 0x44, 0x70, 0x7e,
	0x7e, 0x84, 0x56, 0x57, 0x5d, 0xc4, 0x86, 0x18, 0x07, 0x24, 0x2f, 0xe0, 0xe1, 0x40, 0xe2, 0xbe,
	0x40, 0xaa, 0xb8, 0x7f, 0x6c, 0x53, 0x1e, 0x21, 0x3d, 0xf7, 0x02, 0x9c, 0xb6, 0x4d, 0x9e, 0xc2,
	0x9a, 0x49, 0x87, 0xaf, 0x2c, 0x3c, 0x93, 0x78, 0x82, 0xc2, 0x71, 0xc9, 0x3a, 0x2e, 0x11, 0x3b,
	0x79, 0x09, 0x95, 0x81, 0x44, 0x7b, 0xd9, 0xb6, 0x0c, 0x1c, 0x1e, 0x72, 0x71, 0xc0, 0xec, 0x12,
	0x77, 0x06, 0x76, 0x8d, 0x5f, 0x09, 0x03, 0x45, 0x31, 0xe7, 0xf8, 0x26, 0xe2, 0xaa, 0x6f, 0xd2,
	0x90, 0xdb, 0xef, 0x51, 0x66, 0x92, 0x35, 0xc8, 0x0c, 0x04, 0xf3, 0xd2, 0x61, 0x2f, 0x49, 0x19,
	0x40, 0x1f, 0x48, 0xc5, 0xcd, 0x03, 0xaa, 0xa8, 0x9b, 0x04, 0x2d, 0x60, 0x21, 0x1f, 0xc1, 0x0a,
	0xb3, 0x74, 0x81, 0x26, 0x5a, 0xaa, 0x6d, 0xc8, 0xd6, 0x55, 0x6c, 0xb7, 0x87, 0x30, 0x76, 0x0f,
	0x8d, 0x2c, 0xf6, 0xfc, 0xd8, 0x7e, 0x71, 0x25, 0x8c, 0xa0, 0xc8, 0x11, 0x2c, 0x4b, 0x45, 0x85,
	0x72, 0xdb, 0x52, 0x16, 0x73, 0x73, 0x6a, 0xc5, 0x84, 0x37, 0x79, 0x09, 0xa0, 0xfb, 0xcd, 0x20,
	0x8b, 0x8b, 0x0e, 0xd7, 0xd3, 0x44, 0xae, 0x51, 0xff, 0x68, 0x01, 0xef, 0xea, 0x4f, 0x59, 0x20,
	0x2e, 0xef, 0xc4, 0xb0, 0x1d, 0xc3, 0x7d, 0x5f, 0x9e, 0x9c, 0x18, 0x66, 0x56, 0x37, 0x5f, 0x35,
	0x27, 0xdd, 0x49, 0x0d, 0x56, 0x43, 0xb3, 0xe9, 0x54, 0x25, 0xaf, 0x85, 0xcd, 0xe4, 0x31, 0x2c,
	0xba, 0x23, 0x18, 0x5b, 0x12, 0x6f, 0x8f, 0xd4, 0x81, 0x44, 0x07, 0xce, 0x6b, 0xbb, 0x98, 0x1d,
	0xf2, 0x09, 0xac, 0x9a, 0x74, 0x78, 0x3c, 0x30, 0xc7, 0xe0, 0x5c, 0x0c, 0x7d, 0x18, 0x44, 0xbe,
	0x82, 0xb5, 0x73, 0xc1, 0xcd, 0x60, 0x6e, 0x8a, 0x8b, 0x8e, 0xbc, 0x7d, 0x98, 0x98, 0x8a, 0xa0,
	0x93, 0x16, 0xa1, 0x21, 0x67, 0xb0, 0xa2, 0xf8, 0x04, 0xf1, 0xbd, 0xbb, 0x10, 0x87, 0x48, 0x48,
	0x17, 0x1e, 0x32, 0x8b, 0x29, 0x46, 0x15, 0x1a, 0xad, 0xab, 0x09, 0xfe, 0xfc, 0x5d, 0xf8, 0xa7,
	0xb1, 0x55, 0x7f, 0x49, 0xc1, 0x7a, 0x5b, 0xfa, 0xa9, 0x6a, 0xf6, 0x7a, 0xfc, 0x5b, 0x34, 0x48,
	0x09, 0xf2, 0xcc, 0xba, 0x44, 0xa1, 0x4e, 0xb9, 0x57, 0xe1, 0xd1, 0xdf, 0xe4, 0x03, 0x58, 0x77,
	0xd7, 0xed, 0x31, 0xa5, 0xa7, 0x2e, 0xd1, 0x0d, 0xf2, 0x0c, 0x36, 0x3c, 0xcf, 0xc0, 0x6b, 0xe6,
	0xd7, 0x38, 0x6e, 0x8b, 0x3c, 0xb1, 0xa7, 0xda, 0x36, 0xb7, 0xec, 0x38, 0xda, 0x86, 0xf4, 0xb4,
	0x24, 0x64, 0x25, 0x5b, 0x50, 0x60, 0xd2, 0xbb, 0xb0, 0x53, 0xcd, 0xbc, 0x36, 0x36, 0x54, 0x7f,
	0xce, 0xc1, 0x66, 0xdc, 0x63, 0x4a, 0x2a, 0xb0, 0xa4, 0xf8, 0x17, 0xb4, 0xdf, 0x67, 0x56, 0xb7,
	0x6d, 0x78, 0x72, 0x13, 0x34, 0x91, 0x1d, 0xd8, 0x0c, 0x64, 0x6b, 0x0c, 0x75, 0x05, 0x28, 0x76,
	0xcf, 0x9e, 0x34, 0x35, 0x11, 0x60, 0x66, 0xde, 0x49, 0x9b, 0x70, 0x77, 0x3f, 0x49, 0xbc, 0xf0,
	0xb3, 0x73, 0x52, 0x8d, 0x3c, 0x89, 0x01, 0x1b, 0xd4, 0xcd, 0xc7, 0x3e, 0x37, 0x3b, 0xcc, 0xa2,
	0x6e, 0x07, 0xb9, 0xba, 0xb5, 0x93, 0x4c, 0x18, 0xee, 0x0b, 0x2d, 0x8e, 0x8e, 0xe8, 0x40, 0x68,
	0x44, 0x7b, 0x8a, 0xf7, 0x9c, 0x43, 0x9e, 0x27, 0x1e, 0x12, 0x95, 0x2d, 0x2d, 0x86, 0x8e, 0x7c,
	0x0a, 0xeb, 0x2a, 0xf2, 0x71, 0xb3, 0x18, 0x33, 0xfc, 0x51, 0x18, 0xd9, 0x85, 0x9c, 0x6e, 0x3f,
	0x31, 0xde, 0xe8, 0x3c, 0x49, 0x16, 0x59, 0x1b, 0xad, 0xb9, 0x4e, 0x64, 0x0f, 0x4a, 0x02, 0x5f,
	0x0f, 0x98, 0xc0, 0x53, 0xfe, 0xf9, 0xeb, 0x01, 0xed, 0xc9, 0x60, 0xe3, 0x17, 0x9c, 0xc6, 0xbb,
	0x05, 0x61, 0xbf, 0x96, 0xa3, 0xdd, 0x03, 0x8e, 0xf2, 0x98, 0x2b, 0x07, 0x14, 0x64, 0x01, 0xf7,
	0xb5, 0x4c, 0xc2, 0x55, 0xff, 0x4a, 0xc1, 0xff, 0xdb, 0x72, 0x9f, 0xf7, 0x7a, 0xe8, 0xe4, 0x25,
	0x3c, 0xb7, 0x65, 0x00, 0x77, 0x4a, 0x0e, 0x05, 0x37, 0xbd, 0xcf, 0xa9, 0x80, 0xe5, 0x3f, 0x30,
	0xd7, 0x7f, 0xdc, 0x83, 0xd2, 0x38, 0xfe, 0xc8, 0x74, 0x3f, 0x86, 0xfb, 0xb6, 0x44, 0x87, 0xe7,
	0x7b, 0xd2, 0x18, 0xd6, 0x80, 0xf4, 0xec, 0x1a, 0x90, 0x99, 0x47, 0x03, 0xb2, 0xff, 0x9c, 0x06,
	0xe4, 0xee, 0xac, 0x01, 0x56, 0xbc, 0x06, 0xb8, 0xdf, 0x1b, 0xbb, 0x33, 0x68, 0xc0, 0xd4, 0x6e,
	0x9b, 0x47, 0x0d, 0xf2, 0xff, 0x82, 0x1a, 0x14, 0xe6, 0x54, 0x03, 0xb8, 0x8b, 0x1a, 0x1c, 0x42,
	0x99, 0x5f, 0xa2, 0x10, 0xcc, 0x40, 0x69, 0x8f, 0x54, 0x33, 0xf2, 0x2f, 0xef, 0x92, 0xd3, 0xb2,
	0x09, 0xa8, 0x04, 0x55, 0x59, 0x4e, 0x54, 0x95, 0x16, 0x6c, 0x79, 0xbb, 0x36, 0x7f, 0x94, 0xe1,
	0xbe, 0xfb, 0xff, 0xcc, 0x6d, 0x98, 0x99, 0x94, 0x69, 0x65, 0x36, 0x65, 0x22, 0xc7, 0x50, 0x0d,
	0x9c, 0x35, 0x8d, 0x6d, 0xd5, 0x61, 0x9b, 0x01, 0xd9, 0x3a, 0x7a, 0x7b, 0x5d, 0x4e, 0xbd, 0xbb,
	0x2e, 0xa7, 0x7e, 0xbf, 0x2e, 0xa7, 0x7e, 0xb8, 0x29, 0x2f, 0xbc, 0xbb, 0x29, 0x2f, 0xfc, 0x7a,
	0x53, 0x5e, 0xf8, 0x7a, 0xa7, 0xcb, 0xd4, 0xc5, 0xa0, 0x53, 0xd7, 0xb9, 0xd9, 0x18, 0x15, 0xac,
	0x31, 0x59, 0xba, 0xc6, 0xb0, 0xe1, 0xff, 0x8c, 0x72, 0xd5, 0x47, 0xd9, 0x59, 0x74, 0x7e, 0xc3,
	0x78, 0xfe, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x37, 0xcb, 0x34, 0x5d, 0x11, 0x00, 0x00,
}

func (m *UserApprovedTransferTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserApprovedTransferTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserApprovedTransferTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Times) > 0 {
		for iNdEx := len(m.Times) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Times[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ApprovedTransfers) > 0 {
		for iNdEx := len(m.ApprovedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserBalanceStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBalanceStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBalanceStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransfers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.NextTransferTrackerId.Size()
		i -= size
		if _, err := m.NextTransferTrackerId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ApprovedTransfersTimeline) > 0 {
		for iNdEx := len(m.ApprovedTransfersTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedTransfersTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Restrictions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Restrictions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Restrictions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TransfersPerAddress.Size()
		i -= size
		if _, err := m.TransfersPerAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.UnlimitedTransfersPerAddress {
		i--
		if m.UnlimitedTransfersPerAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.AmountPerAddress.Size()
		i -= size
		if _, err := m.AmountPerAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.UnlimitedAmountPerAddress {
		i--
		if m.UnlimitedAmountPerAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseLeafIndexForDistributionOrder {
		i--
		if m.UseLeafIndexForDistributionOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MaxOneUsePerLeaf {
		i--
		if m.MaxOneUsePerLeaf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UseCreatorAddressAsLeaf {
		i--
		if m.UseCreatorAddressAsLeaf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.ExpectedProofLength.Size()
		i -= size
		if _, err := m.ExpectedProofLength.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintTransfers(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.StartAmounts) > 0 {
		for iNdEx := len(m.StartAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StartAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.IncrementTimesBy.Size()
		i -= size
		if _, err := m.IncrementTimesBy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.IncrementIdsBy.Size()
		i -= size
		if _, err := m.IncrementIdsBy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.CustomData) > 0 {
		i -= len(m.CustomData)
		copy(dAtA[i:], m.CustomData)
		i = encodeVarintTransfers(dAtA, i, uint64(len(m.CustomData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTransfers(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AmountRestrictions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmountRestrictions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmountRestrictions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitiatedByRestrictions != nil {
		{
			size, err := m.InitiatedByRestrictions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransfers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ToRestrictions != nil {
		{
			size, err := m.ToRestrictions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransfers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.FromRestrictions != nil {
		{
			size, err := m.FromRestrictions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransfers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.MaxNumTransfers.Size()
		i -= size
		if _, err := m.MaxNumTransfers.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.UnlimitedTransfers {
		i--
		if m.UnlimitedTransfers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.UnlimitedAmount {
		i--
		if m.UnlimitedAmount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.BalancesTimes) > 0 {
		for iNdEx := len(m.BalancesTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalancesTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IsTransferAllowed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTransferAllowed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTransferAllowed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAllowed {
		i--
		if m.IsAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.InvertBadgeIds {
		i--
		if m.InvertBadgeIds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.InvertTransferTimes {
		i--
		if m.InvertTransferTimes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.InvertInitiatedBy {
		i--
		if m.InvertInitiatedBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.InvertTo {
		i--
		if m.InvertTo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *UserApprovedTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserApprovedTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserApprovedTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequireToDoesNotEqualInitiatedBy {
		i--
		if m.RequireToDoesNotEqualInitiatedBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.RequireToEqualsInitiatedBy {
		i--
		if m.RequireToEqualsInitiatedBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransfers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.AmountRestrictions) > 0 {
		for iNdEx := len(m.AmountRestrictions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountRestrictions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.TransferTrackerId.Size()
		i -= size
		if _, err := m.TransferTrackerId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.AllowedCombinations) > 0 {
		for iNdEx := len(m.AllowedCombinations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedCombinations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BadgeIds) > 0 {
		for iNdEx := len(m.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TransferTimes) > 0 {
		for iNdEx := len(m.TransferTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransferTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InitiatedByMappingId) > 0 {
		i -= len(m.InitiatedByMappingId)
		copy(dAtA[i:], m.InitiatedByMappingId)
		i = encodeVarintTransfers(dAtA, i, uint64(len(m.InitiatedByMappingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToMappingId) > 0 {
		i -= len(m.ToMappingId)
		copy(dAtA[i:], m.ToMappingId)
		i = encodeVarintTransfers(dAtA, i, uint64(len(m.ToMappingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsCollectionTransferAllowed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsCollectionTransferAllowed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsCollectionTransferAllowed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAllowed {
		i--
		if m.IsAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.InvertBadgeIds {
		i--
		if m.InvertBadgeIds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.InvertTransferTimes {
		i--
		if m.InvertTransferTimes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.InvertInitiatedBy {
		i--
		if m.InvertInitiatedBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.InvertTo {
		i--
		if m.InvertTo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.InvertFrom {
		i--
		if m.InvertFrom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CollectionApprovedTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionApprovedTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionApprovedTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequireFromDoesNotEqualInitiatedBy {
		i--
		if m.RequireFromDoesNotEqualInitiatedBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.RequireToDoesNotEqualInitiatedBy {
		i--
		if m.RequireToDoesNotEqualInitiatedBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.RequireFromEqualsInitiatedBy {
		i--
		if m.RequireFromEqualsInitiatedBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.RequireToEqualsInitiatedBy {
		i--
		if m.RequireToEqualsInitiatedBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.OverridesFromApprovedTransfers {
		i--
		if m.OverridesFromApprovedTransfers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransfers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.TransferTrackerId.Size()
		i -= size
		if _, err := m.TransferTrackerId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTransfers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.AmountRestrictions) > 0 {
		for iNdEx := len(m.AmountRestrictions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountRestrictions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AllowedCombinations) > 0 {
		for iNdEx := len(m.AllowedCombinations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedCombinations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BadgeIds) > 0 {
		for iNdEx := len(m.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TransferTimes) > 0 {
		for iNdEx := len(m.TransferTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransferTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.InitiatedByMappingId) > 0 {
		i -= len(m.InitiatedByMappingId)
		copy(dAtA[i:], m.InitiatedByMappingId)
		i = encodeVarintTransfers(dAtA, i, uint64(len(m.InitiatedByMappingId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToMappingId) > 0 {
		i -= len(m.ToMappingId)
		copy(dAtA[i:], m.ToMappingId)
		i = encodeVarintTransfers(dAtA, i, uint64(len(m.ToMappingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromMappingId) > 0 {
		i -= len(m.FromMappingId)
		copy(dAtA[i:], m.FromMappingId)
		i = encodeVarintTransfers(dAtA, i, uint64(len(m.FromMappingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransfers(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransfers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserApprovedTransferTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApprovedTransfers) > 0 {
		for _, e := range m.ApprovedTransfers {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if len(m.Times) > 0 {
		for _, e := range m.Times {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	return n
}

func (m *UserBalanceStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if len(m.ApprovedTransfersTimeline) > 0 {
		for _, e := range m.ApprovedTransfersTimeline {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	l = m.NextTransferTrackerId.Size()
	n += 1 + l + sovTransfers(uint64(l))
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovTransfers(uint64(l))
	}
	return n
}

func (m *Restrictions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnlimitedAmountPerAddress {
		n += 2
	}
	l = m.AmountPerAddress.Size()
	n += 1 + l + sovTransfers(uint64(l))
	if m.UnlimitedTransfersPerAddress {
		n += 2
	}
	l = m.TransfersPerAddress.Size()
	n += 1 + l + sovTransfers(uint64(l))
	return n
}

func (m *Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovTransfers(uint64(l))
	}
	l = m.ExpectedProofLength.Size()
	n += 1 + l + sovTransfers(uint64(l))
	if m.UseCreatorAddressAsLeaf {
		n += 2
	}
	if m.MaxOneUsePerLeaf {
		n += 2
	}
	if m.UseLeafIndexForDistributionOrder {
		n += 2
	}
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTransfers(uint64(l))
	}
	l = len(m.CustomData)
	if l > 0 {
		n += 1 + l + sovTransfers(uint64(l))
	}
	l = m.IncrementIdsBy.Size()
	n += 1 + l + sovTransfers(uint64(l))
	l = m.IncrementTimesBy.Size()
	n += 1 + l + sovTransfers(uint64(l))
	if len(m.StartAmounts) > 0 {
		for _, e := range m.StartAmounts {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	return n
}

func (m *AmountRestrictions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BalancesTimes) > 0 {
		for _, e := range m.BalancesTimes {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if m.UnlimitedAmount {
		n += 2
	}
	l = m.Amount.Size()
	n += 1 + l + sovTransfers(uint64(l))
	if m.UnlimitedTransfers {
		n += 2
	}
	l = m.MaxNumTransfers.Size()
	n += 1 + l + sovTransfers(uint64(l))
	if m.FromRestrictions != nil {
		l = m.FromRestrictions.Size()
		n += 1 + l + sovTransfers(uint64(l))
	}
	if m.ToRestrictions != nil {
		l = m.ToRestrictions.Size()
		n += 1 + l + sovTransfers(uint64(l))
	}
	if m.InitiatedByRestrictions != nil {
		l = m.InitiatedByRestrictions.Size()
		n += 1 + l + sovTransfers(uint64(l))
	}
	return n
}

func (m *IsTransferAllowed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvertTo {
		n += 2
	}
	if m.InvertInitiatedBy {
		n += 2
	}
	if m.InvertTransferTimes {
		n += 2
	}
	if m.InvertBadgeIds {
		n += 2
	}
	if m.IsAllowed {
		n += 2
	}
	return n
}

func (m *UserApprovedTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToMappingId)
	if l > 0 {
		n += 1 + l + sovTransfers(uint64(l))
	}
	l = len(m.InitiatedByMappingId)
	if l > 0 {
		n += 1 + l + sovTransfers(uint64(l))
	}
	if len(m.TransferTimes) > 0 {
		for _, e := range m.TransferTimes {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if len(m.BadgeIds) > 0 {
		for _, e := range m.BadgeIds {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if len(m.AllowedCombinations) > 0 {
		for _, e := range m.AllowedCombinations {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	l = m.TransferTrackerId.Size()
	n += 1 + l + sovTransfers(uint64(l))
	if len(m.AmountRestrictions) > 0 {
		for _, e := range m.AmountRestrictions {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovTransfers(uint64(l))
	}
	if m.RequireToEqualsInitiatedBy {
		n += 2
	}
	if m.RequireToDoesNotEqualInitiatedBy {
		n += 2
	}
	return n
}

func (m *IsCollectionTransferAllowed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvertFrom {
		n += 2
	}
	if m.InvertTo {
		n += 2
	}
	if m.InvertInitiatedBy {
		n += 2
	}
	if m.InvertTransferTimes {
		n += 2
	}
	if m.InvertBadgeIds {
		n += 2
	}
	if m.IsAllowed {
		n += 2
	}
	return n
}

func (m *CollectionApprovedTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromMappingId)
	if l > 0 {
		n += 1 + l + sovTransfers(uint64(l))
	}
	l = len(m.ToMappingId)
	if l > 0 {
		n += 1 + l + sovTransfers(uint64(l))
	}
	l = len(m.InitiatedByMappingId)
	if l > 0 {
		n += 1 + l + sovTransfers(uint64(l))
	}
	if len(m.TransferTimes) > 0 {
		for _, e := range m.TransferTimes {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if len(m.BadgeIds) > 0 {
		for _, e := range m.BadgeIds {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if len(m.AllowedCombinations) > 0 {
		for _, e := range m.AllowedCombinations {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	if len(m.AmountRestrictions) > 0 {
		for _, e := range m.AmountRestrictions {
			l = e.Size()
			n += 1 + l + sovTransfers(uint64(l))
		}
	}
	l = m.TransferTrackerId.Size()
	n += 1 + l + sovTransfers(uint64(l))
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovTransfers(uint64(l))
	}
	if m.OverridesFromApprovedTransfers {
		n += 2
	}
	if m.RequireToEqualsInitiatedBy {
		n += 2
	}
	if m.RequireFromEqualsInitiatedBy {
		n += 2
	}
	if m.RequireToDoesNotEqualInitiatedBy {
		n += 2
	}
	if m.RequireFromDoesNotEqualInitiatedBy {
		n += 2
	}
	return n
}

func sovTransfers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransfers(x uint64) (n int) {
	return sovTransfers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserApprovedTransferTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserApprovedTransferTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserApprovedTransferTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedTransfers = append(m.ApprovedTransfers, &UserApprovedTransfer{})
			if err := m.ApprovedTransfers[len(m.ApprovedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Times = append(m.Times, &IdRange{})
			if err := m.Times[len(m.Times)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBalanceStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBalanceStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBalanceStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedTransfersTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedTransfersTimeline = append(m.ApprovedTransfersTimeline, &UserApprovedTransferTimeline{})
			if err := m.ApprovedTransfersTimeline[len(m.ApprovedTransfersTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTransferTrackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextTransferTrackerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &UserPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Restrictions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Restrictions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Restrictions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlimitedAmountPerAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlimitedAmountPerAddress = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountPerAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlimitedTransfersPerAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlimitedTransfersPerAddress = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersPerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransfersPerAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedProofLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedProofLength.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCreatorAddressAsLeaf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCreatorAddressAsLeaf = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOneUsePerLeaf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxOneUsePerLeaf = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLeafIndexForDistributionOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseLeafIndexForDistributionOrder = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementIdsBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementIdsBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementTimesBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementTimesBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartAmounts = append(m.StartAmounts, &Balance{})
			if err := m.StartAmounts[len(m.StartAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, &Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AmountRestrictions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmountRestrictions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmountRestrictions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalancesTimes = append(m.BalancesTimes, &IdRange{})
			if err := m.BalancesTimes[len(m.BalancesTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlimitedAmount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlimitedAmount = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlimitedTransfers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlimitedTransfers = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumTransfers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxNumTransfers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromRestrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromRestrictions == nil {
				m.FromRestrictions = &Restrictions{}
			}
			if err := m.FromRestrictions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToRestrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToRestrictions == nil {
				m.ToRestrictions = &Restrictions{}
			}
			if err := m.ToRestrictions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedByRestrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitiatedByRestrictions == nil {
				m.InitiatedByRestrictions = &Restrictions{}
			}
			if err := m.InitiatedByRestrictions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTransferAllowed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsTransferAllowed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsTransferAllowed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertTo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertTo = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertInitiatedBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertInitiatedBy = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertTransferTimes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertTransferTimes = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertBadgeIds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertBadgeIds = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserApprovedTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserApprovedTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserApprovedTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToMappingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToMappingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedByMappingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatedByMappingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferTimes = append(m.TransferTimes, &IdRange{})
			if err := m.TransferTimes[len(m.TransferTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeIds = append(m.BadgeIds, &IdRange{})
			if err := m.BadgeIds[len(m.BadgeIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCombinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCombinations = append(m.AllowedCombinations, &IsTransferAllowed{})
			if err := m.AllowedCombinations[len(m.AllowedCombinations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTrackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferTrackerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountRestrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountRestrictions = append(m.AmountRestrictions, &AmountRestrictions{})
			if err := m.AmountRestrictions[len(m.AmountRestrictions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireToEqualsInitiatedBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireToEqualsInitiatedBy = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireToDoesNotEqualInitiatedBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireToDoesNotEqualInitiatedBy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsCollectionTransferAllowed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsCollectionTransferAllowed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsCollectionTransferAllowed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertFrom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertFrom = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertTo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertTo = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertInitiatedBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertInitiatedBy = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertTransferTimes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertTransferTimes = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertBadgeIds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertBadgeIds = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionApprovedTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionApprovedTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionApprovedTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromMappingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromMappingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToMappingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToMappingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedByMappingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatedByMappingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferTimes = append(m.TransferTimes, &IdRange{})
			if err := m.TransferTimes[len(m.TransferTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeIds = append(m.BadgeIds, &IdRange{})
			if err := m.BadgeIds[len(m.BadgeIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCombinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCombinations = append(m.AllowedCombinations, &IsCollectionTransferAllowed{})
			if err := m.AllowedCombinations[len(m.AllowedCombinations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountRestrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountRestrictions = append(m.AmountRestrictions, &AmountRestrictions{})
			if err := m.AmountRestrictions[len(m.AmountRestrictions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTrackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferTrackerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverridesFromApprovedTransfers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverridesFromApprovedTransfers = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireToEqualsInitiatedBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireToEqualsInitiatedBy = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireFromEqualsInitiatedBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireFromEqualsInitiatedBy = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireToDoesNotEqualInitiatedBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireToDoesNotEqualInitiatedBy = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireFromDoesNotEqualInitiatedBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireFromDoesNotEqualInitiatedBy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransfers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransfers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransfers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransfers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransfers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransfers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransfers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransfers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransfers = fmt.Errorf("proto: unexpected end of group")
)

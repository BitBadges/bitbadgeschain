// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/ranges.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddressOptions int32

const (
	AddressOptions_None           AddressOptions = 0
	AddressOptions_IncludeManager AddressOptions = 1
	AddressOptions_ExcludeManager AddressOptions = 2
)

var AddressOptions_name = map[int32]string{
	0: "None",
	1: "IncludeManager",
	2: "ExcludeManager",
}

var AddressOptions_value = map[string]int32{
	"None":           0,
	"IncludeManager": 1,
	"ExcludeManager": 2,
}

func (x AddressOptions) String() string {
	return proto.EnumName(AddressOptions_name, int32(x))
}

func (AddressOptions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c4071aa00cc93a07, []int{0}
}

// Id ranges define a range of IDs from start to end. Can be used for badge IDs, nonces, anything.
// If end == 0, we assume end == start. Start must be >= end.
type IdRange struct {
	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *IdRange) Reset()         { *m = IdRange{} }
func (m *IdRange) String() string { return proto.CompactTextString(m) }
func (*IdRange) ProtoMessage()    {}
func (*IdRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4071aa00cc93a07, []int{0}
}
func (m *IdRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdRange.Merge(m, src)
}
func (m *IdRange) XXX_Size() int {
	return m.Size()
}
func (m *IdRange) XXX_DiscardUnknown() {
	xxx_messageInfo_IdRange.DiscardUnknown(m)
}

var xxx_messageInfo_IdRange proto.InternalMessageInfo

func (m *IdRange) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *IdRange) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

type Addresses struct {
	AccountIds []*IdRange `protobuf:"bytes,1,rep,name=accountIds,proto3" json:"accountIds,omitempty"`
	Options    uint64     `protobuf:"varint,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *Addresses) Reset()         { *m = Addresses{} }
func (m *Addresses) String() string { return proto.CompactTextString(m) }
func (*Addresses) ProtoMessage()    {}
func (*Addresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4071aa00cc93a07, []int{1}
}
func (m *Addresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Addresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Addresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Addresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Addresses.Merge(m, src)
}
func (m *Addresses) XXX_Size() int {
	return m.Size()
}
func (m *Addresses) XXX_DiscardUnknown() {
	xxx_messageInfo_Addresses.DiscardUnknown(m)
}

var xxx_messageInfo_Addresses proto.InternalMessageInfo

func (m *Addresses) GetAccountIds() []*IdRange {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *Addresses) GetOptions() uint64 {
	if m != nil {
		return m.Options
	}
	return 0
}

// TransferMapping defines a mapping of transfers from one set of addresses to another.
type TransferMapping struct {
	From *Addresses `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *Addresses `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *TransferMapping) Reset()         { *m = TransferMapping{} }
func (m *TransferMapping) String() string { return proto.CompactTextString(m) }
func (*TransferMapping) ProtoMessage()    {}
func (*TransferMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4071aa00cc93a07, []int{2}
}
func (m *TransferMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferMapping.Merge(m, src)
}
func (m *TransferMapping) XXX_Size() int {
	return m.Size()
}
func (m *TransferMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferMapping.DiscardUnknown(m)
}

var xxx_messageInfo_TransferMapping proto.InternalMessageInfo

func (m *TransferMapping) GetFrom() *Addresses {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransferMapping) GetTo() *Addresses {
	if m != nil {
		return m.To
	}
	return nil
}

func init() {
	proto.RegisterEnum("bitbadges.bitbadgeschain.badges.AddressOptions", AddressOptions_name, AddressOptions_value)
	proto.RegisterType((*IdRange)(nil), "bitbadges.bitbadgeschain.badges.IdRange")
	proto.RegisterType((*Addresses)(nil), "bitbadges.bitbadgeschain.badges.Addresses")
	proto.RegisterType((*TransferMapping)(nil), "bitbadges.bitbadgeschain.badges.TransferMapping")
}

func init() { proto.RegisterFile("badges/ranges.proto", fileDescriptor_c4071aa00cc93a07) }

var fileDescriptor_c4071aa00cc93a07 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x33, 0x69, 0xbf, 0xaf, 0x7a, 0x0b, 0xb5, 0x8c, 0x2e, 0xb2, 0x1a, 0x4b, 0x57, 0xa5,
	0x8b, 0x09, 0xd6, 0x9d, 0x0b, 0xc1, 0x82, 0x60, 0xc1, 0x2a, 0x04, 0x57, 0xee, 0x26, 0x99, 0x69,
	0x1a, 0xb0, 0x33, 0x61, 0x66, 0x02, 0xf5, 0x21, 0x04, 0x1f, 0xcb, 0x65, 0x97, 0x2e, 0x25, 0x79,
	0x11, 0xc9, 0x1f, 0x83, 0x5d, 0x15, 0x77, 0xe7, 0xfe, 0xe0, 0x70, 0x7e, 0x70, 0xe1, 0x34, 0x64,
	0x3c, 0x16, 0xc6, 0xd7, 0x4c, 0xc6, 0xc2, 0xd0, 0x54, 0x2b, 0xab, 0xf0, 0x79, 0x98, 0xd8, 0x9a,
	0xd3, 0x36, 0x45, 0x6b, 0x96, 0x48, 0x5a, 0xe7, 0xf1, 0x05, 0xf4, 0x16, 0x3c, 0x28, 0x2b, 0xf8,
	0x0c, 0xfe, 0x19, 0xcb, 0xb4, 0xf5, 0xd0, 0x08, 0x4d, 0xba, 0x41, 0x7d, 0xe0, 0x21, 0x74, 0x84,
	0xe4, 0x9e, 0x5b, 0xb1, 0x32, 0x8e, 0x15, 0x1c, 0xdf, 0x70, 0xae, 0x85, 0x31, 0xc2, 0xe0, 0x3b,
	0x00, 0x16, 0x45, 0x2a, 0x93, 0x76, 0xc1, 0x8d, 0x87, 0x46, 0x9d, 0x49, 0x7f, 0x36, 0xa1, 0x07,
	0x56, 0x69, 0x33, 0x19, 0xfc, 0xea, 0x62, 0x0f, 0x7a, 0x2a, 0xb5, 0x89, 0x92, 0xa6, 0x19, 0xfb,
	0x39, 0xc7, 0x6f, 0x08, 0x4e, 0x9e, 0x34, 0x93, 0x66, 0x25, 0xf4, 0x92, 0xa5, 0x69, 0x22, 0x63,
	0x7c, 0x0d, 0xdd, 0x95, 0x56, 0x9b, 0xca, 0xb5, 0x3f, 0x9b, 0x1e, 0x5c, 0x6c, 0x8d, 0x83, 0xaa,
	0x87, 0xaf, 0xc0, 0xb5, 0xaa, 0x1a, 0xfa, 0x5b, 0xdb, 0xb5, 0x6a, 0x3a, 0x87, 0x41, 0x03, 0x1e,
	0x6b, 0x43, 0x7c, 0x04, 0xdd, 0x07, 0x25, 0xc5, 0xd0, 0xc1, 0x18, 0x06, 0x0b, 0x19, 0xbd, 0x64,
	0x5c, 0x2c, 0x99, 0x64, 0xb1, 0xd0, 0x43, 0x54, 0xb2, 0xdb, 0xed, 0x1e, 0x73, 0xe7, 0xf7, 0x1f,
	0x39, 0x41, 0xbb, 0x9c, 0xa0, 0xaf, 0x9c, 0xa0, 0xf7, 0x82, 0x38, 0xbb, 0x82, 0x38, 0x9f, 0x05,
	0x71, 0x9e, 0x67, 0x71, 0x62, 0xd7, 0x59, 0x48, 0x23, 0xb5, 0xf1, 0x5b, 0x1b, 0x7f, 0xdf, 0xcb,
	0xdf, 0xfa, 0x0d, 0xb7, 0xaf, 0xa9, 0x30, 0xe1, 0xff, 0xea, 0xdb, 0x97, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xe4, 0xd9, 0x14, 0x30, 0x04, 0x02, 0x00, 0x00,
}

func (m *IdRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintRanges(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintRanges(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Addresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Addresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Addresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != 0 {
		i = encodeVarintRanges(dAtA, i, uint64(m.Options))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccountIds) > 0 {
		for iNdEx := len(m.AccountIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransferMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRanges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRanges(dAtA []byte, offset int, v uint64) int {
	offset -= sovRanges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IdRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovRanges(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovRanges(uint64(m.End))
	}
	return n
}

func (m *Addresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			l = e.Size()
			n += 1 + l + sovRanges(uint64(l))
		}
	}
	if m.Options != 0 {
		n += 1 + sovRanges(uint64(m.Options))
	}
	return n
}

func (m *TransferMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovRanges(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovRanges(uint64(l))
	}
	return n
}

func sovRanges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRanges(x uint64) (n int) {
	return sovRanges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Addresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Addresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Addresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountIds = append(m.AccountIds, &IdRange{})
			if err := m.AccountIds[len(m.AccountIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			m.Options = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Options |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &Addresses{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &Addresses{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRanges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRanges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRanges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRanges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRanges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRanges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRanges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRanges = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/timelines.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CollectionMetadataTimeline defines the metadata for a collection at different timeline times.
type CollectionMetadataTimeline struct {
	// The collection metadata for a specific timeline element.
	CollectionMetadata *CollectionMetadata `protobuf:"bytes,1,opt,name=collectionMetadata,proto3" json:"collectionMetadata,omitempty"`
	// The timeline times when the collection metadata is valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *CollectionMetadataTimeline) Reset()         { *m = CollectionMetadataTimeline{} }
func (m *CollectionMetadataTimeline) String() string { return proto.CompactTextString(m) }
func (*CollectionMetadataTimeline) ProtoMessage()    {}
func (*CollectionMetadataTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{0}
}
func (m *CollectionMetadataTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionMetadataTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionMetadataTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionMetadataTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionMetadataTimeline.Merge(m, src)
}
func (m *CollectionMetadataTimeline) XXX_Size() int {
	return m.Size()
}
func (m *CollectionMetadataTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionMetadataTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionMetadataTimeline proto.InternalMessageInfo

func (m *CollectionMetadataTimeline) GetCollectionMetadata() *CollectionMetadata {
	if m != nil {
		return m.CollectionMetadata
	}
	return nil
}

func (m *CollectionMetadataTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

// BadgeMetadataTimeline defines the metadata for tokens at different timeline times.
type BadgeMetadataTimeline struct {
	// The token metadata for a specific timeline element.
	BadgeMetadata []*BadgeMetadata `protobuf:"bytes,1,rep,name=badgeMetadata,proto3" json:"badgeMetadata,omitempty"`
	// The timeline times when the token metadata is valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *BadgeMetadataTimeline) Reset()         { *m = BadgeMetadataTimeline{} }
func (m *BadgeMetadataTimeline) String() string { return proto.CompactTextString(m) }
func (*BadgeMetadataTimeline) ProtoMessage()    {}
func (*BadgeMetadataTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{1}
}
func (m *BadgeMetadataTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeMetadataTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeMetadataTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeMetadataTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeMetadataTimeline.Merge(m, src)
}
func (m *BadgeMetadataTimeline) XXX_Size() int {
	return m.Size()
}
func (m *BadgeMetadataTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeMetadataTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeMetadataTimeline proto.InternalMessageInfo

func (m *BadgeMetadataTimeline) GetBadgeMetadata() []*BadgeMetadata {
	if m != nil {
		return m.BadgeMetadata
	}
	return nil
}

func (m *BadgeMetadataTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

// CustomDataTimeline defines custom data at different timeline times.
type CustomDataTimeline struct {
	// The custom data for a specific timeline element.
	CustomData string `protobuf:"bytes,1,opt,name=customData,proto3" json:"customData,omitempty"`
	// The timeline times when the custom data is valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *CustomDataTimeline) Reset()         { *m = CustomDataTimeline{} }
func (m *CustomDataTimeline) String() string { return proto.CompactTextString(m) }
func (*CustomDataTimeline) ProtoMessage()    {}
func (*CustomDataTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{2}
}
func (m *CustomDataTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomDataTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomDataTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomDataTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomDataTimeline.Merge(m, src)
}
func (m *CustomDataTimeline) XXX_Size() int {
	return m.Size()
}
func (m *CustomDataTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomDataTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_CustomDataTimeline proto.InternalMessageInfo

func (m *CustomDataTimeline) GetCustomData() string {
	if m != nil {
		return m.CustomData
	}
	return ""
}

func (m *CustomDataTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

// ManagerTimeline defines the manager address at different timeline times.
type ManagerTimeline struct {
	// The manager address for a specific timeline element.
	Manager string `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	// The timeline times when the manager address is valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *ManagerTimeline) Reset()         { *m = ManagerTimeline{} }
func (m *ManagerTimeline) String() string { return proto.CompactTextString(m) }
func (*ManagerTimeline) ProtoMessage()    {}
func (*ManagerTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{3}
}
func (m *ManagerTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerTimeline.Merge(m, src)
}
func (m *ManagerTimeline) XXX_Size() int {
	return m.Size()
}
func (m *ManagerTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerTimeline proto.InternalMessageInfo

func (m *ManagerTimeline) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *ManagerTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

// IsArchivedTimeline defines whether a collection is archived at different timeline times.
type IsArchivedTimeline struct {
	// Indicates whether the collection is archived for a specific timeline element.
	IsArchived bool `protobuf:"varint,1,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
	// The timeline times when the archived status is valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *IsArchivedTimeline) Reset()         { *m = IsArchivedTimeline{} }
func (m *IsArchivedTimeline) String() string { return proto.CompactTextString(m) }
func (*IsArchivedTimeline) ProtoMessage()    {}
func (*IsArchivedTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{4}
}
func (m *IsArchivedTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsArchivedTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsArchivedTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsArchivedTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsArchivedTimeline.Merge(m, src)
}
func (m *IsArchivedTimeline) XXX_Size() int {
	return m.Size()
}
func (m *IsArchivedTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_IsArchivedTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_IsArchivedTimeline proto.InternalMessageInfo

func (m *IsArchivedTimeline) GetIsArchived() bool {
	if m != nil {
		return m.IsArchived
	}
	return false
}

func (m *IsArchivedTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

// ContractAddressTimeline defines the contract address at different timeline times.
type ContractAddressTimeline struct {
	// The contract address for a specific timeline element.
	ContractAddress string `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	// The timeline times when the contract address is valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *ContractAddressTimeline) Reset()         { *m = ContractAddressTimeline{} }
func (m *ContractAddressTimeline) String() string { return proto.CompactTextString(m) }
func (*ContractAddressTimeline) ProtoMessage()    {}
func (*ContractAddressTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{5}
}
func (m *ContractAddressTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractAddressTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractAddressTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractAddressTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractAddressTimeline.Merge(m, src)
}
func (m *ContractAddressTimeline) XXX_Size() int {
	return m.Size()
}
func (m *ContractAddressTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractAddressTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_ContractAddressTimeline proto.InternalMessageInfo

func (m *ContractAddressTimeline) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ContractAddressTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

// StandardsTimeline defines the standards used for a collection at different timeline times.
type StandardsTimeline struct {
	// The standards applied to the collection for a specific timeline element.
	Standards []string `protobuf:"bytes,1,rep,name=standards,proto3" json:"standards,omitempty"`
	// The timeline times when the standards are valid. Can not overlap with other timeline elements in same array.
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *StandardsTimeline) Reset()         { *m = StandardsTimeline{} }
func (m *StandardsTimeline) String() string { return proto.CompactTextString(m) }
func (*StandardsTimeline) ProtoMessage()    {}
func (*StandardsTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{6}
}
func (m *StandardsTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StandardsTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StandardsTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StandardsTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandardsTimeline.Merge(m, src)
}
func (m *StandardsTimeline) XXX_Size() int {
	return m.Size()
}
func (m *StandardsTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_StandardsTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_StandardsTimeline proto.InternalMessageInfo

func (m *StandardsTimeline) GetStandards() []string {
	if m != nil {
		return m.Standards
	}
	return nil
}

func (m *StandardsTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectionMetadataTimeline)(nil), "badges.CollectionMetadataTimeline")
	proto.RegisterType((*BadgeMetadataTimeline)(nil), "badges.BadgeMetadataTimeline")
	proto.RegisterType((*CustomDataTimeline)(nil), "badges.CustomDataTimeline")
	proto.RegisterType((*ManagerTimeline)(nil), "badges.ManagerTimeline")
	proto.RegisterType((*IsArchivedTimeline)(nil), "badges.IsArchivedTimeline")
	proto.RegisterType((*ContractAddressTimeline)(nil), "badges.ContractAddressTimeline")
	proto.RegisterType((*StandardsTimeline)(nil), "badges.StandardsTimeline")
}

func init() { proto.RegisterFile("badges/timelines.proto", fileDescriptor_6acaeede2b65317a) }

var fileDescriptor_6acaeede2b65317a = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xb1, 0xce, 0xd3, 0x30,
	0x10, 0xc7, 0x6b, 0x90, 0x3e, 0xa8, 0xab, 0xaa, 0x6a, 0x44, 0x21, 0x44, 0x28, 0xaa, 0x3a, 0x75,
	0x4a, 0xa4, 0x32, 0x30, 0x30, 0xb5, 0x65, 0x01, 0xd1, 0x25, 0xc0, 0xc2, 0xe6, 0xd8, 0xae, 0x6b,
	0x94, 0xd8, 0x95, 0xed, 0x22, 0x2a, 0xf1, 0x0a, 0x48, 0xbc, 0x02, 0x6f, 0xc3, 0xd8, 0x91, 0x11,
	0xb5, 0x2f, 0x82, 0x9a, 0xd8, 0x69, 0xd2, 0x32, 0xe5, 0xdb, 0x2e, 0xbf, 0xbb, 0xff, 0xfd, 0xef,
	0xac, 0xd8, 0xf0, 0x69, 0x8a, 0x08, 0xa3, 0x3a, 0x36, 0x3c, 0xa7, 0x19, 0x17, 0x54, 0x47, 0x5b,
	0x25, 0x8d, 0xf4, 0xee, 0x4a, 0x1e, 0x3c, 0x67, 0x52, 0xb2, 0x8c, 0xc6, 0x05, 0x4d, 0x77, 0xeb,
	0x18, 0x89, 0x7d, 0x59, 0x12, 0x54, 0x52, 0x85, 0x84, 0x5e, 0x53, 0x65, 0xa5, 0xc1, 0xc8, 0xf2,
	0x14, 0x65, 0x48, 0x60, 0xd7, 0x31, 0xf0, 0x2d, 0xde, 0x52, 0x95, 0x73, 0xad, 0xb9, 0x14, 0xd7,
	0x82, 0x9c, 0x1a, 0x44, 0x90, 0x41, 0x16, 0x3f, 0x61, 0x92, 0xc9, 0x22, 0x8c, 0xcf, 0x51, 0x49,
	0x27, 0xbf, 0x00, 0x0c, 0x96, 0x32, 0xcb, 0x28, 0x36, 0x5c, 0x8a, 0x95, 0x95, 0x7c, 0xb4, 0xe3,
	0x7b, 0xef, 0xa0, 0x87, 0x6f, 0xb2, 0x3e, 0x18, 0x83, 0x69, 0x6f, 0x16, 0x44, 0xa5, 0x51, 0x74,
	0xab, 0x4f, 0xfe, 0xa3, 0xf2, 0x5e, 0xc1, 0xbe, 0x3b, 0x96, 0x73, 0x7f, 0xed, 0x3f, 0x18, 0x3f,
	0x9c, 0xf6, 0x66, 0x43, 0xd7, 0xe6, 0x13, 0x17, 0x26, 0x41, 0x82, 0xd1, 0xa4, 0x59, 0x37, 0xf9,
	0x01, 0xe0, 0x68, 0x71, 0xae, 0xb9, 0x19, 0xef, 0x35, 0xec, 0xa7, 0xf5, 0x84, 0x0f, 0x8a, 0x96,
	0x23, 0xd7, 0xb2, 0xa1, 0x4a, 0x9a, 0xb5, 0xed, 0xe7, 0xc9, 0xa1, 0xb7, 0xdc, 0x69, 0x23, 0xf3,
	0x37, 0xf5, 0x59, 0x42, 0x08, 0x71, 0x45, 0x8b, 0x23, 0xea, 0x26, 0x35, 0xd2, 0xde, 0x8e, 0xc0,
	0xc1, 0x0a, 0x09, 0xc4, 0xa8, 0xaa, 0xbc, 0x7c, 0xf8, 0x28, 0x2f, 0x91, 0x35, 0x72, 0x9f, 0xf7,
	0x5a, 0xea, 0xad, 0x9e, 0x2b, 0xbc, 0xe1, 0x5f, 0x29, 0xa9, 0x2f, 0xc5, 0x2b, 0x5a, 0x78, 0x3d,
	0x4e, 0x6a, 0xa4, 0xbd, 0xdd, 0x77, 0xf8, 0x6c, 0x29, 0x85, 0x51, 0x08, 0x9b, 0x39, 0x21, 0x8a,
	0x6a, 0x5d, 0x79, 0x4e, 0xe1, 0x00, 0x37, 0x53, 0x76, 0xc9, 0x6b, 0xdc, 0xde, 0xfd, 0x0b, 0x1c,
	0x7e, 0x30, 0x48, 0x10, 0xa4, 0xc8, 0xc5, 0xf7, 0x05, 0xec, 0x6a, 0x07, 0x8b, 0x1f, 0xa9, 0x9b,
	0x5c, 0x40, 0x6b, 0xaf, 0xc5, 0xfb, 0xdf, 0xc7, 0x10, 0x1c, 0x8e, 0x21, 0xf8, 0x7b, 0x0c, 0xc1,
	0xcf, 0x53, 0xd8, 0x39, 0x9c, 0xc2, 0xce, 0x9f, 0x53, 0xd8, 0xf9, 0x3c, 0x63, 0xdc, 0x6c, 0x76,
	0x69, 0x84, 0x65, 0x1e, 0xa7, 0xdc, 0xb8, 0x7b, 0xee, 0x22, 0xbc, 0x41, 0x5c, 0xc4, 0xdf, 0x62,
	0xf7, 0x2e, 0xec, 0xb7, 0x54, 0xa7, 0x77, 0xc5, 0xb5, 0x7d, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0xe3, 0x8e, 0xfd, 0xca, 0x69, 0x04, 0x00, 0x00,
}

func (m *CollectionMetadataTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionMetadataTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionMetadataTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CollectionMetadata != nil {
		{
			size, err := m.CollectionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimelines(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BadgeMetadataTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeMetadataTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeMetadataTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BadgeMetadata) > 0 {
		for iNdEx := len(m.BadgeMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomDataTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomDataTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CustomData) > 0 {
		i -= len(m.CustomData)
		copy(dAtA[i:], m.CustomData)
		i = encodeVarintTimelines(dAtA, i, uint64(len(m.CustomData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ManagerTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagerTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTimelines(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsArchivedTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsArchivedTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsArchivedTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.IsArchived {
		i--
		if m.IsArchived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractAddressTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractAddressTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractAddressTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTimelines(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StandardsTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StandardsTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StandardsTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Standards) > 0 {
		for iNdEx := len(m.Standards) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Standards[iNdEx])
			copy(dAtA[i:], m.Standards[iNdEx])
			i = encodeVarintTimelines(dAtA, i, uint64(len(m.Standards[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimelines(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimelines(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollectionMetadataTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionMetadata != nil {
		l = m.CollectionMetadata.Size()
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *BadgeMetadataTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BadgeMetadata) > 0 {
		for _, e := range m.BadgeMetadata {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *CustomDataTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomData)
	if l > 0 {
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *ManagerTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *IsArchivedTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsArchived {
		n += 2
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *ContractAddressTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *StandardsTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Standards) > 0 {
		for _, s := range m.Standards {
			l = len(s)
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func sovTimelines(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimelines(x uint64) (n int) {
	return sovTimelines(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollectionMetadataTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionMetadataTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionMetadataTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CollectionMetadata == nil {
				m.CollectionMetadata = &CollectionMetadata{}
			}
			if err := m.CollectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadgeMetadataTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeMetadataTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeMetadataTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeMetadata = append(m.BadgeMetadata, &BadgeMetadata{})
			if err := m.BadgeMetadata[len(m.BadgeMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomDataTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomDataTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomDataTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsArchivedTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsArchivedTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsArchivedTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArchived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsArchived = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractAddressTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractAddressTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractAddressTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StandardsTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StandardsTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StandardsTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standards = append(m.Standards, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimelines(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimelines
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimelines
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimelines
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimelines        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimelines          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimelines = fmt.Errorf("proto: unexpected end of group")
)

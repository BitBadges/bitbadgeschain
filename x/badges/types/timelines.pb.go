// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/timelines.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CollectionMetadataTimeline struct {
	CollectionMetadata *CollectionMetadata `protobuf:"bytes,1,opt,name=collectionMetadata,proto3" json:"collectionMetadata,omitempty"`
	TimelineTimes      []*UintRange          `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *CollectionMetadataTimeline) Reset()         { *m = CollectionMetadataTimeline{} }
func (m *CollectionMetadataTimeline) String() string { return proto.CompactTextString(m) }
func (*CollectionMetadataTimeline) ProtoMessage()    {}
func (*CollectionMetadataTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{0}
}
func (m *CollectionMetadataTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionMetadataTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionMetadataTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionMetadataTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionMetadataTimeline.Merge(m, src)
}
func (m *CollectionMetadataTimeline) XXX_Size() int {
	return m.Size()
}
func (m *CollectionMetadataTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionMetadataTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionMetadataTimeline proto.InternalMessageInfo

func (m *CollectionMetadataTimeline) GetCollectionMetadata() *CollectionMetadata {
	if m != nil {
		return m.CollectionMetadata
	}
	return nil
}

func (m *CollectionMetadataTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type BadgeMetadataTimeline struct {
	BadgeMetadata []*BadgeMetadata `protobuf:"bytes,1,rep,name=badgeMetadata,proto3" json:"badgeMetadata,omitempty"`
	TimelineTimes []*UintRange       `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *BadgeMetadataTimeline) Reset()         { *m = BadgeMetadataTimeline{} }
func (m *BadgeMetadataTimeline) String() string { return proto.CompactTextString(m) }
func (*BadgeMetadataTimeline) ProtoMessage()    {}
func (*BadgeMetadataTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{1}
}
func (m *BadgeMetadataTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeMetadataTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeMetadataTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeMetadataTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeMetadataTimeline.Merge(m, src)
}
func (m *BadgeMetadataTimeline) XXX_Size() int {
	return m.Size()
}
func (m *BadgeMetadataTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeMetadataTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeMetadataTimeline proto.InternalMessageInfo

func (m *BadgeMetadataTimeline) GetBadgeMetadata() []*BadgeMetadata {
	if m != nil {
		return m.BadgeMetadata
	}
	return nil
}

func (m *BadgeMetadataTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type OffChainBalancesMetadataTimeline struct {
	OffChainBalancesMetadata *OffChainBalancesMetadata `protobuf:"bytes,1,opt,name=offChainBalancesMetadata,proto3" json:"offChainBalancesMetadata,omitempty"`
	TimelineTimes            []*UintRange                `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *OffChainBalancesMetadataTimeline) Reset()         { *m = OffChainBalancesMetadataTimeline{} }
func (m *OffChainBalancesMetadataTimeline) String() string { return proto.CompactTextString(m) }
func (*OffChainBalancesMetadataTimeline) ProtoMessage()    {}
func (*OffChainBalancesMetadataTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{2}
}
func (m *OffChainBalancesMetadataTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffChainBalancesMetadataTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffChainBalancesMetadataTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffChainBalancesMetadataTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffChainBalancesMetadataTimeline.Merge(m, src)
}
func (m *OffChainBalancesMetadataTimeline) XXX_Size() int {
	return m.Size()
}
func (m *OffChainBalancesMetadataTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_OffChainBalancesMetadataTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_OffChainBalancesMetadataTimeline proto.InternalMessageInfo

func (m *OffChainBalancesMetadataTimeline) GetOffChainBalancesMetadata() *OffChainBalancesMetadata {
	if m != nil {
		return m.OffChainBalancesMetadata
	}
	return nil
}

func (m *OffChainBalancesMetadataTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type InheritedBalancesTimeline struct {
	InheritedBalances []*InheritedBalance `protobuf:"bytes,1,rep,name=inheritedBalances,proto3" json:"inheritedBalances,omitempty"`
	TimelineTimes     []*UintRange          `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *InheritedBalancesTimeline) Reset()         { *m = InheritedBalancesTimeline{} }
func (m *InheritedBalancesTimeline) String() string { return proto.CompactTextString(m) }
func (*InheritedBalancesTimeline) ProtoMessage()    {}
func (*InheritedBalancesTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{3}
}
func (m *InheritedBalancesTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InheritedBalancesTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InheritedBalancesTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InheritedBalancesTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InheritedBalancesTimeline.Merge(m, src)
}
func (m *InheritedBalancesTimeline) XXX_Size() int {
	return m.Size()
}
func (m *InheritedBalancesTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_InheritedBalancesTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_InheritedBalancesTimeline proto.InternalMessageInfo

func (m *InheritedBalancesTimeline) GetInheritedBalances() []*InheritedBalance {
	if m != nil {
		return m.InheritedBalances
	}
	return nil
}

func (m *InheritedBalancesTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type CustomDataTimeline struct {
	CustomData    string     `protobuf:"bytes,1,opt,name=customData,proto3" json:"customData,omitempty"`
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *CustomDataTimeline) Reset()         { *m = CustomDataTimeline{} }
func (m *CustomDataTimeline) String() string { return proto.CompactTextString(m) }
func (*CustomDataTimeline) ProtoMessage()    {}
func (*CustomDataTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{4}
}
func (m *CustomDataTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomDataTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomDataTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomDataTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomDataTimeline.Merge(m, src)
}
func (m *CustomDataTimeline) XXX_Size() int {
	return m.Size()
}
func (m *CustomDataTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomDataTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_CustomDataTimeline proto.InternalMessageInfo

func (m *CustomDataTimeline) GetCustomData() string {
	if m != nil {
		return m.CustomData
	}
	return ""
}

func (m *CustomDataTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type ManagerTimeline struct {
	Manager       string     `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *ManagerTimeline) Reset()         { *m = ManagerTimeline{} }
func (m *ManagerTimeline) String() string { return proto.CompactTextString(m) }
func (*ManagerTimeline) ProtoMessage()    {}
func (*ManagerTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{5}
}
func (m *ManagerTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerTimeline.Merge(m, src)
}
func (m *ManagerTimeline) XXX_Size() int {
	return m.Size()
}
func (m *ManagerTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerTimeline proto.InternalMessageInfo

func (m *ManagerTimeline) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *ManagerTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type CollectionApprovedTransferTimeline struct {
	ApprovedTransfers []*CollectionApprovedTransfer `protobuf:"bytes,1,rep,name=approvedTransfers,proto3" json:"approvedTransfers,omitempty"`
	TimelineTimes     []*UintRange                    `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *CollectionApprovedTransferTimeline) Reset()         { *m = CollectionApprovedTransferTimeline{} }
func (m *CollectionApprovedTransferTimeline) String() string { return proto.CompactTextString(m) }
func (*CollectionApprovedTransferTimeline) ProtoMessage()    {}
func (*CollectionApprovedTransferTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{6}
}
func (m *CollectionApprovedTransferTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionApprovedTransferTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionApprovedTransferTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionApprovedTransferTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionApprovedTransferTimeline.Merge(m, src)
}
func (m *CollectionApprovedTransferTimeline) XXX_Size() int {
	return m.Size()
}
func (m *CollectionApprovedTransferTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionApprovedTransferTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionApprovedTransferTimeline proto.InternalMessageInfo

func (m *CollectionApprovedTransferTimeline) GetApprovedTransfers() []*CollectionApprovedTransfer {
	if m != nil {
		return m.ApprovedTransfers
	}
	return nil
}

func (m *CollectionApprovedTransferTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type IsArchivedTimeline struct {
	IsArchived    bool       `protobuf:"varint,1,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *IsArchivedTimeline) Reset()         { *m = IsArchivedTimeline{} }
func (m *IsArchivedTimeline) String() string { return proto.CompactTextString(m) }
func (*IsArchivedTimeline) ProtoMessage()    {}
func (*IsArchivedTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{7}
}
func (m *IsArchivedTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsArchivedTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsArchivedTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsArchivedTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsArchivedTimeline.Merge(m, src)
}
func (m *IsArchivedTimeline) XXX_Size() int {
	return m.Size()
}
func (m *IsArchivedTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_IsArchivedTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_IsArchivedTimeline proto.InternalMessageInfo

func (m *IsArchivedTimeline) GetIsArchived() bool {
	if m != nil {
		return m.IsArchived
	}
	return false
}

func (m *IsArchivedTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type ContractAddressTimeline struct {
	ContractAddress string     `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	TimelineTimes   []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *ContractAddressTimeline) Reset()         { *m = ContractAddressTimeline{} }
func (m *ContractAddressTimeline) String() string { return proto.CompactTextString(m) }
func (*ContractAddressTimeline) ProtoMessage()    {}
func (*ContractAddressTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{8}
}
func (m *ContractAddressTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractAddressTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractAddressTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractAddressTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractAddressTimeline.Merge(m, src)
}
func (m *ContractAddressTimeline) XXX_Size() int {
	return m.Size()
}
func (m *ContractAddressTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractAddressTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_ContractAddressTimeline proto.InternalMessageInfo

func (m *ContractAddressTimeline) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ContractAddressTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

type StandardsTimeline struct {
	Standards     []string   `protobuf:"bytes,1,rep,name=standards,proto3" json:"standards,omitempty"`
	TimelineTimes []*UintRange `protobuf:"bytes,2,rep,name=timelineTimes,proto3" json:"timelineTimes,omitempty"`
}

func (m *StandardsTimeline) Reset()         { *m = StandardsTimeline{} }
func (m *StandardsTimeline) String() string { return proto.CompactTextString(m) }
func (*StandardsTimeline) ProtoMessage()    {}
func (*StandardsTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acaeede2b65317a, []int{9}
}
func (m *StandardsTimeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StandardsTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StandardsTimeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StandardsTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandardsTimeline.Merge(m, src)
}
func (m *StandardsTimeline) XXX_Size() int {
	return m.Size()
}
func (m *StandardsTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_StandardsTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_StandardsTimeline proto.InternalMessageInfo

func (m *StandardsTimeline) GetStandards() []string {
	if m != nil {
		return m.Standards
	}
	return nil
}

func (m *StandardsTimeline) GetTimelineTimes() []*UintRange {
	if m != nil {
		return m.TimelineTimes
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectionMetadataTimeline)(nil), "bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline")
	proto.RegisterType((*BadgeMetadataTimeline)(nil), "bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline")
	proto.RegisterType((*OffChainBalancesMetadataTimeline)(nil), "bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline")
	proto.RegisterType((*InheritedBalancesTimeline)(nil), "bitbadges.bitbadgeschain.badges.InheritedBalancesTimeline")
	proto.RegisterType((*CustomDataTimeline)(nil), "bitbadges.bitbadgeschain.badges.CustomDataTimeline")
	proto.RegisterType((*ManagerTimeline)(nil), "bitbadges.bitbadgeschain.badges.ManagerTimeline")
	proto.RegisterType((*CollectionApprovedTransferTimeline)(nil), "bitbadges.bitbadgeschain.badges.CollectionApprovedTransferTimeline")
	proto.RegisterType((*IsArchivedTimeline)(nil), "bitbadges.bitbadgeschain.badges.IsArchivedTimeline")
	proto.RegisterType((*ContractAddressTimeline)(nil), "bitbadges.bitbadgeschain.badges.ContractAddressTimeline")
	proto.RegisterType((*StandardsTimeline)(nil), "bitbadges.bitbadgeschain.badges.StandardsTimeline")
}

func init() { proto.RegisterFile("badges/timelines.proto", fileDescriptor_6acaeede2b65317a) }

var fileDescriptor_6acaeede2b65317a = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x41, 0xab, 0xd3, 0x4c,
	0x14, 0xed, 0x7c, 0x1f, 0xa8, 0xbd, 0x8f, 0xc7, 0xa3, 0xc5, 0xa7, 0x79, 0x45, 0x62, 0xe9, 0xaa,
	0xab, 0x04, 0xfb, 0x56, 0xe2, 0xaa, 0xad, 0x9b, 0x82, 0x4f, 0x61, 0xec, 0xca, 0x8d, 0x4c, 0x26,
	0xd3, 0x74, 0xa0, 0x99, 0x29, 0x33, 0x53, 0xf1, 0xe1, 0x4a, 0xf0, 0x07, 0x08, 0xfe, 0x1e, 0xf7,
	0x2e, 0x5c, 0x3c, 0x77, 0xee, 0x94, 0x76, 0xe5, 0xbf, 0x90, 0xa6, 0x93, 0xb4, 0x49, 0x2c, 0x41,
	0x88, 0xbb, 0xc9, 0xb9, 0xf7, 0x9e, 0x73, 0x6e, 0x0e, 0xc9, 0xc0, 0xbd, 0x80, 0x84, 0x11, 0xd3,
	0xbe, 0xe1, 0x31, 0x5b, 0x70, 0xc1, 0xb4, 0xb7, 0x54, 0xd2, 0xc8, 0xf6, 0xc3, 0x80, 0x9b, 0x5d,
	0xc9, 0xcb, 0x4e, 0x74, 0x4e, 0xb8, 0xf0, 0x76, 0xe7, 0xce, 0x45, 0x24, 0x65, 0xb4, 0x60, 0x7e,
	0xd2, 0x1e, 0xac, 0x66, 0x3e, 0x11, 0xd7, 0xbb, 0xd9, 0x4e, 0xc6, 0xa9, 0x88, 0xd0, 0x33, 0xa6,
	0x2c, 0x67, 0xe7, 0xdc, 0xe2, 0x01, 0x59, 0x10, 0x41, 0x53, 0xa9, 0x8e, 0x63, 0xe1, 0x25, 0x53,
	0x31, 0xd7, 0x9a, 0x4b, 0x51, 0x1c, 0x88, 0x99, 0x21, 0x21, 0x31, 0xc4, 0xc2, 0x77, 0x23, 0x19,
	0xc9, 0xe4, 0xe8, 0x6f, 0x4f, 0x3b, 0xb4, 0xf7, 0x0d, 0x41, 0x67, 0x2c, 0x17, 0x0b, 0x46, 0x0d,
	0x97, 0xe2, 0xca, 0x8e, 0x4c, 0xed, 0x5e, 0x6d, 0x0a, 0x6d, 0x5a, 0xaa, 0x3a, 0xa8, 0x8b, 0xfa,
	0x27, 0x83, 0x4b, 0xaf, 0x62, 0x5b, 0xaf, 0x4c, 0x8c, 0xff, 0x40, 0xd7, 0x7e, 0x0e, 0xa7, 0xe9,
	0x8b, 0xdc, 0x0a, 0x6b, 0xe7, 0xbf, 0xee, 0xff, 0xfd, 0x93, 0x41, 0xbf, 0x92, 0x7f, 0x12, 0x62,
	0x22, 0x22, 0x86, 0xf3, 0xe3, 0xbd, 0xcf, 0x08, 0xce, 0x47, 0xdb, 0x8e, 0xd2, 0x3a, 0x53, 0x38,
	0x0d, 0x0e, 0x0b, 0x0e, 0x4a, 0x94, 0xbc, 0x4a, 0xa5, 0x1c, 0x1d, 0xce, 0x93, 0xd4, 0xee, 0xff,
	0x17, 0x82, 0xee, 0x8b, 0xd9, 0x6c, 0xbc, 0x6d, 0x1d, 0xd9, 0xd4, 0x4b, 0xab, 0xac, 0xc0, 0x91,
	0x47, 0x7a, 0x6c, 0x3e, 0x8f, 0x2b, 0xf5, 0x8f, 0x89, 0xe0, 0xa3, 0xd4, 0xb5, 0xef, 0xfa, 0x15,
	0xc1, 0xc5, 0x44, 0xcc, 0x99, 0xe2, 0x86, 0x85, 0xa9, 0x5a, 0xb6, 0xe4, 0x6b, 0x68, 0xf1, 0x62,
	0xd1, 0x66, 0xf6, 0xa8, 0x5a, 0xb1, 0x30, 0x89, 0xcb, 0x5c, 0xb5, 0xaf, 0xf3, 0x01, 0x41, 0x7b,
	0xbc, 0xd2, 0x46, 0xc6, 0x4f, 0x0f, 0xc3, 0x72, 0x01, 0x68, 0x86, 0x26, 0xf1, 0x34, 0xf1, 0x01,
	0x52, 0xbb, 0x8d, 0x77, 0x70, 0x76, 0x45, 0x04, 0x89, 0x98, 0xca, 0x2c, 0x38, 0x70, 0x3b, 0xde,
	0x41, 0x56, 0x3f, 0x7d, 0xac, 0x5d, 0xfc, 0x07, 0x82, 0xde, 0xfe, 0xcb, 0x1f, 0x2e, 0x97, 0x4a,
	0xbe, 0x61, 0xe1, 0xd4, 0xfe, 0xd6, 0x32, 0x43, 0x1c, 0x5a, 0xa4, 0x50, 0x4b, 0xb3, 0x7d, 0xf2,
	0x17, 0x7f, 0x96, 0x22, 0x3f, 0x2e, 0xb3, 0xfe, 0x93, 0x94, 0x27, 0x7a, 0xa8, 0xe8, 0x9c, 0x6f,
	0x75, 0x0e, 0x52, 0xe6, 0x19, 0x9a, 0xbc, 0xe5, 0x3b, 0xf8, 0x00, 0xa9, 0xdd, 0xc6, 0x27, 0x04,
	0xf7, 0xc7, 0x52, 0x18, 0x45, 0xa8, 0x19, 0x86, 0xa1, 0x62, 0x7a, 0xff, 0xe5, 0xf4, 0xe1, 0x8c,
	0xe6, 0x4b, 0x36, 0xf6, 0x22, 0x5c, 0xbb, 0xab, 0xf7, 0x08, 0x5a, 0x2f, 0x0d, 0x11, 0x21, 0x51,
	0xe1, 0xde, 0xcf, 0x03, 0x68, 0xea, 0x14, 0x4c, 0x52, 0x6e, 0xe2, 0x3d, 0x50, 0xb7, 0x87, 0xd1,
	0xb3, 0x2f, 0x6b, 0x17, 0xdd, 0xac, 0x5d, 0xf4, 0x73, 0xed, 0xa2, 0x8f, 0x1b, 0xb7, 0x71, 0xb3,
	0x71, 0x1b, 0xdf, 0x37, 0x6e, 0xe3, 0xd5, 0x20, 0xe2, 0x66, 0xbe, 0x0a, 0x3c, 0x2a, 0x63, 0x3f,
	0xa3, 0xf4, 0xf3, 0xe4, 0xfe, 0x5b, 0x3f, 0xbd, 0x8b, 0xaf, 0x97, 0x4c, 0x07, 0xb7, 0x92, 0xab,
	0xf2, 0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0x09, 0xa8, 0x8c, 0xf6, 0x07, 0x00, 0x00,
}

func (m *CollectionMetadataTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionMetadataTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionMetadataTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CollectionMetadata != nil {
		{
			size, err := m.CollectionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimelines(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BadgeMetadataTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeMetadataTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeMetadataTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BadgeMetadata) > 0 {
		for iNdEx := len(m.BadgeMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OffChainBalancesMetadataTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffChainBalancesMetadataTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffChainBalancesMetadataTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.OffChainBalancesMetadata != nil {
		{
			size, err := m.OffChainBalancesMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimelines(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InheritedBalancesTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InheritedBalancesTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InheritedBalancesTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InheritedBalances) > 0 {
		for iNdEx := len(m.InheritedBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InheritedBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomDataTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomDataTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CustomData) > 0 {
		i -= len(m.CustomData)
		copy(dAtA[i:], m.CustomData)
		i = encodeVarintTimelines(dAtA, i, uint64(len(m.CustomData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ManagerTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagerTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTimelines(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectionApprovedTransferTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionApprovedTransferTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionApprovedTransferTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ApprovedTransfers) > 0 {
		for iNdEx := len(m.ApprovedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IsArchivedTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsArchivedTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsArchivedTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.IsArchived {
		i--
		if m.IsArchived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractAddressTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractAddressTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractAddressTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTimelines(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StandardsTimeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StandardsTimeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StandardsTimeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimelineTimes) > 0 {
		for iNdEx := len(m.TimelineTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimelineTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTimelines(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Standards) > 0 {
		for iNdEx := len(m.Standards) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Standards[iNdEx])
			copy(dAtA[i:], m.Standards[iNdEx])
			i = encodeVarintTimelines(dAtA, i, uint64(len(m.Standards[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimelines(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimelines(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollectionMetadataTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionMetadata != nil {
		l = m.CollectionMetadata.Size()
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *BadgeMetadataTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BadgeMetadata) > 0 {
		for _, e := range m.BadgeMetadata {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *OffChainBalancesMetadataTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OffChainBalancesMetadata != nil {
		l = m.OffChainBalancesMetadata.Size()
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *InheritedBalancesTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InheritedBalances) > 0 {
		for _, e := range m.InheritedBalances {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *CustomDataTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomData)
	if l > 0 {
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *ManagerTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *CollectionApprovedTransferTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApprovedTransfers) > 0 {
		for _, e := range m.ApprovedTransfers {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *IsArchivedTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsArchived {
		n += 2
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *ContractAddressTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTimelines(uint64(l))
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func (m *StandardsTimeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Standards) > 0 {
		for _, s := range m.Standards {
			l = len(s)
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	if len(m.TimelineTimes) > 0 {
		for _, e := range m.TimelineTimes {
			l = e.Size()
			n += 1 + l + sovTimelines(uint64(l))
		}
	}
	return n
}

func sovTimelines(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimelines(x uint64) (n int) {
	return sovTimelines(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollectionMetadataTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionMetadataTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionMetadataTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CollectionMetadata == nil {
				m.CollectionMetadata = &CollectionMetadata{}
			}
			if err := m.CollectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadgeMetadataTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeMetadataTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeMetadataTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeMetadata = append(m.BadgeMetadata, &BadgeMetadata{})
			if err := m.BadgeMetadata[len(m.BadgeMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffChainBalancesMetadataTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffChainBalancesMetadataTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffChainBalancesMetadataTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffChainBalancesMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffChainBalancesMetadata == nil {
				m.OffChainBalancesMetadata = &OffChainBalancesMetadata{}
			}
			if err := m.OffChainBalancesMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InheritedBalancesTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InheritedBalancesTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InheritedBalancesTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritedBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InheritedBalances = append(m.InheritedBalances, &InheritedBalance{})
			if err := m.InheritedBalances[len(m.InheritedBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomDataTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomDataTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomDataTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionApprovedTransferTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionApprovedTransferTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionApprovedTransferTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedTransfers = append(m.ApprovedTransfers, &CollectionApprovedTransfer{})
			if err := m.ApprovedTransfers[len(m.ApprovedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsArchivedTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsArchivedTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsArchivedTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArchived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsArchived = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractAddressTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractAddressTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractAddressTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StandardsTimeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StandardsTimeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StandardsTimeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standards = append(m.Standards, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelines
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelines
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineTimes = append(m.TimelineTimes, &UintRange{})
			if err := m.TimelineTimes[len(m.TimelineTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimelines(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelines
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimelines(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimelines
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimelines
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimelines
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimelines
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimelines
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimelines        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimelines          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimelines = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/badges.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BadgeUri struct {
	Uri      string     `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	BadgeIds []*IdRange `protobuf:"bytes,2,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
}

func (m *BadgeUri) Reset()         { *m = BadgeUri{} }
func (m *BadgeUri) String() string { return proto.CompactTextString(m) }
func (*BadgeUri) ProtoMessage()    {}
func (*BadgeUri) Descriptor() ([]byte, []int) {
	return fileDescriptor_71eab594b779f631, []int{0}
}
func (m *BadgeUri) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeUri) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeUri.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeUri) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeUri.Merge(m, src)
}
func (m *BadgeUri) XXX_Size() int {
	return m.Size()
}
func (m *BadgeUri) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeUri.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeUri proto.InternalMessageInfo

func (m *BadgeUri) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *BadgeUri) GetBadgeIds() []*IdRange {
	if m != nil {
		return m.BadgeIds
	}
	return nil
}

// BadgeCollection defines a standard collection of badges.
type BadgeCollection struct {
	// The collectionId defines the unique identifier of the Badge classification, similar to the contract address of ERC721.
	// This is assigned by the chain itself. All ids starts at 0 and increments by 1 each created badge.
	CollectionId uint64 `protobuf:"varint,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	// The URI where to fetch the collection's metadata. Max 100 characters.
	CollectionUri string `protobuf:"bytes,2,opt,name=collectionUri,proto3" json:"collectionUri,omitempty"`
	// The URI where to fetch each badge's metadata. Max 100 characters.
	// Can include {id} in the URI to be replaced by the badge's id.
	BadgeUris []*BadgeUri `protobuf:"bytes,3,rep,name=badgeUris,proto3" json:"badgeUris,omitempty"`
	// These are arbitrary bytes can be used to store anything on-chain about the badge (often used for a permanent hash).
	// This can be updatable or not depending on the permissions set. Max 256 bytes allowed.
	Bytes string `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// The manager's account number of the badge. The manager can have special permissions. \
	Manager uint64 `protobuf:"varint,5,opt,name=manager,proto3" json:"manager,omitempty"`
	//Store permissions packed in a uint where the bits correspond to permissions from left to right.
	//Leading zeroes are applied. See types/permissions.go
	Permissions uint64 `protobuf:"varint,6,opt,name=permissions,proto3" json:"permissions,omitempty"`
	//This defines the address combinations that cannot be transferred.
	//Used to freeze addresses and prevent transfers.
	//If all addresses are disallowed, then the badge is non-transferable.
	DisallowedTransfers []*TransferMapping `protobuf:"bytes,7,rep,name=disallowedTransfers,proto3" json:"disallowedTransfers,omitempty"`
	//This defines the address combinations that the manager is approved to execute (overrides disallowedTransfers).
	//Example use case would be to set up the manager being able to forcefully revoke or forcefully burn badges.
	//This can be updated, but addresses can only be removed, never added.
	ManagerApprovedTransfers []*TransferMapping `protobuf:"bytes,8,rep,name=managerApprovedTransfers,proto3" json:"managerApprovedTransfers,omitempty"`
	//Badge ids start at 0. Each badge created will increment this by 1. Can't overflow.
	NextBadgeId uint64 `protobuf:"varint,9,opt,name=nextBadgeId,proto3" json:"nextBadgeId,omitempty"`
	//This is a map of the current badge supplys.
	UnmintedSupplys []*Balance `protobuf:"bytes,10,rep,name=unmintedSupplys,proto3" json:"unmintedSupplys,omitempty"`
	//This is a map of the maximum badge supplys.
	MaxSupplys []*Balance `protobuf:"bytes,11,rep,name=maxSupplys,proto3" json:"maxSupplys,omitempty"`
	//This is an array of the current badge claims.
	Claims []*Claim `protobuf:"bytes,12,rep,name=claims,proto3" json:"claims,omitempty"`
	//Defines what standard this badge should implement (see /standards).
	Standard uint64 `protobuf:"varint,13,opt,name=standard,proto3" json:"standard,omitempty"`
}

func (m *BadgeCollection) Reset()         { *m = BadgeCollection{} }
func (m *BadgeCollection) String() string { return proto.CompactTextString(m) }
func (*BadgeCollection) ProtoMessage()    {}
func (*BadgeCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_71eab594b779f631, []int{1}
}
func (m *BadgeCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeCollection.Merge(m, src)
}
func (m *BadgeCollection) XXX_Size() int {
	return m.Size()
}
func (m *BadgeCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeCollection.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeCollection proto.InternalMessageInfo

func (m *BadgeCollection) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *BadgeCollection) GetCollectionUri() string {
	if m != nil {
		return m.CollectionUri
	}
	return ""
}

func (m *BadgeCollection) GetBadgeUris() []*BadgeUri {
	if m != nil {
		return m.BadgeUris
	}
	return nil
}

func (m *BadgeCollection) GetBytes() string {
	if m != nil {
		return m.Bytes
	}
	return ""
}

func (m *BadgeCollection) GetManager() uint64 {
	if m != nil {
		return m.Manager
	}
	return 0
}

func (m *BadgeCollection) GetPermissions() uint64 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *BadgeCollection) GetDisallowedTransfers() []*TransferMapping {
	if m != nil {
		return m.DisallowedTransfers
	}
	return nil
}

func (m *BadgeCollection) GetManagerApprovedTransfers() []*TransferMapping {
	if m != nil {
		return m.ManagerApprovedTransfers
	}
	return nil
}

func (m *BadgeCollection) GetNextBadgeId() uint64 {
	if m != nil {
		return m.NextBadgeId
	}
	return 0
}

func (m *BadgeCollection) GetUnmintedSupplys() []*Balance {
	if m != nil {
		return m.UnmintedSupplys
	}
	return nil
}

func (m *BadgeCollection) GetMaxSupplys() []*Balance {
	if m != nil {
		return m.MaxSupplys
	}
	return nil
}

func (m *BadgeCollection) GetClaims() []*Claim {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *BadgeCollection) GetStandard() uint64 {
	if m != nil {
		return m.Standard
	}
	return 0
}

func init() {
	proto.RegisterType((*BadgeUri)(nil), "bitbadges.bitbadgeschain.badges.BadgeUri")
	proto.RegisterType((*BadgeCollection)(nil), "bitbadges.bitbadgeschain.badges.BadgeCollection")
}

func init() { proto.RegisterFile("badges/badges.proto", fileDescriptor_71eab594b779f631) }

var fileDescriptor_71eab594b779f631 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x6f, 0xd6, 0xb5, 0x6b, 0x5f, 0x37, 0x0d, 0x79, 0x20, 0x99, 0x1e, 0x42, 0x55, 0x21, 0x54,
	0x2e, 0x09, 0x1a, 0x77, 0x24, 0x3a, 0x24, 0xa8, 0x04, 0x97, 0xc0, 0x2e, 0xdc, 0x9c, 0xc4, 0xcb,
	0x2c, 0x39, 0xb6, 0x65, 0x3b, 0xd0, 0x7e, 0x0b, 0x3e, 0x16, 0xc7, 0x1d, 0x39, 0xa2, 0x96, 0x0f,
	0x82, 0xe2, 0xfc, 0x69, 0x8b, 0x40, 0x05, 0x4e, 0x7d, 0xef, 0xd7, 0xf7, 0xfb, 0xf3, 0x94, 0x97,
	0xc0, 0x45, 0x4c, 0xd2, 0x8c, 0x9a, 0xb0, 0xfa, 0x09, 0x94, 0x96, 0x56, 0xa2, 0x47, 0x31, 0xb3,
	0x35, 0xd0, 0x56, 0xc9, 0x2d, 0x61, 0x22, 0xa8, 0xea, 0xf1, 0xc3, 0x4c, 0xca, 0x8c, 0xd3, 0xd0,
	0x8d, 0xc7, 0xc5, 0x4d, 0x48, 0xc4, 0xaa, 0xe2, 0x8e, 0x1b, 0x41, 0x4d, 0x44, 0x2b, 0x38, 0x7e,
	0xd0, 0xba, 0x70, 0x22, 0x92, 0x16, 0x6e, 0x66, 0x13, 0x4e, 0x58, 0x5e, 0x83, 0xd3, 0x18, 0x06,
	0xf3, 0x12, 0xbe, 0xd6, 0x0c, 0xdd, 0x83, 0x6e, 0xa1, 0x19, 0xf6, 0x26, 0xde, 0x6c, 0x18, 0x95,
	0x25, 0x7a, 0x05, 0x03, 0x47, 0x5a, 0xa4, 0x06, 0x1f, 0x4d, 0xba, 0xb3, 0xd1, 0xe5, 0x2c, 0x38,
	0x90, 0x36, 0x58, 0xa4, 0x51, 0x19, 0x26, 0x6a, 0x99, 0xd3, 0x1f, 0x3d, 0x38, 0x77, 0x26, 0x57,
	0x92, 0x73, 0x9a, 0x58, 0x26, 0x05, 0x9a, 0xc2, 0x69, 0xd2, 0x76, 0x8b, 0xd4, 0x99, 0x1e, 0x47,
	0x7b, 0x18, 0x7a, 0x0c, 0x67, 0xdb, 0xfe, 0x5a, 0x33, 0x7c, 0xe4, 0x92, 0xed, 0x83, 0xe8, 0x35,
	0x0c, 0xe3, 0x7a, 0x03, 0x83, 0xbb, 0x2e, 0xe4, 0xd3, 0x83, 0x21, 0x9b, 0x9d, 0xa3, 0x2d, 0x17,
	0xdd, 0x87, 0x5e, 0xbc, 0xb2, 0xd4, 0xe0, 0x63, 0x67, 0x53, 0x35, 0x08, 0xc3, 0x49, 0x4e, 0x04,
	0xc9, 0xa8, 0xc6, 0x3d, 0x97, 0xb1, 0x69, 0xd1, 0x04, 0x46, 0x8a, 0xea, 0x9c, 0x19, 0xc3, 0xa4,
	0x30, 0xb8, 0xef, 0xfe, 0xdd, 0x85, 0x50, 0x0c, 0x17, 0x29, 0x33, 0x84, 0x73, 0xf9, 0x99, 0xa6,
	0x1f, 0x34, 0x11, 0xe6, 0x86, 0x6a, 0x83, 0x4f, 0x5c, 0xc8, 0x67, 0x07, 0x43, 0x36, 0x8c, 0x77,
	0x44, 0x29, 0x26, 0xb2, 0xe8, 0x77, 0x62, 0x88, 0x03, 0xae, 0x03, 0xbd, 0x54, 0x4a, 0xcb, 0x4f,
	0xbb, 0x46, 0x83, 0xff, 0x34, 0xfa, 0xa3, 0x62, 0xb9, 0xb3, 0xa0, 0x4b, 0x3b, 0xaf, 0x1e, 0x2d,
	0x1e, 0x56, 0x3b, 0xef, 0x40, 0x28, 0x82, 0xf3, 0x42, 0xe4, 0x4c, 0x58, 0x9a, 0xbe, 0x2f, 0x94,
	0xe2, 0x2b, 0x83, 0xe1, 0x2f, 0x2f, 0x67, 0x5e, 0xdd, 0x6b, 0xf4, 0xab, 0x00, 0x7a, 0x03, 0x90,
	0x93, 0x65, 0x23, 0x37, 0xfa, 0x47, 0xb9, 0x1d, 0x2e, 0x7a, 0x01, 0xfd, 0xea, 0xfc, 0xf1, 0xa9,
	0x53, 0x79, 0x72, 0x50, 0xe5, 0xaa, 0x1c, 0x8f, 0x6a, 0x16, 0x1a, 0xc3, 0xc0, 0x58, 0x22, 0x52,
	0xa2, 0x53, 0x7c, 0xe6, 0x96, 0x6f, 0xfb, 0xf9, 0xdb, 0xaf, 0x6b, 0xdf, 0xbb, 0x5b, 0xfb, 0xde,
	0xf7, 0xb5, 0xef, 0x7d, 0xd9, 0xf8, 0x9d, 0xbb, 0x8d, 0xdf, 0xf9, 0xb6, 0xf1, 0x3b, 0x1f, 0x2f,
	0x33, 0x66, 0x6f, 0x8b, 0x38, 0x48, 0x64, 0x1e, 0xb6, 0x2e, 0xe1, 0xbe, 0x5f, 0xb8, 0xac, 0xbf,
	0x0a, 0xa1, 0x5d, 0x29, 0x6a, 0xe2, 0xbe, 0x7b, 0x3f, 0x9f, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x27, 0x99, 0xdb, 0x64, 0x33, 0x04, 0x00, 0x00,
}

func (m *BadgeUri) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BadgeIds) > 0 {
		for iNdEx := len(m.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintBadges(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BadgeCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Standard != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.Standard))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.MaxSupplys) > 0 {
		for iNdEx := len(m.MaxSupplys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxSupplys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.UnmintedSupplys) > 0 {
		for iNdEx := len(m.UnmintedSupplys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnmintedSupplys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.NextBadgeId != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.NextBadgeId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ManagerApprovedTransfers) > 0 {
		for iNdEx := len(m.ManagerApprovedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerApprovedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DisallowedTransfers) > 0 {
		for iNdEx := len(m.DisallowedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisallowedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Permissions != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x30
	}
	if m.Manager != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.Manager))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintBadges(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BadgeUris) > 0 {
		for iNdEx := len(m.BadgeUris) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeUris[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CollectionUri) > 0 {
		i -= len(m.CollectionUri)
		copy(dAtA[i:], m.CollectionUri)
		i = encodeVarintBadges(dAtA, i, uint64(len(m.CollectionUri)))
		i--
		dAtA[i] = 0x12
	}
	if m.CollectionId != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBadges(dAtA []byte, offset int, v uint64) int {
	offset -= sovBadges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BadgeUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovBadges(uint64(l))
	}
	if len(m.BadgeIds) > 0 {
		for _, e := range m.BadgeIds {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	return n
}

func (m *BadgeCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionId != 0 {
		n += 1 + sovBadges(uint64(m.CollectionId))
	}
	l = len(m.CollectionUri)
	if l > 0 {
		n += 1 + l + sovBadges(uint64(l))
	}
	if len(m.BadgeUris) > 0 {
		for _, e := range m.BadgeUris {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovBadges(uint64(l))
	}
	if m.Manager != 0 {
		n += 1 + sovBadges(uint64(m.Manager))
	}
	if m.Permissions != 0 {
		n += 1 + sovBadges(uint64(m.Permissions))
	}
	if len(m.DisallowedTransfers) > 0 {
		for _, e := range m.DisallowedTransfers {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	if len(m.ManagerApprovedTransfers) > 0 {
		for _, e := range m.ManagerApprovedTransfers {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	if m.NextBadgeId != 0 {
		n += 1 + sovBadges(uint64(m.NextBadgeId))
	}
	if len(m.UnmintedSupplys) > 0 {
		for _, e := range m.UnmintedSupplys {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	if len(m.MaxSupplys) > 0 {
		for _, e := range m.MaxSupplys {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	if m.Standard != 0 {
		n += 1 + sovBadges(uint64(m.Standard))
	}
	return n
}

func sovBadges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBadges(x uint64) (n int) {
	return sovBadges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BadgeUri) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBadges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeUri: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeUri: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeIds = append(m.BadgeIds, &IdRange{})
			if err := m.BadgeIds[len(m.BadgeIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBadges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBadges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadgeCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBadges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUris", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUris = append(m.BadgeUris, &BadgeUri{})
			if err := m.BadgeUris[len(m.BadgeUris)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			m.Manager = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Manager |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisallowedTransfers = append(m.DisallowedTransfers, &TransferMapping{})
			if err := m.DisallowedTransfers[len(m.DisallowedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerApprovedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerApprovedTransfers = append(m.ManagerApprovedTransfers, &TransferMapping{})
			if err := m.ManagerApprovedTransfers[len(m.ManagerApprovedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBadgeId", wireType)
			}
			m.NextBadgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextBadgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnmintedSupplys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnmintedSupplys = append(m.UnmintedSupplys, &Balance{})
			if err := m.UnmintedSupplys[len(m.UnmintedSupplys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupplys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxSupplys = append(m.MaxSupplys, &Balance{})
			if err := m.MaxSupplys[len(m.MaxSupplys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, &Claim{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			m.Standard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Standard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBadges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBadges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBadges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBadges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBadges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBadges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBadges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBadges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBadges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBadges = fmt.Errorf("proto: unexpected end of group")
)

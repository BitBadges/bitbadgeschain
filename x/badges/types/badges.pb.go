// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/badges.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BitBadge defines a badge type. Think of this like the smart contract definition.
type BitBadge struct {
	// id defines the unique identifier of the Badge classification, similar to the contract address of ERC721
	// starts at 0 and increments by 1 each badge
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// uri for the class metadata stored off chain. must match a valid metadata standard (bitbadge, collection, etc)
	Uri *UriObject `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// these bytes can be used to store anything on-chain about the badge. This can be updatable or not depending on the permissions set.
	// Max 256 bytes allowed
	ArbitraryBytes []byte `protobuf:"bytes,3,opt,name=arbitraryBytes,proto3" json:"arbitraryBytes,omitempty"`
	// manager address of the class; can have special permissions; is used as the reserve address for the assets
	Manager uint64 `protobuf:"varint,4,opt,name=manager,proto3" json:"manager,omitempty"`
	//
	//Flag bits are in the following order from left to right; leading zeroes are applied and any future additions will be appended to the right
	//
	//can_manager_transfer: can the manager transfer managerial privileges to another address
	//can_update_uris: can the manager update the uris of the class and subassets; if false, locked forever
	//forceful_transfers: if true, one can send a badge to an account without pending approval; these badges should not by default be displayed on public profiles (can also use collections)
	//can_create: when true, manager can create more subassets of the class; once set to false, it is locked
	//can_revoke: when true, manager can revoke subassets of the class (including null address); once set to false, it is locked
	//can_freeze: when true, manager can freeze addresseses from transferring; once set to false, it is locked
	//frozen_by_default: when true, all addresses are considered frozen and must be unfrozen to transfer; when false, all addresses are considered unfrozen and must be frozen to freeze
	//manager is not frozen by default
	//
	//More permissions to be added
	Permissions uint64 `protobuf:"varint,5,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// if frozen_by_default is true, this is an accumulator of unfrozen addresses; and vice versa for false
	//big.Int will always only be 32 uint64s long
	FreezeRanges []*IdRange `protobuf:"bytes,10,rep,name=freezeRanges,proto3" json:"freezeRanges,omitempty"`
	// starts at 0; each subasset created will incrementally have an increasing ID #
	NextSubassetId uint64 `protobuf:"varint,12,opt,name=nextSubassetId,proto3" json:"nextSubassetId,omitempty"`
	//only store if not == default; will be sorted in order of subsasset ids; (maybe add defaut option in future)
	SubassetSupplys       []*BalanceObject `protobuf:"bytes,13,rep,name=subassetSupplys,proto3" json:"subassetSupplys,omitempty"`
	DefaultSubassetSupply uint64           `protobuf:"varint,14,opt,name=defaultSubassetSupply,proto3" json:"defaultSubassetSupply,omitempty"`
}

func (m *BitBadge) Reset()         { *m = BitBadge{} }
func (m *BitBadge) String() string { return proto.CompactTextString(m) }
func (*BitBadge) ProtoMessage()    {}
func (*BitBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_71eab594b779f631, []int{0}
}
func (m *BitBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BitBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitBadge.Merge(m, src)
}
func (m *BitBadge) XXX_Size() int {
	return m.Size()
}
func (m *BitBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_BitBadge.DiscardUnknown(m)
}

var xxx_messageInfo_BitBadge proto.InternalMessageInfo

func (m *BitBadge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BitBadge) GetUri() *UriObject {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *BitBadge) GetArbitraryBytes() []byte {
	if m != nil {
		return m.ArbitraryBytes
	}
	return nil
}

func (m *BitBadge) GetManager() uint64 {
	if m != nil {
		return m.Manager
	}
	return 0
}

func (m *BitBadge) GetPermissions() uint64 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *BitBadge) GetFreezeRanges() []*IdRange {
	if m != nil {
		return m.FreezeRanges
	}
	return nil
}

func (m *BitBadge) GetNextSubassetId() uint64 {
	if m != nil {
		return m.NextSubassetId
	}
	return 0
}

func (m *BitBadge) GetSubassetSupplys() []*BalanceObject {
	if m != nil {
		return m.SubassetSupplys
	}
	return nil
}

func (m *BitBadge) GetDefaultSubassetSupply() uint64 {
	if m != nil {
		return m.DefaultSubassetSupply
	}
	return 0
}

func init() {
	proto.RegisterType((*BitBadge)(nil), "trevormil.bitbadgeschain.badges.BitBadge")
}

func init() { proto.RegisterFile("badges/badges.proto", fileDescriptor_71eab594b779f631) }

var fileDescriptor_71eab594b779f631 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4b, 0xfb, 0x30,
	0x18, 0x5f, 0xd7, 0xfd, 0x5f, 0xc8, 0xe6, 0xc4, 0x88, 0x10, 0x77, 0xa8, 0xc5, 0x83, 0x14, 0x0f,
	0x2d, 0x4c, 0x8f, 0x9e, 0x7a, 0x1b, 0x0c, 0x84, 0x0e, 0x41, 0xbc, 0x25, 0xed, 0xb3, 0x2e, 0xd2,
	0x37, 0x92, 0x54, 0x56, 0x3f, 0x85, 0x9f, 0xc9, 0x93, 0xc7, 0x1d, 0x3d, 0xca, 0xf6, 0x45, 0x64,
	0x69, 0x37, 0xdc, 0x10, 0x76, 0x6a, 0x9f, 0xdf, 0x2f, 0xbf, 0x97, 0x84, 0x07, 0x9d, 0x32, 0x1a,
	0xc5, 0x20, 0xbd, 0xfa, 0xe3, 0x16, 0x22, 0x57, 0x39, 0xbe, 0x50, 0x02, 0x5e, 0x72, 0x91, 0xf2,
	0xc4, 0x65, 0x5c, 0xd5, 0x54, 0x38, 0xa3, 0x3c, 0x73, 0xeb, 0xff, 0xc1, 0x79, 0x9c, 0xe7, 0x71,
	0x02, 0x9e, 0x3e, 0xce, 0xca, 0xa9, 0x47, 0xb3, 0xaa, 0xd6, 0x0e, 0x36, 0x86, 0x82, 0x66, 0x5b,
	0xc3, 0xc1, 0x49, 0x03, 0x96, 0x82, 0x37, 0xd0, 0xe5, 0xbb, 0x89, 0xfe, 0xfb, 0x5c, 0xf9, 0x6b,
	0x02, 0xf7, 0x51, 0x9b, 0x47, 0xc4, 0xb0, 0x0d, 0xa7, 0x13, 0xb4, 0x79, 0x84, 0xef, 0x90, 0x59,
	0x0a, 0x4e, 0xda, 0xb6, 0xe1, 0x74, 0x87, 0xd7, 0xee, 0x81, 0x3a, 0xee, 0x83, 0xe0, 0xf7, 0xec,
	0x19, 0x42, 0x15, 0xac, 0x65, 0xf8, 0x0a, 0xf5, 0xa9, 0x60, 0x5c, 0x09, 0x2a, 0x2a, 0xbf, 0x52,
	0x20, 0x89, 0x69, 0x1b, 0x4e, 0x2f, 0xd8, 0x43, 0x31, 0x41, 0xff, 0x52, 0x9a, 0xd1, 0x18, 0x04,
	0xe9, 0xe8, 0xe8, 0xcd, 0x88, 0x6d, 0xd4, 0x2d, 0x40, 0xa4, 0x5c, 0x4a, 0x9e, 0x67, 0x92, 0xfc,
	0xd1, 0xec, 0x4f, 0x08, 0x8f, 0x51, 0x6f, 0x2a, 0x00, 0x5e, 0x21, 0xd0, 0xf7, 0x24, 0xc8, 0x36,
	0x9d, 0xee, 0xd0, 0x39, 0x58, 0x75, 0x14, 0x69, 0x41, 0xb0, 0xa3, 0x5e, 0x37, 0xce, 0x60, 0xae,
	0x26, 0x25, 0xa3, 0x52, 0x82, 0x1a, 0x45, 0xa4, 0xa7, 0x23, 0xf7, 0x50, 0xfc, 0x88, 0x8e, 0x65,
	0x33, 0x4d, 0xca, 0xa2, 0x48, 0x2a, 0x49, 0x8e, 0x74, 0xb0, 0x7b, 0x30, 0xd8, 0xa7, 0x09, 0xcd,
	0x42, 0x68, 0xde, 0x69, 0xdf, 0x06, 0xdf, 0xa2, 0xb3, 0x08, 0xa6, 0xb4, 0x4c, 0xb6, 0x71, 0x35,
	0x43, 0xfa, 0xba, 0xc8, 0xef, 0xa4, 0x3f, 0xfe, 0x58, 0x5a, 0xc6, 0x62, 0x69, 0x19, 0x5f, 0x4b,
	0xcb, 0x78, 0x5b, 0x59, 0xad, 0xc5, 0xca, 0x6a, 0x7d, 0xae, 0xac, 0xd6, 0xd3, 0x30, 0xe6, 0x6a,
	0x56, 0x32, 0x37, 0xcc, 0x53, 0x6f, 0x5b, 0xcd, 0xdb, 0xad, 0xe6, 0xcd, 0x9b, 0xb5, 0xf3, 0x54,
	0x55, 0x80, 0x64, 0x7f, 0xf5, 0x66, 0xdc, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff, 0x58, 0x9d, 0x6d,
	0x87, 0x94, 0x02, 0x00, 0x00,
}

func (m *BitBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BitBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultSubassetSupply != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.DefaultSubassetSupply))
		i--
		dAtA[i] = 0x70
	}
	if len(m.SubassetSupplys) > 0 {
		for iNdEx := len(m.SubassetSupplys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubassetSupplys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.NextSubassetId != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.NextSubassetId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.FreezeRanges) > 0 {
		for iNdEx := len(m.FreezeRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FreezeRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBadges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Permissions != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x28
	}
	if m.Manager != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.Manager))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ArbitraryBytes) > 0 {
		i -= len(m.ArbitraryBytes)
		copy(dAtA[i:], m.ArbitraryBytes)
		i = encodeVarintBadges(dAtA, i, uint64(len(m.ArbitraryBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uri != nil {
		{
			size, err := m.Uri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBadges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBadges(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBadges(dAtA []byte, offset int, v uint64) int {
	offset -= sovBadges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BitBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBadges(uint64(m.Id))
	}
	if m.Uri != nil {
		l = m.Uri.Size()
		n += 1 + l + sovBadges(uint64(l))
	}
	l = len(m.ArbitraryBytes)
	if l > 0 {
		n += 1 + l + sovBadges(uint64(l))
	}
	if m.Manager != 0 {
		n += 1 + sovBadges(uint64(m.Manager))
	}
	if m.Permissions != 0 {
		n += 1 + sovBadges(uint64(m.Permissions))
	}
	if len(m.FreezeRanges) > 0 {
		for _, e := range m.FreezeRanges {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	if m.NextSubassetId != 0 {
		n += 1 + sovBadges(uint64(m.NextSubassetId))
	}
	if len(m.SubassetSupplys) > 0 {
		for _, e := range m.SubassetSupplys {
			l = e.Size()
			n += 1 + l + sovBadges(uint64(l))
		}
	}
	if m.DefaultSubassetSupply != 0 {
		n += 1 + sovBadges(uint64(m.DefaultSubassetSupply))
	}
	return n
}

func sovBadges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBadges(x uint64) (n int) {
	return sovBadges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BitBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBadges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uri == nil {
				m.Uri = &UriObject{}
			}
			if err := m.Uri.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArbitraryBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArbitraryBytes = append(m.ArbitraryBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ArbitraryBytes == nil {
				m.ArbitraryBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			m.Manager = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Manager |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreezeRanges = append(m.FreezeRanges, &IdRange{})
			if err := m.FreezeRanges[len(m.FreezeRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSubassetId", wireType)
			}
			m.NextSubassetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSubassetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubassetSupplys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBadges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBadges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubassetSupplys = append(m.SubassetSupplys, &BalanceObject{})
			if err := m.SubassetSupplys[len(m.SubassetSupplys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubassetSupply", wireType)
			}
			m.DefaultSubassetSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultSubassetSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBadges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBadges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBadges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBadges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBadges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBadges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBadges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBadges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBadges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBadges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBadges = fmt.Errorf("proto: unexpected end of group")
)

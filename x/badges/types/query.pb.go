// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCollectionRequest struct {
	CollectionId string `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
}

func (m *QueryGetCollectionRequest) Reset()         { *m = QueryGetCollectionRequest{} }
func (m *QueryGetCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCollectionRequest) ProtoMessage()    {}
func (*QueryGetCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{2}
}
func (m *QueryGetCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCollectionRequest.Merge(m, src)
}
func (m *QueryGetCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCollectionRequest proto.InternalMessageInfo

func (m *QueryGetCollectionRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

type QueryGetCollectionResponse struct {
	Collection *BadgeCollection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (m *QueryGetCollectionResponse) Reset()         { *m = QueryGetCollectionResponse{} }
func (m *QueryGetCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCollectionResponse) ProtoMessage()    {}
func (*QueryGetCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{3}
}
func (m *QueryGetCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCollectionResponse.Merge(m, src)
}
func (m *QueryGetCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCollectionResponse proto.InternalMessageInfo

func (m *QueryGetCollectionResponse) GetCollection() *BadgeCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

type QueryGetBalanceRequest struct {
	CollectionId string `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Address      string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetBalanceRequest) Reset()         { *m = QueryGetBalanceRequest{} }
func (m *QueryGetBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBalanceRequest) ProtoMessage()    {}
func (*QueryGetBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{4}
}
func (m *QueryGetBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBalanceRequest.Merge(m, src)
}
func (m *QueryGetBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBalanceRequest proto.InternalMessageInfo

func (m *QueryGetBalanceRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetBalanceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetBalanceResponse struct {
	Balance *UserBalanceStore `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *QueryGetBalanceResponse) Reset()         { *m = QueryGetBalanceResponse{} }
func (m *QueryGetBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBalanceResponse) ProtoMessage()    {}
func (*QueryGetBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{5}
}
func (m *QueryGetBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBalanceResponse.Merge(m, src)
}
func (m *QueryGetBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBalanceResponse proto.InternalMessageInfo

func (m *QueryGetBalanceResponse) GetBalance() *UserBalanceStore {
	if m != nil {
		return m.Balance
	}
	return nil
}

type QueryGetAddressListRequest struct {
	ListId string `protobuf:"bytes,1,opt,name=listId,proto3" json:"listId,omitempty"`
}

func (m *QueryGetAddressListRequest) Reset()         { *m = QueryGetAddressListRequest{} }
func (m *QueryGetAddressListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressListRequest) ProtoMessage()    {}
func (*QueryGetAddressListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{6}
}
func (m *QueryGetAddressListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressListRequest.Merge(m, src)
}
func (m *QueryGetAddressListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressListRequest proto.InternalMessageInfo

func (m *QueryGetAddressListRequest) GetListId() string {
	if m != nil {
		return m.ListId
	}
	return ""
}

type QueryGetAddressListResponse struct {
	List *AddressList `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
}

func (m *QueryGetAddressListResponse) Reset()         { *m = QueryGetAddressListResponse{} }
func (m *QueryGetAddressListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressListResponse) ProtoMessage()    {}
func (*QueryGetAddressListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{7}
}
func (m *QueryGetAddressListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressListResponse.Merge(m, src)
}
func (m *QueryGetAddressListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressListResponse proto.InternalMessageInfo

func (m *QueryGetAddressListResponse) GetList() *AddressList {
	if m != nil {
		return m.List
	}
	return nil
}

type QueryGetApprovalTrackerRequest struct {
	CollectionId    string `protobuf:"bytes,5,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	ApprovalLevel   string `protobuf:"bytes,2,opt,name=approvalLevel,proto3" json:"approvalLevel,omitempty"`
	ApproverAddress string `protobuf:"bytes,3,opt,name=approverAddress,proto3" json:"approverAddress,omitempty"`
	ApprovalId      string `protobuf:"bytes,7,opt,name=approvalId,proto3" json:"approvalId,omitempty"`
	AmountTrackerId string `protobuf:"bytes,1,opt,name=amountTrackerId,proto3" json:"amountTrackerId,omitempty"`
	TrackerType     string `protobuf:"bytes,4,opt,name=trackerType,proto3" json:"trackerType,omitempty"`
	ApprovedAddress string `protobuf:"bytes,6,opt,name=approvedAddress,proto3" json:"approvedAddress,omitempty"`
}

func (m *QueryGetApprovalTrackerRequest) Reset()         { *m = QueryGetApprovalTrackerRequest{} }
func (m *QueryGetApprovalTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovalTrackerRequest) ProtoMessage()    {}
func (*QueryGetApprovalTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{8}
}
func (m *QueryGetApprovalTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovalTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovalTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovalTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovalTrackerRequest.Merge(m, src)
}
func (m *QueryGetApprovalTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovalTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovalTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovalTrackerRequest proto.InternalMessageInfo

func (m *QueryGetApprovalTrackerRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetApprovalTrackerRequest) GetApprovalLevel() string {
	if m != nil {
		return m.ApprovalLevel
	}
	return ""
}

func (m *QueryGetApprovalTrackerRequest) GetApproverAddress() string {
	if m != nil {
		return m.ApproverAddress
	}
	return ""
}

func (m *QueryGetApprovalTrackerRequest) GetApprovalId() string {
	if m != nil {
		return m.ApprovalId
	}
	return ""
}

func (m *QueryGetApprovalTrackerRequest) GetAmountTrackerId() string {
	if m != nil {
		return m.AmountTrackerId
	}
	return ""
}

func (m *QueryGetApprovalTrackerRequest) GetTrackerType() string {
	if m != nil {
		return m.TrackerType
	}
	return ""
}

func (m *QueryGetApprovalTrackerRequest) GetApprovedAddress() string {
	if m != nil {
		return m.ApprovedAddress
	}
	return ""
}

type QueryGetApprovalTrackerResponse struct {
	Tracker *ApprovalTracker `protobuf:"bytes,1,opt,name=tracker,proto3" json:"tracker,omitempty"`
}

func (m *QueryGetApprovalTrackerResponse) Reset()         { *m = QueryGetApprovalTrackerResponse{} }
func (m *QueryGetApprovalTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovalTrackerResponse) ProtoMessage()    {}
func (*QueryGetApprovalTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{9}
}
func (m *QueryGetApprovalTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovalTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovalTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovalTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovalTrackerResponse.Merge(m, src)
}
func (m *QueryGetApprovalTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovalTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovalTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovalTrackerResponse proto.InternalMessageInfo

func (m *QueryGetApprovalTrackerResponse) GetTracker() *ApprovalTracker {
	if m != nil {
		return m.Tracker
	}
	return nil
}

type QueryGetChallengeTrackerRequest struct {
	CollectionId       string `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	ApprovalLevel      string `protobuf:"bytes,2,opt,name=approvalLevel,proto3" json:"approvalLevel,omitempty"`
	ApproverAddress    string `protobuf:"bytes,3,opt,name=approverAddress,proto3" json:"approverAddress,omitempty"`
	ApprovalId         string `protobuf:"bytes,6,opt,name=approvalId,proto3" json:"approvalId,omitempty"`
	ChallengeTrackerId string `protobuf:"bytes,4,opt,name=challengeTrackerId,proto3" json:"challengeTrackerId,omitempty"`
	LeafIndex          string `protobuf:"bytes,5,opt,name=leafIndex,proto3" json:"leafIndex,omitempty"`
}

func (m *QueryGetChallengeTrackerRequest) Reset()         { *m = QueryGetChallengeTrackerRequest{} }
func (m *QueryGetChallengeTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengeTrackerRequest) ProtoMessage()    {}
func (*QueryGetChallengeTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{10}
}
func (m *QueryGetChallengeTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengeTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengeTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengeTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengeTrackerRequest.Merge(m, src)
}
func (m *QueryGetChallengeTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengeTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengeTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengeTrackerRequest proto.InternalMessageInfo

func (m *QueryGetChallengeTrackerRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetChallengeTrackerRequest) GetApprovalLevel() string {
	if m != nil {
		return m.ApprovalLevel
	}
	return ""
}

func (m *QueryGetChallengeTrackerRequest) GetApproverAddress() string {
	if m != nil {
		return m.ApproverAddress
	}
	return ""
}

func (m *QueryGetChallengeTrackerRequest) GetApprovalId() string {
	if m != nil {
		return m.ApprovalId
	}
	return ""
}

func (m *QueryGetChallengeTrackerRequest) GetChallengeTrackerId() string {
	if m != nil {
		return m.ChallengeTrackerId
	}
	return ""
}

func (m *QueryGetChallengeTrackerRequest) GetLeafIndex() string {
	if m != nil {
		return m.LeafIndex
	}
	return ""
}

type QueryGetChallengeTrackerResponse struct {
	NumUsed string `protobuf:"bytes,1,opt,name=numUsed,proto3" json:"numUsed,omitempty"`
}

func (m *QueryGetChallengeTrackerResponse) Reset()         { *m = QueryGetChallengeTrackerResponse{} }
func (m *QueryGetChallengeTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengeTrackerResponse) ProtoMessage()    {}
func (*QueryGetChallengeTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{11}
}
func (m *QueryGetChallengeTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengeTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengeTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengeTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengeTrackerResponse.Merge(m, src)
}
func (m *QueryGetChallengeTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengeTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengeTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengeTrackerResponse proto.InternalMessageInfo

func (m *QueryGetChallengeTrackerResponse) GetNumUsed() string {
	if m != nil {
		return m.NumUsed
	}
	return ""
}

type QueryGetDynamicStoreRequest struct {
	StoreId string `protobuf:"bytes,1,opt,name=storeId,proto3" json:"storeId,omitempty"`
}

func (m *QueryGetDynamicStoreRequest) Reset()         { *m = QueryGetDynamicStoreRequest{} }
func (m *QueryGetDynamicStoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDynamicStoreRequest) ProtoMessage()    {}
func (*QueryGetDynamicStoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{12}
}
func (m *QueryGetDynamicStoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDynamicStoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDynamicStoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDynamicStoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDynamicStoreRequest.Merge(m, src)
}
func (m *QueryGetDynamicStoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDynamicStoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDynamicStoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDynamicStoreRequest proto.InternalMessageInfo

func (m *QueryGetDynamicStoreRequest) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

type QueryGetDynamicStoreResponse struct {
	Store *DynamicStore `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
}

func (m *QueryGetDynamicStoreResponse) Reset()         { *m = QueryGetDynamicStoreResponse{} }
func (m *QueryGetDynamicStoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDynamicStoreResponse) ProtoMessage()    {}
func (*QueryGetDynamicStoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{13}
}
func (m *QueryGetDynamicStoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDynamicStoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDynamicStoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDynamicStoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDynamicStoreResponse.Merge(m, src)
}
func (m *QueryGetDynamicStoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDynamicStoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDynamicStoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDynamicStoreResponse proto.InternalMessageInfo

func (m *QueryGetDynamicStoreResponse) GetStore() *DynamicStore {
	if m != nil {
		return m.Store
	}
	return nil
}

type QueryGetDynamicStoreValueRequest struct {
	StoreId string `protobuf:"bytes,1,opt,name=storeId,proto3" json:"storeId,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetDynamicStoreValueRequest) Reset()         { *m = QueryGetDynamicStoreValueRequest{} }
func (m *QueryGetDynamicStoreValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDynamicStoreValueRequest) ProtoMessage()    {}
func (*QueryGetDynamicStoreValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{14}
}
func (m *QueryGetDynamicStoreValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDynamicStoreValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDynamicStoreValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDynamicStoreValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDynamicStoreValueRequest.Merge(m, src)
}
func (m *QueryGetDynamicStoreValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDynamicStoreValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDynamicStoreValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDynamicStoreValueRequest proto.InternalMessageInfo

func (m *QueryGetDynamicStoreValueRequest) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

func (m *QueryGetDynamicStoreValueRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetDynamicStoreValueResponse struct {
	Value *DynamicStoreValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryGetDynamicStoreValueResponse) Reset()         { *m = QueryGetDynamicStoreValueResponse{} }
func (m *QueryGetDynamicStoreValueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDynamicStoreValueResponse) ProtoMessage()    {}
func (*QueryGetDynamicStoreValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{15}
}
func (m *QueryGetDynamicStoreValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDynamicStoreValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDynamicStoreValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDynamicStoreValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDynamicStoreValueResponse.Merge(m, src)
}
func (m *QueryGetDynamicStoreValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDynamicStoreValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDynamicStoreValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDynamicStoreValueResponse proto.InternalMessageInfo

func (m *QueryGetDynamicStoreValueResponse) GetValue() *DynamicStoreValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryGetETHSignatureTrackerRequest struct {
	CollectionId       string `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	ApprovalLevel      string `protobuf:"bytes,2,opt,name=approvalLevel,proto3" json:"approvalLevel,omitempty"`
	ApproverAddress    string `protobuf:"bytes,3,opt,name=approverAddress,proto3" json:"approverAddress,omitempty"`
	ApprovalId         string `protobuf:"bytes,4,opt,name=approvalId,proto3" json:"approvalId,omitempty"`
	ChallengeTrackerId string `protobuf:"bytes,5,opt,name=challengeTrackerId,proto3" json:"challengeTrackerId,omitempty"`
	Signature          string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *QueryGetETHSignatureTrackerRequest) Reset()         { *m = QueryGetETHSignatureTrackerRequest{} }
func (m *QueryGetETHSignatureTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetETHSignatureTrackerRequest) ProtoMessage()    {}
func (*QueryGetETHSignatureTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{16}
}
func (m *QueryGetETHSignatureTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetETHSignatureTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetETHSignatureTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetETHSignatureTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetETHSignatureTrackerRequest.Merge(m, src)
}
func (m *QueryGetETHSignatureTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetETHSignatureTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetETHSignatureTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetETHSignatureTrackerRequest proto.InternalMessageInfo

func (m *QueryGetETHSignatureTrackerRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetETHSignatureTrackerRequest) GetApprovalLevel() string {
	if m != nil {
		return m.ApprovalLevel
	}
	return ""
}

func (m *QueryGetETHSignatureTrackerRequest) GetApproverAddress() string {
	if m != nil {
		return m.ApproverAddress
	}
	return ""
}

func (m *QueryGetETHSignatureTrackerRequest) GetApprovalId() string {
	if m != nil {
		return m.ApprovalId
	}
	return ""
}

func (m *QueryGetETHSignatureTrackerRequest) GetChallengeTrackerId() string {
	if m != nil {
		return m.ChallengeTrackerId
	}
	return ""
}

func (m *QueryGetETHSignatureTrackerRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type QueryGetETHSignatureTrackerResponse struct {
	NumUsed string `protobuf:"bytes,1,opt,name=numUsed,proto3" json:"numUsed,omitempty"`
}

func (m *QueryGetETHSignatureTrackerResponse) Reset()         { *m = QueryGetETHSignatureTrackerResponse{} }
func (m *QueryGetETHSignatureTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetETHSignatureTrackerResponse) ProtoMessage()    {}
func (*QueryGetETHSignatureTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{17}
}
func (m *QueryGetETHSignatureTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetETHSignatureTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetETHSignatureTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetETHSignatureTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetETHSignatureTrackerResponse.Merge(m, src)
}
func (m *QueryGetETHSignatureTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetETHSignatureTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetETHSignatureTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetETHSignatureTrackerResponse proto.InternalMessageInfo

func (m *QueryGetETHSignatureTrackerResponse) GetNumUsed() string {
	if m != nil {
		return m.NumUsed
	}
	return ""
}

type QueryGetWrappableBalancesRequest struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetWrappableBalancesRequest) Reset()         { *m = QueryGetWrappableBalancesRequest{} }
func (m *QueryGetWrappableBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWrappableBalancesRequest) ProtoMessage()    {}
func (*QueryGetWrappableBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{18}
}
func (m *QueryGetWrappableBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWrappableBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWrappableBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWrappableBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWrappableBalancesRequest.Merge(m, src)
}
func (m *QueryGetWrappableBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWrappableBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWrappableBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWrappableBalancesRequest proto.InternalMessageInfo

func (m *QueryGetWrappableBalancesRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetWrappableBalancesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetWrappableBalancesResponse struct {
	MaxWrappableAmount Uint `protobuf:"bytes,1,opt,name=maxWrappableAmount,proto3,customtype=Uint" json:"maxWrappableAmount"`
}

func (m *QueryGetWrappableBalancesResponse) Reset()         { *m = QueryGetWrappableBalancesResponse{} }
func (m *QueryGetWrappableBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWrappableBalancesResponse) ProtoMessage()    {}
func (*QueryGetWrappableBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_938ed0d19dbc00d5, []int{19}
}
func (m *QueryGetWrappableBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWrappableBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWrappableBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWrappableBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWrappableBalancesResponse.Merge(m, src)
}
func (m *QueryGetWrappableBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWrappableBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWrappableBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWrappableBalancesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "badges.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "badges.QueryParamsResponse")
	proto.RegisterType((*QueryGetCollectionRequest)(nil), "badges.QueryGetCollectionRequest")
	proto.RegisterType((*QueryGetCollectionResponse)(nil), "badges.QueryGetCollectionResponse")
	proto.RegisterType((*QueryGetBalanceRequest)(nil), "badges.QueryGetBalanceRequest")
	proto.RegisterType((*QueryGetBalanceResponse)(nil), "badges.QueryGetBalanceResponse")
	proto.RegisterType((*QueryGetAddressListRequest)(nil), "badges.QueryGetAddressListRequest")
	proto.RegisterType((*QueryGetAddressListResponse)(nil), "badges.QueryGetAddressListResponse")
	proto.RegisterType((*QueryGetApprovalTrackerRequest)(nil), "badges.QueryGetApprovalTrackerRequest")
	proto.RegisterType((*QueryGetApprovalTrackerResponse)(nil), "badges.QueryGetApprovalTrackerResponse")
	proto.RegisterType((*QueryGetChallengeTrackerRequest)(nil), "badges.QueryGetChallengeTrackerRequest")
	proto.RegisterType((*QueryGetChallengeTrackerResponse)(nil), "badges.QueryGetChallengeTrackerResponse")
	proto.RegisterType((*QueryGetDynamicStoreRequest)(nil), "badges.QueryGetDynamicStoreRequest")
	proto.RegisterType((*QueryGetDynamicStoreResponse)(nil), "badges.QueryGetDynamicStoreResponse")
	proto.RegisterType((*QueryGetDynamicStoreValueRequest)(nil), "badges.QueryGetDynamicStoreValueRequest")
	proto.RegisterType((*QueryGetDynamicStoreValueResponse)(nil), "badges.QueryGetDynamicStoreValueResponse")
	proto.RegisterType((*QueryGetETHSignatureTrackerRequest)(nil), "badges.QueryGetETHSignatureTrackerRequest")
	proto.RegisterType((*QueryGetETHSignatureTrackerResponse)(nil), "badges.QueryGetETHSignatureTrackerResponse")
	proto.RegisterType((*QueryGetWrappableBalancesRequest)(nil), "badges.QueryGetWrappableBalancesRequest")
	proto.RegisterType((*QueryGetWrappableBalancesResponse)(nil), "badges.QueryGetWrappableBalancesResponse")
}

func init() { proto.RegisterFile("badges/query.proto", fileDescriptor_938ed0d19dbc00d5) }

var fileDescriptor_938ed0d19dbc00d5 = []byte{
	// 1239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6b, 0x1b, 0xc7,
	0x17, 0xf7, 0xea, 0x6b, 0x49, 0xe4, 0xe5, 0x17, 0x8c, 0xfd, 0x75, 0x94, 0xb5, 0x91, 0x9d, 0x49,
	0xa8, 0x1d, 0xb7, 0x78, 0xb1, 0x5b, 0x08, 0x14, 0x93, 0x34, 0x72, 0x7e, 0xd4, 0xad, 0x53, 0x1a,
	0x45, 0x76, 0xa1, 0x17, 0x31, 0x92, 0x26, 0xb2, 0xe8, 0x6a, 0x77, 0xb3, 0xbb, 0x72, 0x6d, 0x84,
	0x2e, 0x2d, 0x94, 0x42, 0x2e, 0xa5, 0x3d, 0x94, 0x42, 0xda, 0x43, 0x7b, 0x2b, 0xf4, 0x5f, 0x28,
	0xf4, 0x96, 0x63, 0xa0, 0x97, 0xd2, 0x43, 0x28, 0x76, 0xff, 0x8d, 0x42, 0xd1, 0xcc, 0x9b, 0xfd,
	0xa1, 0x5d, 0xfd, 0x48, 0x03, 0xa5, 0x27, 0x6b, 0xde, 0x7c, 0xe6, 0xcd, 0xe7, 0x7d, 0xe6, 0xe9,
	0xbd, 0x27, 0x03, 0xa9, 0xb1, 0x46, 0x93, 0x7b, 0xc6, 0xa3, 0x0e, 0x77, 0x8f, 0xd6, 0x1c, 0xd7,
	0xf6, 0x6d, 0x92, 0x93, 0x36, 0x7d, 0xb6, 0x69, 0x37, 0x6d, 0x61, 0x32, 0xfa, 0x9f, 0xe4, 0xae,
	0xbe, 0xd0, 0xb4, 0xed, 0xa6, 0xc9, 0x0d, 0xe6, 0xb4, 0x0c, 0x66, 0x59, 0xb6, 0xcf, 0xfc, 0x96,
	0x6d, 0x79, 0xb8, 0xbb, 0x5a, 0xb7, 0xbd, 0xb6, 0xed, 0x19, 0x35, 0xe6, 0x71, 0xe9, 0xd4, 0x38,
	0x58, 0xaf, 0x71, 0x9f, 0xad, 0x1b, 0x0e, 0x6b, 0xb6, 0x2c, 0x01, 0x46, 0xec, 0x0c, 0xde, 0xed,
	0x30, 0x97, 0xb5, 0x95, 0x83, 0x02, 0x1a, 0xeb, 0xb6, 0x69, 0xf2, 0x7a, 0xd4, 0xf5, 0xff, 0x71,
	0xa7, 0xc6, 0x4c, 0x66, 0xd5, 0xb9, 0x32, 0xcf, 0xa1, 0xd9, 0x77, 0x99, 0xe5, 0x3d, 0xe4, 0xae,
	0xb2, 0xeb, 0x68, 0x67, 0x8d, 0x86, 0xcb, 0x3d, 0xaf, 0x6a, 0xb6, 0x3c, 0x5f, 0xed, 0xcd, 0xe3,
	0x5e, 0xe3, 0xc8, 0x62, 0xed, 0x56, 0xbd, 0xea, 0xf9, 0xb6, 0xab, 0x1c, 0xd2, 0x59, 0x20, 0xf7,
	0xfb, 0xc4, 0xdf, 0x17, 0xb4, 0xca, 0xfc, 0x51, 0x87, 0x7b, 0x3e, 0xdd, 0x82, 0x99, 0x98, 0xd5,
	0x73, 0x6c, 0xcb, 0xe3, 0xe4, 0x35, 0xc8, 0x49, 0xfa, 0x05, 0x6d, 0x49, 0x5b, 0x39, 0xbd, 0x71,
	0x6e, 0x4d, 0xba, 0x5e, 0x93, 0xb8, 0xd2, 0xf4, 0xd3, 0xe7, 0x8b, 0x53, 0x65, 0xc4, 0xd0, 0x1b,
	0x70, 0x51, 0x38, 0xb9, 0xcb, 0xfd, 0xad, 0x20, 0x3e, 0xbc, 0x81, 0x50, 0x38, 0x13, 0x06, 0xbd,
	0xdd, 0x10, 0x0e, 0x4f, 0x95, 0x63, 0x36, 0xba, 0x0b, 0x7a, 0x9a, 0x03, 0x24, 0x73, 0x0d, 0x20,
	0x44, 0x23, 0xa1, 0x0b, 0x8a, 0x50, 0xa9, 0xff, 0x27, 0x72, 0x28, 0x02, 0xa5, 0x7b, 0x30, 0xa7,
	0xdc, 0x96, 0xa4, 0xba, 0x2f, 0x40, 0x8a, 0x14, 0x20, 0x8f, 0x22, 0x17, 0x32, 0x62, 0x5b, 0x2d,
	0xe9, 0x3d, 0xb8, 0x90, 0xf0, 0x8b, 0x5c, 0x37, 0x20, 0x8f, 0x0f, 0x89, 0x44, 0x0b, 0x8a, 0xe8,
	0xae, 0xc7, 0x5d, 0x44, 0x3f, 0xe8, 0xbf, 0x4b, 0x59, 0x01, 0xe9, 0x1b, 0x61, 0xf4, 0x37, 0xe5,
	0x0d, 0x3b, 0x2d, 0xcf, 0x57, 0x54, 0xe7, 0x20, 0xd7, 0x7f, 0xe3, 0x80, 0x24, 0xae, 0xe8, 0x1d,
	0x98, 0x4f, 0x3d, 0x85, 0x44, 0x96, 0x61, 0xba, 0x0f, 0x44, 0x16, 0x33, 0x8a, 0x45, 0x14, 0x2a,
	0x00, 0xf4, 0xc7, 0x0c, 0x14, 0x03, 0x47, 0x8e, 0xe3, 0xda, 0x07, 0xcc, 0xac, 0xb8, 0xac, 0xfe,
	0x11, 0x77, 0x87, 0xa9, 0x95, 0x4d, 0x51, 0xeb, 0x0a, 0x9c, 0x65, 0x78, 0x7a, 0x87, 0x1f, 0x70,
	0x13, 0x35, 0x8b, 0x1b, 0xc9, 0x0a, 0x9c, 0x97, 0x06, 0xee, 0x22, 0x93, 0xc2, 0xff, 0x04, 0x6e,
	0xd0, 0x4c, 0x8a, 0x00, 0xea, 0xe8, 0x76, 0xa3, 0x90, 0x17, 0xa0, 0x88, 0x45, 0x78, 0x6a, 0xdb,
	0x1d, 0xcb, 0x47, 0xae, 0x81, 0x3e, 0x83, 0x66, 0xb2, 0x04, 0xa7, 0x7d, 0xb9, 0xa8, 0x1c, 0x39,
	0xbc, 0x30, 0x2d, 0x50, 0x51, 0x53, 0x84, 0x55, 0x43, 0xb1, 0xca, 0xc5, 0x58, 0x29, 0x33, 0xad,
	0xc0, 0xe2, 0x50, 0xad, 0x50, 0xf8, 0x75, 0xc8, 0xa3, 0xef, 0xc1, 0x54, 0x1d, 0x3c, 0xa1, 0x70,
	0xf4, 0xd3, 0x4c, 0xe8, 0x76, 0x6b, 0x9f, 0x99, 0x26, 0xb7, 0x9a, 0x7c, 0xcc, 0x1b, 0x68, 0xff,
	0xfa, 0x1b, 0xe4, 0x12, 0x6f, 0xb0, 0x06, 0xa4, 0x3e, 0x40, 0x77, 0xbb, 0x81, 0x02, 0xa7, 0xec,
	0x90, 0x05, 0x38, 0x65, 0x72, 0xf6, 0x70, 0xdb, 0x6a, 0xf0, 0x43, 0x4c, 0xa2, 0xd0, 0x40, 0x37,
	0x61, 0x69, 0xb8, 0x08, 0x28, 0x6e, 0x01, 0xf2, 0x56, 0xa7, 0xbd, 0xeb, 0x71, 0x25, 0x80, 0x5a,
	0xd2, 0x6b, 0xe1, 0xd7, 0xe1, 0x96, 0x2c, 0x7f, 0xf2, 0x5b, 0x86, 0xf2, 0x15, 0x20, 0x2f, 0xaa,
	0x61, 0xa0, 0x9c, 0x5a, 0xd2, 0x77, 0x60, 0x21, 0xfd, 0x20, 0x5e, 0xb9, 0x0a, 0x59, 0x01, 0xc5,
	0xd7, 0x9c, 0x55, 0xaf, 0x19, 0x03, 0x4b, 0x08, 0xdd, 0x0b, 0x43, 0x88, 0x6e, 0xef, 0x31, 0xb3,
	0x33, 0x9e, 0xc9, 0x88, 0x82, 0x53, 0x81, 0x4b, 0x23, 0xfc, 0x22, 0x51, 0x03, 0xb2, 0x07, 0x7d,
	0x03, 0x12, 0xbd, 0x98, 0x46, 0x54, 0x9e, 0x90, 0x38, 0xfa, 0x59, 0x06, 0xa8, 0x72, 0x7b, 0xbb,
	0xf2, 0xf6, 0x83, 0x56, 0xd3, 0x62, 0x7e, 0xc7, 0xfd, 0xef, 0x65, 0xde, 0xf4, 0x84, 0x99, 0x97,
	0x1d, 0x95, 0x79, 0x9e, 0x0a, 0x0f, 0x13, 0x39, 0x34, 0xd0, 0x1b, 0x70, 0x79, 0xa4, 0x0e, 0x63,
	0x93, 0xaf, 0x1c, 0xbe, 0xfb, 0x07, 0x2e, 0x73, 0x1c, 0x56, 0x33, 0x39, 0xd6, 0x7a, 0xd5, 0x69,
	0xc9, 0x2c, 0x64, 0x1b, 0xdc, 0xb2, 0xdb, 0x78, 0x56, 0x2e, 0x46, 0xbc, 0x39, 0x0b, 0xdf, 0x3c,
	0xc5, 0x27, 0x52, 0xda, 0x04, 0xd2, 0x66, 0x87, 0xc1, 0xfe, 0x4d, 0x51, 0xfa, 0xe4, 0x0d, 0xa5,
	0x33, 0xfd, 0x1e, 0xfd, 0xfb, 0xf3, 0xc5, 0xe9, 0xdd, 0x96, 0xe5, 0x97, 0x53, 0x70, 0x1b, 0x3f,
	0x9d, 0x87, 0xac, 0xb8, 0x83, 0xb8, 0x90, 0x93, 0x9d, 0x9d, 0xe8, 0x2a, 0x6d, 0x92, 0xc3, 0x82,
	0x3e, 0x9f, 0xba, 0x27, 0xa9, 0x50, 0xe3, 0x93, 0x5f, 0xff, 0xfc, 0x2a, 0x73, 0x95, 0x2c, 0x1b,
	0xb5, 0x96, 0xaf, 0x66, 0x1a, 0xf5, 0xa9, 0xbe, 0xcf, 0x5a, 0x96, 0x11, 0x1b, 0x8c, 0xc8, 0x77,
	0x1a, 0x9c, 0x8d, 0x35, 0x7c, 0x72, 0x29, 0xe6, 0x3f, 0x6d, 0x9a, 0xd0, 0xe9, 0x28, 0x08, 0x32,
	0xb9, 0x23, 0x98, 0xbc, 0x45, 0xae, 0x8f, 0x65, 0xd2, 0xe4, 0x7e, 0x35, 0xcc, 0x63, 0xa3, 0x1b,
	0xcd, 0xe9, 0x1e, 0xf9, 0x56, 0x83, 0x73, 0xf1, 0xee, 0x4a, 0x12, 0xd7, 0x27, 0x1b, 0xb6, 0x7e,
	0x79, 0x24, 0x06, 0x39, 0x96, 0x04, 0xc7, 0x4d, 0xf2, 0xe6, 0x44, 0x1c, 0xa3, 0xc3, 0x9e, 0xd1,
	0x95, 0x03, 0x40, 0x8f, 0x3c, 0xce, 0x00, 0x49, 0x36, 0x22, 0xf2, 0x4a, 0xe2, 0xfe, 0xd4, 0xae,
	0xae, 0x2f, 0x8f, 0xc5, 0x21, 0xd7, 0x1f, 0x34, 0x41, 0xf6, 0x89, 0x46, 0xbe, 0xd1, 0x26, 0xa3,
	0x8b, 0x8e, 0xbc, 0x2a, 0x76, 0xb8, 0x01, 0x65, 0x8d, 0x6e, 0xac, 0x2e, 0x04, 0xeb, 0xe0, 0xfb,
	0xdf, 0xb7, 0xc4, 0xbb, 0x78, 0xcf, 0xe8, 0x46, 0x3a, 0x76, 0x78, 0x42, 0x75, 0xe6, 0x1e, 0xf9,
	0x4b, 0x83, 0x99, 0x94, 0xd6, 0x41, 0x12, 0x61, 0x0e, 0xe9, 0xb0, 0xfa, 0xca, 0x78, 0x20, 0x0a,
	0xf2, 0xa5, 0x14, 0xe4, 0xb1, 0x46, 0x3e, 0x9f, 0x4c, 0x90, 0xa0, 0x22, 0xbd, 0x84, 0x20, 0xc9,
	0xaa, 0xd6, 0x33, 0xba, 0x41, 0xf7, 0xec, 0x91, 0xaf, 0x33, 0x30, 0x97, 0x5e, 0xc0, 0xc8, 0xea,
	0x60, 0x64, 0xc3, 0xab, 0xbd, 0xfe, 0xea, 0x44, 0xd8, 0x7f, 0x9a, 0x19, 0xdc, 0xdf, 0xaf, 0x06,
	0x75, 0xf7, 0x65, 0xb2, 0x23, 0x68, 0x05, 0xc3, 0x94, 0x09, 0x6e, 0xe9, 0x91, 0x27, 0x1a, 0x40,
	0x38, 0xaa, 0x93, 0xe2, 0x60, 0x84, 0xf1, 0xdf, 0x06, 0xfa, 0xe2, 0xd0, 0x7d, 0x8c, 0xfa, 0x9e,
	0x08, 0xfa, 0x2e, 0xb9, 0x3d, 0x51, 0xc8, 0x38, 0xe5, 0x27, 0x83, 0x54, 0x89, 0xfb, 0xbd, 0x06,
	0xe7, 0x07, 0x1a, 0x3b, 0x49, 0xd4, 0x90, 0x94, 0x99, 0x46, 0xbf, 0x32, 0x1a, 0x84, 0x6c, 0x6f,
	0x09, 0xb6, 0xd7, 0xc9, 0xe6, 0x44, 0x6c, 0x63, 0x3f, 0x1d, 0x8d, 0x2e, 0x8e, 0x26, 0x3d, 0xf2,
	0x8b, 0x06, 0xb3, 0x69, 0xd3, 0x07, 0x59, 0x19, 0x45, 0x22, 0x3a, 0xf8, 0xe8, 0x57, 0x27, 0x40,
	0x22, 0xe7, 0x8a, 0xe0, 0xfc, 0x1e, 0xd9, 0x79, 0x71, 0xce, 0x55, 0x31, 0xdb, 0x84, 0xcc, 0x23,
	0x42, 0xff, 0x2c, 0x63, 0x48, 0x74, 0xd3, 0x64, 0x0c, 0xc3, 0x9a, 0x78, 0x32, 0x86, 0xa1, 0xad,
	0x99, 0xde, 0x17, 0x31, 0xbc, 0x4b, 0xb6, 0x27, 0x8a, 0xe1, 0x63, 0xe5, 0x47, 0xe5, 0x8b, 0x67,
	0x74, 0xc5, 0x84, 0x10, 0x09, 0xa0, 0xb4, 0xf3, 0xf4, 0xb8, 0xa8, 0x3d, 0x3b, 0x2e, 0x6a, 0x7f,
	0x1c, 0x17, 0xb5, 0x2f, 0x4e, 0x8a, 0x53, 0xcf, 0x4e, 0x8a, 0x53, 0xbf, 0x9d, 0x14, 0xa7, 0x3e,
	0xdc, 0x68, 0xb6, 0xfc, 0xfd, 0x4e, 0x6d, 0xad, 0x6e, 0xb7, 0x87, 0x5f, 0x77, 0xa8, 0x2e, 0xf4,
	0x8f, 0x1c, 0xee, 0xd5, 0x72, 0xe2, 0xff, 0x02, 0xaf, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc1,
	0x34, 0xc9, 0x63, 0x2c, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a collection by ID.
	GetCollection(ctx context.Context, in *QueryGetCollectionRequest, opts ...grpc.CallOption) (*QueryGetCollectionResponse, error)
	// Queries an address list by ID.
	GetAddressList(ctx context.Context, in *QueryGetAddressListRequest, opts ...grpc.CallOption) (*QueryGetAddressListResponse, error)
	// Queries an approvals tracker by ID.
	GetApprovalTracker(ctx context.Context, in *QueryGetApprovalTrackerRequest, opts ...grpc.CallOption) (*QueryGetApprovalTrackerResponse, error)
	// Queries the number of times a given leaf has been used for a given merkle challenge.
	GetChallengeTracker(ctx context.Context, in *QueryGetChallengeTrackerRequest, opts ...grpc.CallOption) (*QueryGetChallengeTrackerResponse, error)
	// Queries the number of times a given signature has been used for a given ETH signature challenge.
	GetETHSignatureTracker(ctx context.Context, in *QueryGetETHSignatureTrackerRequest, opts ...grpc.CallOption) (*QueryGetETHSignatureTrackerResponse, error)
	// Queries an addresses balance for a collection, specified by its ID.
	GetBalance(ctx context.Context, in *QueryGetBalanceRequest, opts ...grpc.CallOption) (*QueryGetBalanceResponse, error)
	// Queries a dynamic store by ID.
	GetDynamicStore(ctx context.Context, in *QueryGetDynamicStoreRequest, opts ...grpc.CallOption) (*QueryGetDynamicStoreResponse, error)
	// Queries a dynamic store value by store ID and address.
	GetDynamicStoreValue(ctx context.Context, in *QueryGetDynamicStoreValueRequest, opts ...grpc.CallOption) (*QueryGetDynamicStoreValueResponse, error)
	// Queries the maximum wrappable amount for a given denom and user address.
	GetWrappableBalances(ctx context.Context, in *QueryGetWrappableBalancesRequest, opts ...grpc.CallOption) (*QueryGetWrappableBalancesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollection(ctx context.Context, in *QueryGetCollectionRequest, opts ...grpc.CallOption) (*QueryGetCollectionResponse, error) {
	out := new(QueryGetCollectionResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAddressList(ctx context.Context, in *QueryGetAddressListRequest, opts ...grpc.CallOption) (*QueryGetAddressListResponse, error) {
	out := new(QueryGetAddressListResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetAddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetApprovalTracker(ctx context.Context, in *QueryGetApprovalTrackerRequest, opts ...grpc.CallOption) (*QueryGetApprovalTrackerResponse, error) {
	out := new(QueryGetApprovalTrackerResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetApprovalTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChallengeTracker(ctx context.Context, in *QueryGetChallengeTrackerRequest, opts ...grpc.CallOption) (*QueryGetChallengeTrackerResponse, error) {
	out := new(QueryGetChallengeTrackerResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetChallengeTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetETHSignatureTracker(ctx context.Context, in *QueryGetETHSignatureTrackerRequest, opts ...grpc.CallOption) (*QueryGetETHSignatureTrackerResponse, error) {
	out := new(QueryGetETHSignatureTrackerResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetETHSignatureTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBalance(ctx context.Context, in *QueryGetBalanceRequest, opts ...grpc.CallOption) (*QueryGetBalanceResponse, error) {
	out := new(QueryGetBalanceResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDynamicStore(ctx context.Context, in *QueryGetDynamicStoreRequest, opts ...grpc.CallOption) (*QueryGetDynamicStoreResponse, error) {
	out := new(QueryGetDynamicStoreResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetDynamicStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDynamicStoreValue(ctx context.Context, in *QueryGetDynamicStoreValueRequest, opts ...grpc.CallOption) (*QueryGetDynamicStoreValueResponse, error) {
	out := new(QueryGetDynamicStoreValueResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetDynamicStoreValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWrappableBalances(ctx context.Context, in *QueryGetWrappableBalancesRequest, opts ...grpc.CallOption) (*QueryGetWrappableBalancesResponse, error) {
	out := new(QueryGetWrappableBalancesResponse)
	err := c.cc.Invoke(ctx, "/badges.Query/GetWrappableBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a collection by ID.
	GetCollection(context.Context, *QueryGetCollectionRequest) (*QueryGetCollectionResponse, error)
	// Queries an address list by ID.
	GetAddressList(context.Context, *QueryGetAddressListRequest) (*QueryGetAddressListResponse, error)
	// Queries an approvals tracker by ID.
	GetApprovalTracker(context.Context, *QueryGetApprovalTrackerRequest) (*QueryGetApprovalTrackerResponse, error)
	// Queries the number of times a given leaf has been used for a given merkle challenge.
	GetChallengeTracker(context.Context, *QueryGetChallengeTrackerRequest) (*QueryGetChallengeTrackerResponse, error)
	// Queries the number of times a given signature has been used for a given ETH signature challenge.
	GetETHSignatureTracker(context.Context, *QueryGetETHSignatureTrackerRequest) (*QueryGetETHSignatureTrackerResponse, error)
	// Queries an addresses balance for a collection, specified by its ID.
	GetBalance(context.Context, *QueryGetBalanceRequest) (*QueryGetBalanceResponse, error)
	// Queries a dynamic store by ID.
	GetDynamicStore(context.Context, *QueryGetDynamicStoreRequest) (*QueryGetDynamicStoreResponse, error)
	// Queries a dynamic store value by store ID and address.
	GetDynamicStoreValue(context.Context, *QueryGetDynamicStoreValueRequest) (*QueryGetDynamicStoreValueResponse, error)
	// Queries the maximum wrappable amount for a given denom and user address.
	GetWrappableBalances(context.Context, *QueryGetWrappableBalancesRequest) (*QueryGetWrappableBalancesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetCollection(ctx context.Context, req *QueryGetCollectionRequest) (*QueryGetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (*UnimplementedQueryServer) GetAddressList(ctx context.Context, req *QueryGetAddressListRequest) (*QueryGetAddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressList not implemented")
}
func (*UnimplementedQueryServer) GetApprovalTracker(ctx context.Context, req *QueryGetApprovalTrackerRequest) (*QueryGetApprovalTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovalTracker not implemented")
}
func (*UnimplementedQueryServer) GetChallengeTracker(ctx context.Context, req *QueryGetChallengeTrackerRequest) (*QueryGetChallengeTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeTracker not implemented")
}
func (*UnimplementedQueryServer) GetETHSignatureTracker(ctx context.Context, req *QueryGetETHSignatureTrackerRequest) (*QueryGetETHSignatureTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetETHSignatureTracker not implemented")
}
func (*UnimplementedQueryServer) GetBalance(ctx context.Context, req *QueryGetBalanceRequest) (*QueryGetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedQueryServer) GetDynamicStore(ctx context.Context, req *QueryGetDynamicStoreRequest) (*QueryGetDynamicStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicStore not implemented")
}
func (*UnimplementedQueryServer) GetDynamicStoreValue(ctx context.Context, req *QueryGetDynamicStoreValueRequest) (*QueryGetDynamicStoreValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicStoreValue not implemented")
}
func (*UnimplementedQueryServer) GetWrappableBalances(ctx context.Context, req *QueryGetWrappableBalancesRequest) (*QueryGetWrappableBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWrappableBalances not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollection(ctx, req.(*QueryGetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAddressList(ctx, req.(*QueryGetAddressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetApprovalTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovalTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetApprovalTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetApprovalTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetApprovalTracker(ctx, req.(*QueryGetApprovalTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChallengeTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChallengeTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChallengeTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetChallengeTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChallengeTracker(ctx, req.(*QueryGetChallengeTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetETHSignatureTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetETHSignatureTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetETHSignatureTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetETHSignatureTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetETHSignatureTracker(ctx, req.(*QueryGetETHSignatureTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBalance(ctx, req.(*QueryGetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDynamicStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDynamicStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDynamicStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetDynamicStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDynamicStore(ctx, req.(*QueryGetDynamicStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDynamicStoreValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDynamicStoreValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDynamicStoreValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetDynamicStoreValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDynamicStoreValue(ctx, req.(*QueryGetDynamicStoreValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWrappableBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWrappableBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWrappableBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/badges.Query/GetWrappableBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWrappableBalances(ctx, req.(*QueryGetWrappableBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "badges.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _Query_GetCollection_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _Query_GetAddressList_Handler,
		},
		{
			MethodName: "GetApprovalTracker",
			Handler:    _Query_GetApprovalTracker_Handler,
		},
		{
			MethodName: "GetChallengeTracker",
			Handler:    _Query_GetChallengeTracker_Handler,
		},
		{
			MethodName: "GetETHSignatureTracker",
			Handler:    _Query_GetETHSignatureTracker_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Query_GetBalance_Handler,
		},
		{
			MethodName: "GetDynamicStore",
			Handler:    _Query_GetDynamicStore_Handler,
		},
		{
			MethodName: "GetDynamicStoreValue",
			Handler:    _Query_GetDynamicStoreValue_Handler,
		},
		{
			MethodName: "GetWrappableBalances",
			Handler:    _Query_GetWrappableBalances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "badges/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ListId) > 0 {
		i -= len(m.ListId)
		copy(dAtA[i:], m.ListId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ListId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.List != nil {
		{
			size, err := m.List.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovalTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovalTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovalTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApprovalId) > 0 {
		i -= len(m.ApprovalId)
		copy(dAtA[i:], m.ApprovalId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovalId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ApprovedAddress) > 0 {
		i -= len(m.ApprovedAddress)
		copy(dAtA[i:], m.ApprovedAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovedAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TrackerType) > 0 {
		i -= len(m.TrackerType)
		copy(dAtA[i:], m.TrackerType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrackerType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApproverAddress) > 0 {
		i -= len(m.ApproverAddress)
		copy(dAtA[i:], m.ApproverAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApproverAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApprovalLevel) > 0 {
		i -= len(m.ApprovalLevel)
		copy(dAtA[i:], m.ApprovalLevel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovalLevel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AmountTrackerId) > 0 {
		i -= len(m.AmountTrackerId)
		copy(dAtA[i:], m.AmountTrackerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountTrackerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovalTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovalTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovalTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tracker != nil {
		{
			size, err := m.Tracker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengeTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengeTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengeTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApprovalId) > 0 {
		i -= len(m.ApprovalId)
		copy(dAtA[i:], m.ApprovalId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovalId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LeafIndex) > 0 {
		i -= len(m.LeafIndex)
		copy(dAtA[i:], m.LeafIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LeafIndex)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChallengeTrackerId) > 0 {
		i -= len(m.ChallengeTrackerId)
		copy(dAtA[i:], m.ChallengeTrackerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChallengeTrackerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApproverAddress) > 0 {
		i -= len(m.ApproverAddress)
		copy(dAtA[i:], m.ApproverAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApproverAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApprovalLevel) > 0 {
		i -= len(m.ApprovalLevel)
		copy(dAtA[i:], m.ApprovalLevel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovalLevel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengeTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengeTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengeTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NumUsed) > 0 {
		i -= len(m.NumUsed)
		copy(dAtA[i:], m.NumUsed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NumUsed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDynamicStoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDynamicStoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDynamicStoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StoreId) > 0 {
		i -= len(m.StoreId)
		copy(dAtA[i:], m.StoreId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDynamicStoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDynamicStoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDynamicStoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Store != nil {
		{
			size, err := m.Store.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDynamicStoreValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDynamicStoreValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDynamicStoreValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreId) > 0 {
		i -= len(m.StoreId)
		copy(dAtA[i:], m.StoreId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDynamicStoreValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDynamicStoreValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDynamicStoreValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetETHSignatureTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetETHSignatureTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetETHSignatureTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChallengeTrackerId) > 0 {
		i -= len(m.ChallengeTrackerId)
		copy(dAtA[i:], m.ChallengeTrackerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChallengeTrackerId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ApprovalId) > 0 {
		i -= len(m.ApprovalId)
		copy(dAtA[i:], m.ApprovalId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovalId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApproverAddress) > 0 {
		i -= len(m.ApproverAddress)
		copy(dAtA[i:], m.ApproverAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApproverAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApprovalLevel) > 0 {
		i -= len(m.ApprovalLevel)
		copy(dAtA[i:], m.ApprovalLevel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovalLevel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetETHSignatureTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetETHSignatureTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetETHSignatureTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NumUsed) > 0 {
		i -= len(m.NumUsed)
		copy(dAtA[i:], m.NumUsed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NumUsed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWrappableBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWrappableBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWrappableBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWrappableBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWrappableBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWrappableBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxWrappableAmount.Size()
		i -= size
		if _, err := m.MaxWrappableAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ListId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovalTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AmountTrackerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApprovalLevel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApproverAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TrackerType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApprovedAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApprovalId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovalTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tracker != nil {
		l = m.Tracker.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengeTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApprovalLevel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApproverAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChallengeTrackerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LeafIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApprovalId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengeTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NumUsed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDynamicStoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDynamicStoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Store != nil {
		l = m.Store.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDynamicStoreValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDynamicStoreValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetETHSignatureTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApprovalLevel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApproverAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ApprovalId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChallengeTrackerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetETHSignatureTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NumUsed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWrappableBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWrappableBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxWrappableAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &BadgeCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &UserBalanceStore{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &AddressList{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovalTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovalTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovalTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountTrackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountTrackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovalTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovalTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovalTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracker == nil {
				m.Tracker = &ApprovalTracker{}
			}
			if err := m.Tracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengeTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengeTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengeTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTrackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeTrackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeafIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengeTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengeTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengeTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDynamicStoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDynamicStoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDynamicStoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDynamicStoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDynamicStoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDynamicStoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Store == nil {
				m.Store = &DynamicStore{}
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDynamicStoreValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDynamicStoreValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDynamicStoreValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDynamicStoreValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDynamicStoreValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDynamicStoreValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &DynamicStoreValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetETHSignatureTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetETHSignatureTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetETHSignatureTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTrackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeTrackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetETHSignatureTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetETHSignatureTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetETHSignatureTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWrappableBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWrappableBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWrappableBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWrappableBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWrappableBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWrappableBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWrappableAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxWrappableAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

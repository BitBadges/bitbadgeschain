// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/addresses.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddressConditions struct {
	MustOwnBadges    []*MinMaxBalance `protobuf:"bytes,1,rep,name=mustOwnBadges,proto3" json:"mustOwnBadges,omitempty"`
	MustNotOwnBadges []*MinMaxBalance `protobuf:"bytes,2,rep,name=mustNotOwnBadges,proto3" json:"mustNotOwnBadges,omitempty"`
	//Note: Must avoid circular references
	MustBeManager    []Uint `protobuf:"bytes,3,rep,name=mustBeManager,proto3,customtype=Uint" json:"mustBeManager"`
	MustNotBeManager []Uint `protobuf:"bytes,4,rep,name=mustNotBeManager,proto3,customtype=Uint" json:"mustNotBeManager"`
	//Note: Must avoid circular references
	MustBeInMapping    []string `protobuf:"bytes,5,rep,name=mustBeInMapping,proto3" json:"mustBeInMapping,omitempty"`
	MustNotBeInMapping []string `protobuf:"bytes,6,rep,name=mustNotBeInMapping,proto3" json:"mustNotBeInMapping,omitempty"`
}

func (m *AddressConditions) Reset()         { *m = AddressConditions{} }
func (m *AddressConditions) String() string { return proto.CompactTextString(m) }
func (*AddressConditions) ProtoMessage()    {}
func (*AddressConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f4095d91dac9832, []int{0}
}
func (m *AddressConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressConditions.Merge(m, src)
}
func (m *AddressConditions) XXX_Size() int {
	return m.Size()
}
func (m *AddressConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressConditions.DiscardUnknown(m)
}

var xxx_messageInfo_AddressConditions proto.InternalMessageInfo

func (m *AddressConditions) GetMustOwnBadges() []*MinMaxBalance {
	if m != nil {
		return m.MustOwnBadges
	}
	return nil
}

func (m *AddressConditions) GetMustNotOwnBadges() []*MinMaxBalance {
	if m != nil {
		return m.MustNotOwnBadges
	}
	return nil
}

func (m *AddressConditions) GetMustBeInMapping() []string {
	if m != nil {
		return m.MustBeInMapping
	}
	return nil
}

func (m *AddressConditions) GetMustNotBeInMapping() []string {
	if m != nil {
		return m.MustNotBeInMapping
	}
	return nil
}

type AddressFilters struct {
	MustSatisfyMinX string               `protobuf:"bytes,1,opt,name=mustSatisfyMinX,proto3" json:"mustSatisfyMinX,omitempty"`
	Conditions      []*AddressConditions `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *AddressFilters) Reset()         { *m = AddressFilters{} }
func (m *AddressFilters) String() string { return proto.CompactTextString(m) }
func (*AddressFilters) ProtoMessage()    {}
func (*AddressFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f4095d91dac9832, []int{1}
}
func (m *AddressFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressFilters.Merge(m, src)
}
func (m *AddressFilters) XXX_Size() int {
	return m.Size()
}
func (m *AddressFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressFilters.DiscardUnknown(m)
}

var xxx_messageInfo_AddressFilters proto.InternalMessageInfo

func (m *AddressFilters) GetMustSatisfyMinX() string {
	if m != nil {
		return m.MustSatisfyMinX
	}
	return ""
}

func (m *AddressFilters) GetConditions() []*AddressConditions {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type AddressMapping struct {
	MappingId            string   `protobuf:"bytes,1,opt,name=mappingId,proto3" json:"mappingId,omitempty"`
	Addresses            []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	IncludeOnlySpecified bool     `protobuf:"varint,3,opt,name=includeOnlySpecified,proto3" json:"includeOnlySpecified,omitempty"`
	Uri                  string   `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	CustomData           string   `protobuf:"bytes,5,opt,name=customData,proto3" json:"customData,omitempty"`
	//Must satisfy all these filters
	Filters []*AddressFilters `protobuf:"bytes,6,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (m *AddressMapping) Reset()         { *m = AddressMapping{} }
func (m *AddressMapping) String() string { return proto.CompactTextString(m) }
func (*AddressMapping) ProtoMessage()    {}
func (*AddressMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f4095d91dac9832, []int{2}
}
func (m *AddressMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressMapping.Merge(m, src)
}
func (m *AddressMapping) XXX_Size() int {
	return m.Size()
}
func (m *AddressMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AddressMapping proto.InternalMessageInfo

func (m *AddressMapping) GetMappingId() string {
	if m != nil {
		return m.MappingId
	}
	return ""
}

func (m *AddressMapping) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *AddressMapping) GetIncludeOnlySpecified() bool {
	if m != nil {
		return m.IncludeOnlySpecified
	}
	return false
}

func (m *AddressMapping) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *AddressMapping) GetCustomData() string {
	if m != nil {
		return m.CustomData
	}
	return ""
}

func (m *AddressMapping) GetFilters() []*AddressFilters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func init() {
	proto.RegisterType((*AddressConditions)(nil), "bitbadges.bitbadgeschain.badges.AddressConditions")
	proto.RegisterType((*AddressFilters)(nil), "bitbadges.bitbadgeschain.badges.AddressFilters")
	proto.RegisterType((*AddressMapping)(nil), "bitbadges.bitbadgeschain.badges.AddressMapping")
}

func init() { proto.RegisterFile("badges/addresses.proto", fileDescriptor_2f4095d91dac9832) }

var fileDescriptor_2f4095d91dac9832 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xed, 0x98, 0xee, 0x6a, 0x67, 0xfd, 0x58, 0x87, 0x55, 0xc2, 0x22, 0x69, 0xe9, 0x53, 0x9f,
	0x26, 0x10, 0x5f, 0x7c, 0x35, 0x8a, 0x50, 0x30, 0x2e, 0xcc, 0x2a, 0xc8, 0xbe, 0x4d, 0x92, 0x69,
	0x76, 0xa0, 0x9d, 0x09, 0x99, 0x09, 0x6e, 0x7f, 0x84, 0xe2, 0xcf, 0xda, 0xc7, 0x7d, 0x14, 0x1f,
	0x16, 0x69, 0x7f, 0x87, 0x20, 0x99, 0xc9, 0x47, 0x6b, 0x0b, 0x2b, 0xbe, 0x5d, 0xce, 0xbd, 0xe7,
	0x9c, 0x9b, 0x73, 0x33, 0xf0, 0x79, 0x4c, 0xd3, 0x8c, 0x29, 0x9f, 0xa6, 0x69, 0xc1, 0x94, 0x62,
	0x0a, 0xe7, 0x85, 0xd4, 0x12, 0x0d, 0x63, 0xae, 0x6d, 0x0b, 0xb7, 0x55, 0x72, 0x49, 0xb9, 0xc0,
	0xb6, 0x3e, 0x3d, 0xc9, 0x64, 0x26, 0xcd, 0xac, 0x5f, 0x55, 0x96, 0x76, 0xfa, 0xac, 0x96, 0x8b,
	0xe9, 0x9c, 0x8a, 0xa4, 0x51, 0x1b, 0x7f, 0x75, 0xe0, 0xd3, 0xd7, 0xd6, 0xe1, 0x8d, 0x14, 0x29,
	0xd7, 0x5c, 0x0a, 0x85, 0x3e, 0xc2, 0x47, 0x8b, 0x52, 0xe9, 0xb3, 0x2f, 0x22, 0x34, 0x2c, 0x17,
	0x8c, 0x9c, 0xc9, 0x51, 0x80, 0xf1, 0x1d, 0xde, 0x38, 0xe2, 0x22, 0xa2, 0x57, 0xa1, 0xf5, 0x20,
	0xdb, 0x22, 0xe8, 0x02, 0x1e, 0x57, 0xc0, 0x07, 0xb9, 0x21, 0x7c, 0xef, 0xbf, 0x84, 0x77, 0x74,
	0x50, 0x60, 0x37, 0x0e, 0x59, 0x44, 0x05, 0xcd, 0x58, 0xe1, 0x3a, 0x23, 0x67, 0x32, 0x08, 0x1f,
	0x5e, 0xdf, 0x0e, 0x7b, 0x3f, 0x6f, 0x87, 0xfd, 0x4f, 0x5c, 0x68, 0xb2, 0x3d, 0x82, 0x5e, 0xb5,
	0xfb, 0x74, 0xb4, 0xfe, 0x1e, 0xda, 0xce, 0x14, 0x9a, 0xc0, 0x27, 0x56, 0x6a, 0x2a, 0x22, 0x9a,
	0xe7, 0x5c, 0x64, 0xee, 0x41, 0x45, 0x24, 0x7f, 0xc3, 0x08, 0x43, 0xd4, 0xb2, 0xbb, 0xe1, 0x43,
	0x33, 0xbc, 0xa7, 0x33, 0xfe, 0x06, 0xe0, 0xe3, 0xfa, 0x1e, 0xef, 0xf8, 0x5c, 0xb3, 0x42, 0x35,
	0x66, 0xe7, 0x54, 0x73, 0x35, 0x5b, 0x46, 0x5c, 0x7c, 0x76, 0xc1, 0x08, 0x34, 0x66, 0x1b, 0x30,
	0x22, 0x10, 0x26, 0xed, 0x11, 0xeb, 0x68, 0x83, 0x3b, 0xa3, 0xdd, 0x39, 0x3f, 0xd9, 0x50, 0x19,
	0xff, 0xee, 0x16, 0x6a, 0xbe, 0xe9, 0x05, 0x1c, 0x2c, 0x6c, 0x39, 0x4d, 0xeb, 0x55, 0x3a, 0xa0,
	0xea, 0xb6, 0xbf, 0xac, 0xd9, 0x61, 0x40, 0x3a, 0x00, 0x05, 0xf0, 0x84, 0x8b, 0x64, 0x5e, 0xa6,
	0xec, 0x4c, 0xcc, 0x97, 0xe7, 0x39, 0x4b, 0xf8, 0x8c, 0xb3, 0xd4, 0x75, 0x46, 0x60, 0xf2, 0x80,
	0xec, 0xed, 0xa1, 0x63, 0xe8, 0x94, 0x05, 0x77, 0xfb, 0xc6, 0xa9, 0x2a, 0x91, 0x07, 0x61, 0x52,
	0x2a, 0x2d, 0x17, 0x6f, 0xa9, 0xa6, 0xee, 0x81, 0x69, 0x6c, 0x20, 0x68, 0x0a, 0xef, 0xcf, 0x6c,
	0x7a, 0x26, 0xea, 0xa3, 0xc0, 0xff, 0xd7, 0x14, 0xea, 0xd0, 0x49, 0xc3, 0x0f, 0xdf, 0x5f, 0xaf,
	0x3c, 0x70, 0xb3, 0xf2, 0xc0, 0xaf, 0x95, 0x07, 0xbe, 0xaf, 0xbd, 0xde, 0xcd, 0xda, 0xeb, 0xfd,
	0x58, 0x7b, 0xbd, 0x8b, 0x20, 0xe3, 0xfa, 0xb2, 0x8c, 0x71, 0x22, 0x17, 0x7e, 0xab, 0xe9, 0x6f,
	0xab, 0xfb, 0x57, 0x7e, 0x8d, 0xeb, 0x65, 0xce, 0x54, 0x7c, 0x68, 0x5e, 0xdd, 0xcb, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xd7, 0xaa, 0x36, 0xc9, 0xdd, 0x03, 0x00, 0x00,
}

func (m *AddressConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MustNotBeInMapping) > 0 {
		for iNdEx := len(m.MustNotBeInMapping) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MustNotBeInMapping[iNdEx])
			copy(dAtA[i:], m.MustNotBeInMapping[iNdEx])
			i = encodeVarintAddresses(dAtA, i, uint64(len(m.MustNotBeInMapping[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MustBeInMapping) > 0 {
		for iNdEx := len(m.MustBeInMapping) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MustBeInMapping[iNdEx])
			copy(dAtA[i:], m.MustBeInMapping[iNdEx])
			i = encodeVarintAddresses(dAtA, i, uint64(len(m.MustBeInMapping[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MustNotBeManager) > 0 {
		for iNdEx := len(m.MustNotBeManager) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.MustNotBeManager[iNdEx].Size()
				i -= size
				if _, err := m.MustNotBeManager[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintAddresses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MustBeManager) > 0 {
		for iNdEx := len(m.MustBeManager) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.MustBeManager[iNdEx].Size()
				i -= size
				if _, err := m.MustBeManager[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintAddresses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MustNotOwnBadges) > 0 {
		for iNdEx := len(m.MustNotOwnBadges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MustNotOwnBadges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAddresses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MustOwnBadges) > 0 {
		for iNdEx := len(m.MustOwnBadges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MustOwnBadges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAddresses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddressFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAddresses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MustSatisfyMinX) > 0 {
		i -= len(m.MustSatisfyMinX)
		copy(dAtA[i:], m.MustSatisfyMinX)
		i = encodeVarintAddresses(dAtA, i, uint64(len(m.MustSatisfyMinX)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for iNdEx := len(m.Filters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Filters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAddresses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CustomData) > 0 {
		i -= len(m.CustomData)
		copy(dAtA[i:], m.CustomData)
		i = encodeVarintAddresses(dAtA, i, uint64(len(m.CustomData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintAddresses(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if m.IncludeOnlySpecified {
		i--
		if m.IncludeOnlySpecified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintAddresses(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MappingId) > 0 {
		i -= len(m.MappingId)
		copy(dAtA[i:], m.MappingId)
		i = encodeVarintAddresses(dAtA, i, uint64(len(m.MappingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAddresses(dAtA []byte, offset int, v uint64) int {
	offset -= sovAddresses(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddressConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MustOwnBadges) > 0 {
		for _, e := range m.MustOwnBadges {
			l = e.Size()
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	if len(m.MustNotOwnBadges) > 0 {
		for _, e := range m.MustNotOwnBadges {
			l = e.Size()
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	if len(m.MustBeManager) > 0 {
		for _, e := range m.MustBeManager {
			l = e.Size()
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	if len(m.MustNotBeManager) > 0 {
		for _, e := range m.MustNotBeManager {
			l = e.Size()
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	if len(m.MustBeInMapping) > 0 {
		for _, s := range m.MustBeInMapping {
			l = len(s)
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	if len(m.MustNotBeInMapping) > 0 {
		for _, s := range m.MustNotBeInMapping {
			l = len(s)
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	return n
}

func (m *AddressFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MustSatisfyMinX)
	if l > 0 {
		n += 1 + l + sovAddresses(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	return n
}

func (m *AddressMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MappingId)
	if l > 0 {
		n += 1 + l + sovAddresses(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	if m.IncludeOnlySpecified {
		n += 2
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovAddresses(uint64(l))
	}
	l = len(m.CustomData)
	if l > 0 {
		n += 1 + l + sovAddresses(uint64(l))
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovAddresses(uint64(l))
		}
	}
	return n
}

func sovAddresses(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAddresses(x uint64) (n int) {
	return sovAddresses(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddressConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddresses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustOwnBadges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MustOwnBadges = append(m.MustOwnBadges, &MinMaxBalance{})
			if err := m.MustOwnBadges[len(m.MustOwnBadges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustNotOwnBadges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MustNotOwnBadges = append(m.MustNotOwnBadges, &MinMaxBalance{})
			if err := m.MustNotOwnBadges[len(m.MustNotOwnBadges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustBeManager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v Uint
			m.MustBeManager = append(m.MustBeManager, v)
			if err := m.MustBeManager[len(m.MustBeManager)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustNotBeManager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v Uint
			m.MustNotBeManager = append(m.MustNotBeManager, v)
			if err := m.MustNotBeManager[len(m.MustNotBeManager)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustBeInMapping", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MustBeInMapping = append(m.MustBeInMapping, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustNotBeInMapping", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MustNotBeInMapping = append(m.MustNotBeInMapping, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddresses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddresses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddresses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustSatisfyMinX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MustSatisfyMinX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &AddressConditions{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddresses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddresses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddresses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOnlySpecified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeOnlySpecified = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddresses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &AddressFilters{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddresses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddresses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddresses(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddresses
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddresses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAddresses
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAddresses
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAddresses
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAddresses        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddresses          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAddresses = fmt.Errorf("proto: unexpected end of group")
)

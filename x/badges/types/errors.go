package types

// DONTCOVER

import (
	sdkerrors "cosmossdk.io/errors"
)

// x/badges module sentinel errors
var (
	ErrSample                                      = sdkerrors.Register(ModuleName, 1100, "sample error")
	ErrInvalidPacketTimeout                        = sdkerrors.Register(ModuleName, 1500, "invalid packet timeout")
	ErrInvalidVersion                              = sdkerrors.Register(ModuleName, 1501, "invalid version")
	ErrInvalidBadgeID                              = sdkerrors.Register(ModuleName, 1502, "invalid badge ID")
	ErrInvalidBadgeURI                             = sdkerrors.Register(ModuleName, 1503, "invalid badge URI")
	ErrInvalidPermissionsLeadingZeroes             = sdkerrors.Register(ModuleName, 1504, "invalid permissions leading zeroes")
	ErrInvalidPermissions                          = sdkerrors.Register(ModuleName, 1505, "invalid permissions")
	ErrInvalidPermissionsUpdateLocked              = sdkerrors.Register(ModuleName, 1506, "invalid permissions update locked")
	ErrInvalidPermissionsUpdatePermanent           = sdkerrors.Register(ModuleName, 1507, "invalid permissions update permanent")
	ErrSupplyEqualsZero                            = sdkerrors.Register(ModuleName, 1508, "supply equals zero")
	ErrSenderAndReceiverSame                       = sdkerrors.Register(ModuleName, 1509, "sender and receiver same")
	ErrInvalidSupplyAndAmounts                     = sdkerrors.Register(ModuleName, 1510, "invalid supply and amounts")
	ErrAmountEqualsZero                            = sdkerrors.Register(ModuleName, 1511, "amount to create equals zero")
	ErrInvalidAmountsAndAddressesLength            = sdkerrors.Register(ModuleName, 1512, "invalid amounts and addresses length")
	ErrInvalidBadgeHash                            = sdkerrors.Register(ModuleName, 1513, "invalid badge hash")
	ErrDuplicateAddresses                          = sdkerrors.Register(ModuleName, 1514, "duplicate addresses")
	ErrStartGreaterThanEnd                         = sdkerrors.Register(ModuleName, 1515, "start greater than end")
	ErrDefaultSupplyEqualsZero                     = sdkerrors.Register(ModuleName, 1516, "default supply equals zero")
	ErrInvalidArgumentLengths                      = sdkerrors.Register(ModuleName, 1517, "invalid argument lengths")
	ErrRangesIsNil                                 = sdkerrors.Register(ModuleName, 1518, "ranges is nil")
	ErrBytesGreaterThan256                         = sdkerrors.Register(ModuleName, 1519, "bytes greater than 256")
	ErrInvalidUriScheme                            = sdkerrors.Register(ModuleName, 1520, "invalid uri scheme")
	ErrCancelTimeIsGreaterThanExpirationTime       = sdkerrors.Register(ModuleName, 1521, "cancel time is greater than expiration time")
	ErrDuplicateAmounts                            = sdkerrors.Register(ModuleName, 1522, "duplicate amounts")
	ErrElementCantEqualThis                        = sdkerrors.Register(ModuleName, 1523, "element cant equal this")
	ErrInvalidIdRangeSpecified                     = sdkerrors.Register(ModuleName, 1524, "invalid id range specified")
	ErrInvalidTypedData                            = sdkerrors.Register(ModuleName, 1525, "invalid typed data")
	ErrActionOutOfRange                            = sdkerrors.Register(ModuleName, 1526, "action out of range")
	ErrActionsEmpty                                = sdkerrors.Register(ModuleName, 1527, "actions empty")
	ErrActionsLengthNotEqualToRangesLength         = sdkerrors.Register(ModuleName, 1528, "actions length not equal to ranges length")
	ErrNotImplemented                              = sdkerrors.Register(ModuleName, 1529, "not implemented")
	ErrRangesOverlap                               = sdkerrors.Register(ModuleName, 1530, "id ranges are not allowed to overlap. for example, { Start: sdk.NewUint(1), end: 5 } and { Start:   sdk.NewUint(4), End: sdk.NewUint(1)0 } overlap")
	ErrIdInRange                                   = sdkerrors.Register(ModuleName, 1531, "id found in range when not suppose to be there")
	ErrIdAlreadyInRanges                           = sdkerrors.Register(ModuleName, 1532, "id already in ranges")
	ErrUintUnititialized                           = sdkerrors.Register(ModuleName, 1533, "uint uninitialized")
	ErrPrimaryChallengeMustBeOneUsePerLeaf         = sdkerrors.Register(ModuleName, 1534, "primary challenge must be one use per leaf")
	ErrCanOnlyUseMaxOneUsePerLeafWithWhitelistTree = sdkerrors.Register(ModuleName, 1535, "can only use max one use per leaf with whitelist tree")
	ErrCanOnlyUseLeafIndexForBadgeIdsOnce          = sdkerrors.Register(ModuleName, 1536, "can only use leaf index for badge ids once")
	ErrRangeDoesNotOverlap       = sdkerrors.Register(ModuleName, 1537, "range does not overlap with existing ranges")
	ErrAmountRestrictionsIsNil	 = sdkerrors.Register(ModuleName, 1538, "amount restrictions is nil")
	ErrPermissionsValueIsNil	 = sdkerrors.Register(ModuleName, 1539, "permissions is deifned but permissions.value is nil")
	ErrCombinationsIsNil	 = sdkerrors.Register(ModuleName, 1540, "permissions is deifned but permissions.combinations is nil")
	ErrPermissionsIsNil	 = sdkerrors.Register(ModuleName, 1542, "permissions is nil")
	ErrInvalidCombinations	 = sdkerrors.Register(ModuleName, 1541, "invalid permission combinations. you have specified duplicate combinations and because of the first match policy, the second combination will never be used. please remove the duplicate combinations")
	ErrOverflow = sdkerrors.Register(ModuleName, 1543, "overflow")
	ErrUnderflow = sdkerrors.Register(ModuleName, 1544, "underflow")
	ErrInvalidAddress = sdkerrors.Register(ModuleName, 1545, "invalid address")
	ErrInvalidRequest = sdkerrors.Register(ModuleName, 1546, "invalid request")
	ErrUnknownRequest = sdkerrors.Register(ModuleName, 1547, "unknown request")
	ErrInvalidType = sdkerrors.Register(ModuleName, 1548, "invalid type")
	ErrUnauthorized = sdkerrors.Register(ModuleName, 1549, "unauthorized")
	ErrInvalidPubKey = sdkerrors.Register(ModuleName, 1550, "invalid public key")
	ErrWrongSequence = sdkerrors.Register(ModuleName, 1551, "wrong sequence")
	ErrNotSupported = sdkerrors.Register(ModuleName, 1552, "not supported")
	ErrTooManySignatures = sdkerrors.Register(ModuleName, 1553, "too many signatures")
	ErrNoSignatures = sdkerrors.Register(ModuleName, 1554, "no signatures")
	ErrUnknownExtensionOptions = sdkerrors.Register(ModuleName, 1555, "unknown extension options")
	ErrInvalidChainID = sdkerrors.Register(ModuleName, 1556, "invalid chain id")
	ErrorInvalidSigner = sdkerrors.Register(ModuleName, 1557, "invalid signer")
	ErrLogic = sdkerrors.Register(ModuleName, 1558, "logic")
	ErrNotFound = sdkerrors.Register(ModuleName, 1559, "not found")
)

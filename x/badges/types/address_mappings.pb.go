// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/address_mappings.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddressMapping struct {
	MappingId            string   `protobuf:"bytes,1,opt,name=mappingId,proto3" json:"mappingId,omitempty"`
	Addresses            []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	IncludeOnlySpecified bool     `protobuf:"varint,3,opt,name=includeOnlySpecified,proto3" json:"includeOnlySpecified,omitempty"`
	Uri                  string   `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	CustomData           string   `protobuf:"bytes,5,opt,name=customData,proto3" json:"customData,omitempty"`
}

func (m *AddressMapping) Reset()         { *m = AddressMapping{} }
func (m *AddressMapping) String() string { return proto.CompactTextString(m) }
func (*AddressMapping) ProtoMessage()    {}
func (*AddressMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_02934262277c144c, []int{0}
}
func (m *AddressMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressMapping.Merge(m, src)
}
func (m *AddressMapping) XXX_Size() int {
	return m.Size()
}
func (m *AddressMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AddressMapping proto.InternalMessageInfo

func (m *AddressMapping) GetMappingId() string {
	if m != nil {
		return m.MappingId
	}
	return ""
}

func (m *AddressMapping) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *AddressMapping) GetIncludeOnlySpecified() bool {
	if m != nil {
		return m.IncludeOnlySpecified
	}
	return false
}

func (m *AddressMapping) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *AddressMapping) GetCustomData() string {
	if m != nil {
		return m.CustomData
	}
	return ""
}

func init() {
	proto.RegisterType((*AddressMapping)(nil), "bitbadges.bitbadgeschain.badges.AddressMapping")
}

func init() { proto.RegisterFile("badges/address_mappings.proto", fileDescriptor_02934262277c144c) }

var fileDescriptor_02934262277c144c = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0x4a, 0x4c, 0x49,
	0x4f, 0x2d, 0xd6, 0x4f, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x8e, 0xcf, 0x4d, 0x2c, 0x28, 0xc8,
	0xcc, 0x4b, 0x2f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4f, 0xca, 0x2c, 0x81, 0xa8,
	0xd0, 0x83, 0xb3, 0x92, 0x33, 0x12, 0x33, 0xf3, 0xf4, 0x20, 0x6c, 0x29, 0x91, 0xf4, 0xfc, 0xf4,
	0x7c, 0xb0, 0x5a, 0x7d, 0x10, 0x0b, 0xa2, 0x4d, 0x4a, 0x14, 0x6a, 0x6a, 0x52, 0x62, 0x4e, 0x62,
	0x5e, 0x72, 0x2a, 0xd4, 0x34, 0xa5, 0x4d, 0x8c, 0x5c, 0x7c, 0x8e, 0x10, 0x8b, 0x7c, 0x21, 0xf6,
	0x08, 0xc9, 0x70, 0x71, 0x42, 0xad, 0xf4, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42,
	0x08, 0x80, 0x64, 0xa1, 0x0e, 0x4b, 0x2d, 0x96, 0x60, 0x52, 0x60, 0x06, 0xc9, 0xc2, 0x05, 0x84,
	0x8c, 0xb8, 0x44, 0x32, 0xf3, 0x92, 0x73, 0x4a, 0x53, 0x52, 0xfd, 0xf3, 0x72, 0x2a, 0x83, 0x0b,
	0x52, 0x93, 0x33, 0xd3, 0x32, 0x53, 0x53, 0x24, 0x98, 0x15, 0x18, 0x35, 0x38, 0x82, 0xb0, 0xca,
	0x09, 0x09, 0x70, 0x31, 0x97, 0x16, 0x65, 0x4a, 0xb0, 0x80, 0x6d, 0x02, 0x31, 0x85, 0xe4, 0xb8,
	0xb8, 0x92, 0x4b, 0x8b, 0x4b, 0xf2, 0x73, 0x5d, 0x12, 0x4b, 0x12, 0x25, 0x58, 0xc1, 0x12, 0x48,
	0x22, 0x4e, 0x3e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3,
	0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x94, 0x9e,
	0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x0f, 0x1d, 0x7d, 0xd4, 0x70, 0xd2,
	0xaf, 0xd0, 0x87, 0x8a, 0x97, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x43, 0xc2, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x98, 0x31, 0x42, 0xfd, 0x78, 0x01, 0x00, 0x00,
}

func (m *AddressMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomData) > 0 {
		i -= len(m.CustomData)
		copy(dAtA[i:], m.CustomData)
		i = encodeVarintAddressMappings(dAtA, i, uint64(len(m.CustomData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintAddressMappings(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if m.IncludeOnlySpecified {
		i--
		if m.IncludeOnlySpecified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintAddressMappings(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MappingId) > 0 {
		i -= len(m.MappingId)
		copy(dAtA[i:], m.MappingId)
		i = encodeVarintAddressMappings(dAtA, i, uint64(len(m.MappingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAddressMappings(dAtA []byte, offset int, v uint64) int {
	offset -= sovAddressMappings(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddressMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MappingId)
	if l > 0 {
		n += 1 + l + sovAddressMappings(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovAddressMappings(uint64(l))
		}
	}
	if m.IncludeOnlySpecified {
		n += 2
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovAddressMappings(uint64(l))
	}
	l = len(m.CustomData)
	if l > 0 {
		n += 1 + l + sovAddressMappings(uint64(l))
	}
	return n
}

func sovAddressMappings(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAddressMappings(x uint64) (n int) {
	return sovAddressMappings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddressMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressMappings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressMappings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressMappings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressMappings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressMappings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressMappings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressMappings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOnlySpecified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressMappings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeOnlySpecified = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressMappings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressMappings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressMappings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressMappings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressMappings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressMappings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressMappings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddressMappings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddressMappings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddressMappings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressMappings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressMappings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAddressMappings
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAddressMappings
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAddressMappings
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAddressMappings        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddressMappings          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAddressMappings = fmt.Errorf("proto: unexpected end of group")
)

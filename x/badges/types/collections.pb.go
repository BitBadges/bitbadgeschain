// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/collections.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BadgeCollection struct {
	CollectionId                                 Uint                                    `protobuf:"bytes,1,opt,name=collectionId,proto3,customtype=Uint" json:"collectionId"`
	ParentCollectionId                           Uint                                    `protobuf:"bytes,2,opt,name=parentCollectionId,proto3,customtype=Uint" json:"parentCollectionId"`
	CollectionMetadataTimeline                   []*CollectionMetadataTimeline           `protobuf:"bytes,3,rep,name=collectionMetadataTimeline,proto3" json:"collectionMetadataTimeline,omitempty"`
	BadgeMetadataTimeline                        []*BadgeMetadataTimeline                `protobuf:"bytes,4,rep,name=badgeMetadataTimeline,proto3" json:"badgeMetadataTimeline,omitempty"`
	BalancesType                                 Uint                                    `protobuf:"bytes,5,opt,name=balancesType,proto3,customtype=Uint" json:"balancesType"`
	OffChainBalancesMetadataTimeline             []*OffChainBalancesMetadataTimeline     `protobuf:"bytes,6,rep,name=offChainBalancesMetadataTimeline,proto3" json:"offChainBalancesMetadataTimeline,omitempty"`
	InheritedBalancesTimeline                    []*InheritedBalancesTimeline            `protobuf:"bytes,7,rep,name=inheritedBalancesTimeline,proto3" json:"inheritedBalancesTimeline,omitempty"`
	CustomDataTimeline                           []*CustomDataTimeline                   `protobuf:"bytes,8,rep,name=customDataTimeline,proto3" json:"customDataTimeline,omitempty"`
	ManagerTimeline                              []*ManagerTimeline                      `protobuf:"bytes,9,rep,name=managerTimeline,proto3" json:"managerTimeline,omitempty"`
	Permissions                                  *CollectionPermissions                  `protobuf:"bytes,10,opt,name=permissions,proto3" json:"permissions,omitempty"`
	ApprovedTransfersTimeline                    []*CollectionApprovedTransferTimeline   `protobuf:"bytes,11,rep,name=approvedTransfersTimeline,proto3" json:"approvedTransfersTimeline,omitempty"`
	NextBadgeId                                  Uint                                    `protobuf:"bytes,12,opt,name=nextBadgeId,proto3,customtype=Uint" json:"nextBadgeId"`
	UnmintedSupplys                              []*Balance                              `protobuf:"bytes,13,rep,name=unmintedSupplys,proto3" json:"unmintedSupplys,omitempty"`
	TotalSupplys                                 []*Balance                              `protobuf:"bytes,14,rep,name=totalSupplys,proto3" json:"totalSupplys,omitempty"`
	StandardsTimeline                            []*StandardTimeline                     `protobuf:"bytes,15,rep,name=standardsTimeline,proto3" json:"standardsTimeline,omitempty"`
	IsArchivedTimeline                           []*IsArchivedTimeline                   `protobuf:"bytes,16,rep,name=isArchivedTimeline,proto3" json:"isArchivedTimeline,omitempty"`
	ContractAddressTimeline                      []*ContractAddressTimeline              `protobuf:"bytes,17,rep,name=contractAddressTimeline,proto3" json:"contractAddressTimeline,omitempty"`
	DefaultUserApprovedOutgoingTransfersTimeline []*UserApprovedOutgoingTransferTimeline `protobuf:"bytes,18,rep,name=defaultUserApprovedOutgoingTransfersTimeline,proto3" json:"defaultUserApprovedOutgoingTransfersTimeline,omitempty"`
	DefaultUserApprovedIncomingTransfersTimeline []*UserApprovedIncomingTransferTimeline `protobuf:"bytes,19,rep,name=defaultUserApprovedIncomingTransfersTimeline,proto3" json:"defaultUserApprovedIncomingTransfersTimeline,omitempty"`
}

func (m *BadgeCollection) Reset()         { *m = BadgeCollection{} }
func (m *BadgeCollection) String() string { return proto.CompactTextString(m) }
func (*BadgeCollection) ProtoMessage()    {}
func (*BadgeCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eac0b7495c54217, []int{0}
}
func (m *BadgeCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeCollection.Merge(m, src)
}
func (m *BadgeCollection) XXX_Size() int {
	return m.Size()
}
func (m *BadgeCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeCollection.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeCollection proto.InternalMessageInfo

func (m *BadgeCollection) GetCollectionMetadataTimeline() []*CollectionMetadataTimeline {
	if m != nil {
		return m.CollectionMetadataTimeline
	}
	return nil
}

func (m *BadgeCollection) GetBadgeMetadataTimeline() []*BadgeMetadataTimeline {
	if m != nil {
		return m.BadgeMetadataTimeline
	}
	return nil
}

func (m *BadgeCollection) GetOffChainBalancesMetadataTimeline() []*OffChainBalancesMetadataTimeline {
	if m != nil {
		return m.OffChainBalancesMetadataTimeline
	}
	return nil
}

func (m *BadgeCollection) GetInheritedBalancesTimeline() []*InheritedBalancesTimeline {
	if m != nil {
		return m.InheritedBalancesTimeline
	}
	return nil
}

func (m *BadgeCollection) GetCustomDataTimeline() []*CustomDataTimeline {
	if m != nil {
		return m.CustomDataTimeline
	}
	return nil
}

func (m *BadgeCollection) GetManagerTimeline() []*ManagerTimeline {
	if m != nil {
		return m.ManagerTimeline
	}
	return nil
}

func (m *BadgeCollection) GetPermissions() *CollectionPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *BadgeCollection) GetApprovedTransfersTimeline() []*CollectionApprovedTransferTimeline {
	if m != nil {
		return m.ApprovedTransfersTimeline
	}
	return nil
}

func (m *BadgeCollection) GetUnmintedSupplys() []*Balance {
	if m != nil {
		return m.UnmintedSupplys
	}
	return nil
}

func (m *BadgeCollection) GetTotalSupplys() []*Balance {
	if m != nil {
		return m.TotalSupplys
	}
	return nil
}

func (m *BadgeCollection) GetStandardsTimeline() []*StandardTimeline {
	if m != nil {
		return m.StandardsTimeline
	}
	return nil
}

func (m *BadgeCollection) GetIsArchivedTimeline() []*IsArchivedTimeline {
	if m != nil {
		return m.IsArchivedTimeline
	}
	return nil
}

func (m *BadgeCollection) GetContractAddressTimeline() []*ContractAddressTimeline {
	if m != nil {
		return m.ContractAddressTimeline
	}
	return nil
}

func (m *BadgeCollection) GetDefaultUserApprovedOutgoingTransfersTimeline() []*UserApprovedOutgoingTransferTimeline {
	if m != nil {
		return m.DefaultUserApprovedOutgoingTransfersTimeline
	}
	return nil
}

func (m *BadgeCollection) GetDefaultUserApprovedIncomingTransfersTimeline() []*UserApprovedIncomingTransferTimeline {
	if m != nil {
		return m.DefaultUserApprovedIncomingTransfersTimeline
	}
	return nil
}

func init() {
	proto.RegisterType((*BadgeCollection)(nil), "bitbadges.bitbadgeschain.badges.BadgeCollection")
}

func init() { proto.RegisterFile("badges/collections.proto", fileDescriptor_9eac0b7495c54217) }

var fileDescriptor_9eac0b7495c54217 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcb, 0x6e, 0xd3, 0x4e,
	0x14, 0xc6, 0xe3, 0x7f, 0xfb, 0x2f, 0x74, 0x12, 0x08, 0x1d, 0x6e, 0x6e, 0x16, 0x69, 0xc4, 0xaa,
	0x0b, 0x64, 0x97, 0x56, 0x42, 0x08, 0xd8, 0x24, 0x81, 0x45, 0xa4, 0x56, 0x45, 0x6e, 0x2b, 0xa1,
	0x6e, 0xd0, 0xc4, 0x33, 0x71, 0x46, 0xb2, 0x67, 0xac, 0x99, 0x31, 0x6a, 0xc4, 0x8a, 0x07, 0x40,
	0xe2, 0x35, 0x10, 0x2f, 0xd2, 0x65, 0x97, 0x88, 0x45, 0x85, 0xda, 0x17, 0x41, 0x99, 0xf8, 0x92,
	0x8b, 0x5d, 0xa7, 0xec, 0x46, 0xce, 0xf9, 0x7e, 0xdf, 0x77, 0x8e, 0xcf, 0x44, 0x06, 0x66, 0x1f,
	0x61, 0x8f, 0x48, 0xdb, 0xe5, 0xbe, 0x4f, 0x5c, 0x45, 0x39, 0x93, 0x56, 0x28, 0xb8, 0xe2, 0x70,
	0xab, 0x4f, 0xd5, 0xe4, 0x47, 0x2b, 0x3d, 0xb9, 0x43, 0x44, 0x99, 0x35, 0x39, 0x37, 0x36, 0x3d,
	0xce, 0x3d, 0x9f, 0xd8, 0xba, 0xbc, 0x1f, 0x0d, 0x6c, 0xc4, 0x46, 0x13, 0x6d, 0xe3, 0x49, 0x4c,
	0x55, 0x02, 0x31, 0x39, 0x20, 0x22, 0x66, 0x36, 0x1e, 0xc7, 0xcf, 0xfb, 0xc8, 0x47, 0xcc, 0x25,
	0xc9, 0xe3, 0x24, 0x44, 0x48, 0x44, 0x40, 0xa5, 0xcc, 0x42, 0xa4, 0x82, 0x80, 0x28, 0x84, 0x91,
	0x42, 0xf3, 0x7c, 0x1a, 0x10, 0x9f, 0xb2, 0x14, 0xf4, 0xc8, 0xe3, 0x1e, 0xd7, 0x47, 0x7b, 0x7c,
	0x9a, 0x3c, 0x7d, 0xf6, 0xb3, 0x0e, 0xea, 0x9d, 0xb1, 0xa0, 0x9b, 0x36, 0x09, 0x77, 0x40, 0x2d,
	0x6b, 0xb9, 0x87, 0x4d, 0xa3, 0x65, 0x6c, 0xaf, 0x77, 0x6a, 0xe7, 0x97, 0x5b, 0x95, 0xdf, 0x97,
	0x5b, 0xab, 0x27, 0x94, 0x29, 0x67, 0xa6, 0x02, 0xbe, 0x05, 0x30, 0x44, 0x82, 0x30, 0xd5, 0x9d,
	0xd6, 0xfd, 0x97, 0xa3, 0xcb, 0xa9, 0x83, 0x5f, 0x40, 0x23, 0xa3, 0x1d, 0xc4, 0xdd, 0x1c, 0xc7,
	0xf1, 0xcd, 0x95, 0xd6, 0xca, 0x76, 0x75, 0xf7, 0x8d, 0x55, 0x32, 0x72, 0xab, 0x5b, 0x88, 0x70,
	0x6e, 0xc0, 0x43, 0x1f, 0x4c, 0xe6, 0xb8, 0xe0, 0xbb, 0xaa, 0x7d, 0x5f, 0x96, 0xfa, 0x76, 0xf2,
	0xd4, 0x4e, 0x3e, 0x74, 0x3c, 0xda, 0xe4, 0xfd, 0x1e, 0x8f, 0x42, 0x62, 0xfe, 0x9f, 0x37, 0xda,
	0xe9, 0x0a, 0xf8, 0xcd, 0x00, 0x2d, 0x3e, 0x18, 0x74, 0xc7, 0x96, 0x9d, 0xf8, 0x87, 0x85, 0xac,
	0x6b, 0x3a, 0x6b, 0xbb, 0x34, 0xeb, 0x61, 0x09, 0xc8, 0x29, 0xb5, 0x82, 0x67, 0x60, 0x93, 0xb2,
	0x21, 0x11, 0x54, 0x11, 0x9c, 0x14, 0xa5, 0x39, 0xee, 0xe8, 0x1c, 0xaf, 0x4b, 0x73, 0xf4, 0x8a,
	0x08, 0x4e, 0x31, 0x1c, 0xba, 0x00, 0xba, 0x91, 0x54, 0x3c, 0x78, 0x37, 0xdd, 0xfa, 0x5d, 0x6d,
	0xb9, 0x57, 0xbe, 0x1e, 0x0b, 0x52, 0x27, 0x07, 0x07, 0x4f, 0x41, 0x3d, 0x40, 0x0c, 0x79, 0x44,
	0xa4, 0x0e, 0xeb, 0xda, 0x61, 0xa7, 0xd4, 0xe1, 0x60, 0x56, 0xe7, 0xcc, 0x83, 0xe0, 0x47, 0x50,
	0x9d, 0xba, 0xc5, 0x26, 0x68, 0x19, 0x4b, 0x2d, 0x58, 0xb6, 0xd8, 0x1f, 0x32, 0xb5, 0x33, 0x8d,
	0x82, 0x5f, 0x0d, 0xb0, 0x89, 0xc2, 0x50, 0xf0, 0xcf, 0x04, 0x1f, 0x27, 0xff, 0x2b, 0x69, 0x03,
	0x55, 0xdd, 0x40, 0xf7, 0x16, 0x46, 0xed, 0x39, 0x56, 0xf6, 0x7a, 0x0a, 0x5d, 0xa0, 0x05, 0xaa,
	0x8c, 0x9c, 0x29, 0x7d, 0x1d, 0x7a, 0xd8, 0xac, 0xe5, 0x6c, 0xf6, 0x74, 0x01, 0x74, 0x40, 0x3d,
	0x62, 0x01, 0x65, 0x8a, 0xe0, 0xa3, 0x28, 0x0c, 0xfd, 0x91, 0x34, 0xef, 0xe9, 0xa0, 0xdb, 0x4b,
	0x5c, 0x39, 0xbd, 0x1a, 0xce, 0x3c, 0x00, 0xee, 0x83, 0x9a, 0xe2, 0x0a, 0xf9, 0x09, 0xf0, 0xfe,
	0x2d, 0x81, 0x33, 0x6a, 0xf8, 0x09, 0x6c, 0x48, 0x85, 0x18, 0x46, 0x02, 0x67, 0xc3, 0xac, 0x6b,
	0xe4, 0x8b, 0x52, 0xe4, 0x51, 0xac, 0x4c, 0x47, 0xb7, 0xc8, 0x1a, 0x6f, 0x34, 0x95, 0x6d, 0xe1,
	0x0e, 0xe9, 0x78, 0xa2, 0x89, 0xc3, 0x83, 0x25, 0x37, 0xba, 0xb7, 0x20, 0x75, 0x72, 0x70, 0x50,
	0x80, 0xa7, 0x2e, 0x67, 0x4a, 0x20, 0x57, 0xb5, 0x31, 0x16, 0x44, 0x66, 0xbd, 0x6c, 0x68, 0xa7,
	0x57, 0x4b, 0x2c, 0x46, 0xae, 0xde, 0x29, 0x02, 0xc3, 0x1f, 0x06, 0x78, 0x8e, 0xc9, 0x00, 0x45,
	0xbe, 0x3a, 0x91, 0x44, 0x24, 0xeb, 0x74, 0x18, 0x29, 0x8f, 0x53, 0xe6, 0x2d, 0xae, 0x28, 0xd4,
	0x49, 0xde, 0x97, 0x26, 0xb9, 0x89, 0x96, 0xc6, 0xba, 0x95, 0x75, 0x51, 0xd6, 0x1e, 0x73, 0x79,
	0x90, 0x9b, 0xf5, 0xe1, 0x3f, 0x64, 0x9d, 0xa7, 0xdd, 0x98, 0xb5, 0xd0, 0xba, 0xb3, 0x7f, 0x7e,
	0xd5, 0x34, 0x2e, 0xae, 0x9a, 0xc6, 0x9f, 0xab, 0xa6, 0xf1, 0xfd, 0xba, 0x59, 0xb9, 0xb8, 0x6e,
	0x56, 0x7e, 0x5d, 0x37, 0x2b, 0xa7, 0xbb, 0x1e, 0x55, 0xc3, 0xa8, 0x6f, 0xb9, 0x3c, 0xb0, 0xd3,
	0x38, 0xf6, 0x6c, 0x30, 0xfb, 0xcc, 0x4e, 0xbe, 0x0d, 0x46, 0x21, 0x91, 0xfd, 0x35, 0xfd, 0x09,
	0xb0, 0xf7, 0x37, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x99, 0x0a, 0x0c, 0xe8, 0x08, 0x00, 0x00,
}

func (m *BadgeCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultUserApprovedIncomingTransfersTimeline) > 0 {
		for iNdEx := len(m.DefaultUserApprovedIncomingTransfersTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultUserApprovedIncomingTransfersTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.DefaultUserApprovedOutgoingTransfersTimeline) > 0 {
		for iNdEx := len(m.DefaultUserApprovedOutgoingTransfersTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultUserApprovedOutgoingTransfersTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.ContractAddressTimeline) > 0 {
		for iNdEx := len(m.ContractAddressTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractAddressTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.IsArchivedTimeline) > 0 {
		for iNdEx := len(m.IsArchivedTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IsArchivedTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.StandardsTimeline) > 0 {
		for iNdEx := len(m.StandardsTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StandardsTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.TotalSupplys) > 0 {
		for iNdEx := len(m.TotalSupplys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalSupplys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.UnmintedSupplys) > 0 {
		for iNdEx := len(m.UnmintedSupplys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnmintedSupplys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	{
		size := m.NextBadgeId.Size()
		i -= size
		if _, err := m.NextBadgeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollections(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.ApprovedTransfersTimeline) > 0 {
		for iNdEx := len(m.ApprovedTransfersTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedTransfersTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollections(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.ManagerTimeline) > 0 {
		for iNdEx := len(m.ManagerTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CustomDataTimeline) > 0 {
		for iNdEx := len(m.CustomDataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomDataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.InheritedBalancesTimeline) > 0 {
		for iNdEx := len(m.InheritedBalancesTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InheritedBalancesTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.OffChainBalancesMetadataTimeline) > 0 {
		for iNdEx := len(m.OffChainBalancesMetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OffChainBalancesMetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.BalancesType.Size()
		i -= size
		if _, err := m.BalancesType.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollections(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.BadgeMetadataTimeline) > 0 {
		for iNdEx := len(m.BadgeMetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeMetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CollectionMetadataTimeline) > 0 {
		for iNdEx := len(m.CollectionMetadataTimeline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollectionMetadataTimeline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.ParentCollectionId.Size()
		i -= size
		if _, err := m.ParentCollectionId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollections(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CollectionId.Size()
		i -= size
		if _, err := m.CollectionId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollections(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCollections(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollections(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BadgeCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollectionId.Size()
	n += 1 + l + sovCollections(uint64(l))
	l = m.ParentCollectionId.Size()
	n += 1 + l + sovCollections(uint64(l))
	if len(m.CollectionMetadataTimeline) > 0 {
		for _, e := range m.CollectionMetadataTimeline {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	if len(m.BadgeMetadataTimeline) > 0 {
		for _, e := range m.BadgeMetadataTimeline {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	l = m.BalancesType.Size()
	n += 1 + l + sovCollections(uint64(l))
	if len(m.OffChainBalancesMetadataTimeline) > 0 {
		for _, e := range m.OffChainBalancesMetadataTimeline {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	if len(m.InheritedBalancesTimeline) > 0 {
		for _, e := range m.InheritedBalancesTimeline {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	if len(m.CustomDataTimeline) > 0 {
		for _, e := range m.CustomDataTimeline {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	if len(m.ManagerTimeline) > 0 {
		for _, e := range m.ManagerTimeline {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovCollections(uint64(l))
	}
	if len(m.ApprovedTransfersTimeline) > 0 {
		for _, e := range m.ApprovedTransfersTimeline {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	l = m.NextBadgeId.Size()
	n += 1 + l + sovCollections(uint64(l))
	if len(m.UnmintedSupplys) > 0 {
		for _, e := range m.UnmintedSupplys {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	if len(m.TotalSupplys) > 0 {
		for _, e := range m.TotalSupplys {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	if len(m.StandardsTimeline) > 0 {
		for _, e := range m.StandardsTimeline {
			l = e.Size()
			n += 1 + l + sovCollections(uint64(l))
		}
	}
	if len(m.IsArchivedTimeline) > 0 {
		for _, e := range m.IsArchivedTimeline {
			l = e.Size()
			n += 2 + l + sovCollections(uint64(l))
		}
	}
	if len(m.ContractAddressTimeline) > 0 {
		for _, e := range m.ContractAddressTimeline {
			l = e.Size()
			n += 2 + l + sovCollections(uint64(l))
		}
	}
	if len(m.DefaultUserApprovedOutgoingTransfersTimeline) > 0 {
		for _, e := range m.DefaultUserApprovedOutgoingTransfersTimeline {
			l = e.Size()
			n += 2 + l + sovCollections(uint64(l))
		}
	}
	if len(m.DefaultUserApprovedIncomingTransfersTimeline) > 0 {
		for _, e := range m.DefaultUserApprovedIncomingTransfersTimeline {
			l = e.Size()
			n += 2 + l + sovCollections(uint64(l))
		}
	}
	return n
}

func sovCollections(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollections(x uint64) (n int) {
	return sovCollections(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BadgeCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollections
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ParentCollectionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionMetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionMetadataTimeline = append(m.CollectionMetadataTimeline, &CollectionMetadataTimeline{})
			if err := m.CollectionMetadataTimeline[len(m.CollectionMetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeMetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeMetadataTimeline = append(m.BadgeMetadataTimeline, &BadgeMetadataTimeline{})
			if err := m.BadgeMetadataTimeline[len(m.BadgeMetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalancesType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffChainBalancesMetadataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffChainBalancesMetadataTimeline = append(m.OffChainBalancesMetadataTimeline, &OffChainBalancesMetadataTimeline{})
			if err := m.OffChainBalancesMetadataTimeline[len(m.OffChainBalancesMetadataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritedBalancesTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InheritedBalancesTimeline = append(m.InheritedBalancesTimeline, &InheritedBalancesTimeline{})
			if err := m.InheritedBalancesTimeline[len(m.InheritedBalancesTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDataTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomDataTimeline = append(m.CustomDataTimeline, &CustomDataTimeline{})
			if err := m.CustomDataTimeline[len(m.CustomDataTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerTimeline = append(m.ManagerTimeline, &ManagerTimeline{})
			if err := m.ManagerTimeline[len(m.ManagerTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &CollectionPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedTransfersTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedTransfersTimeline = append(m.ApprovedTransfersTimeline, &CollectionApprovedTransferTimeline{})
			if err := m.ApprovedTransfersTimeline[len(m.ApprovedTransfersTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBadgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextBadgeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnmintedSupplys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnmintedSupplys = append(m.UnmintedSupplys, &Balance{})
			if err := m.UnmintedSupplys[len(m.UnmintedSupplys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupplys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupplys = append(m.TotalSupplys, &Balance{})
			if err := m.TotalSupplys[len(m.TotalSupplys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandardsTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StandardsTimeline = append(m.StandardsTimeline, &StandardTimeline{})
			if err := m.StandardsTimeline[len(m.StandardsTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArchivedTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsArchivedTimeline = append(m.IsArchivedTimeline, &IsArchivedTimeline{})
			if err := m.IsArchivedTimeline[len(m.IsArchivedTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddressTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddressTimeline = append(m.ContractAddressTimeline, &ContractAddressTimeline{})
			if err := m.ContractAddressTimeline[len(m.ContractAddressTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultUserApprovedOutgoingTransfersTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultUserApprovedOutgoingTransfersTimeline = append(m.DefaultUserApprovedOutgoingTransfersTimeline, &UserApprovedOutgoingTransferTimeline{})
			if err := m.DefaultUserApprovedOutgoingTransfersTimeline[len(m.DefaultUserApprovedOutgoingTransfersTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultUserApprovedIncomingTransfersTimeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultUserApprovedIncomingTransfersTimeline = append(m.DefaultUserApprovedIncomingTransfersTimeline, &UserApprovedIncomingTransferTimeline{})
			if err := m.DefaultUserApprovedIncomingTransfersTimeline[len(m.DefaultUserApprovedIncomingTransfersTimeline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollections(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollections
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollections(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollections
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollections
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollections
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollections
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollections
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollections        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollections          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollections = fmt.Errorf("proto: unexpected end of group")
)

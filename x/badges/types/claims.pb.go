// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: badges/claims.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimType int32

const (
	ClaimType_MerkleTree ClaimType = 0
	ClaimType_FirstCome  ClaimType = 1
)

var ClaimType_name = map[int32]string{
	0: "MerkleTree",
	1: "FirstCome",
}

var ClaimType_value = map[string]int32{
	"MerkleTree": 0,
	"FirstCome":  1,
}

func (x ClaimType) String() string {
	return proto.EnumName(ClaimType_name, int32(x))
}

func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fc06cc841589c70, []int{0}
}

// Defines a claim object. Claims are used to transfer badges via a claiming process.
// Stored in own store. Claimed leaves are also stored in unique store.
type Claim struct {
	Balances                  []*Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
	CodeRoot                  string     `protobuf:"bytes,2,opt,name=codeRoot,proto3" json:"codeRoot,omitempty"`
	ExpectedMerkleProofLength uint64     `protobuf:"varint,10,opt,name=expectedMerkleProofLength,proto3" json:"expectedMerkleProofLength,omitempty"`
	WhitelistRoot             string     `protobuf:"bytes,3,opt,name=whitelistRoot,proto3" json:"whitelistRoot,omitempty"`
	IncrementIdsBy            uint64     `protobuf:"varint,4,opt,name=incrementIdsBy,proto3" json:"incrementIdsBy,omitempty"`
	Amount                    uint64     `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	BadgeIds                  []*IdRange `protobuf:"bytes,6,rep,name=badgeIds,proto3" json:"badgeIds,omitempty"`
	RestrictOptions           uint64     `protobuf:"varint,7,opt,name=restrictOptions,proto3" json:"restrictOptions,omitempty"`
	Uri                       string     `protobuf:"bytes,8,opt,name=uri,proto3" json:"uri,omitempty"`
	TimeRange                 *IdRange   `protobuf:"bytes,9,opt,name=timeRange,proto3" json:"timeRange,omitempty"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc06cc841589c70, []int{0}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func (m *Claim) GetBalances() []*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *Claim) GetCodeRoot() string {
	if m != nil {
		return m.CodeRoot
	}
	return ""
}

func (m *Claim) GetExpectedMerkleProofLength() uint64 {
	if m != nil {
		return m.ExpectedMerkleProofLength
	}
	return 0
}

func (m *Claim) GetWhitelistRoot() string {
	if m != nil {
		return m.WhitelistRoot
	}
	return ""
}

func (m *Claim) GetIncrementIdsBy() uint64 {
	if m != nil {
		return m.IncrementIdsBy
	}
	return 0
}

func (m *Claim) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Claim) GetBadgeIds() []*IdRange {
	if m != nil {
		return m.BadgeIds
	}
	return nil
}

func (m *Claim) GetRestrictOptions() uint64 {
	if m != nil {
		return m.RestrictOptions
	}
	return 0
}

func (m *Claim) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Claim) GetTimeRange() *IdRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func init() {
	proto.RegisterEnum("bitbadges.bitbadgeschain.badges.ClaimType", ClaimType_name, ClaimType_value)
	proto.RegisterType((*Claim)(nil), "bitbadges.bitbadgeschain.badges.Claim")
}

func init() { proto.RegisterFile("badges/claims.proto", fileDescriptor_5fc06cc841589c70) }

var fileDescriptor_5fc06cc841589c70 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0x76, 0xb7, 0x36, 0x4f, 0x76, 0x2d, 0x23, 0xca, 0xd8, 0x43, 0x2c, 0x22, 0x12,
	0xf6, 0x90, 0xc0, 0x7a, 0xf5, 0xd4, 0x95, 0x85, 0xc2, 0x8a, 0x12, 0xf6, 0xe4, 0x2d, 0x99, 0x3c,
	0xd3, 0xc1, 0x64, 0x26, 0xcc, 0xbc, 0xe2, 0xf6, 0x5b, 0xf8, 0xb1, 0x3c, 0xee, 0x4d, 0x8f, 0xd2,
	0x7e, 0x11, 0xe9, 0x24, 0x8d, 0x6c, 0x41, 0x74, 0x6f, 0xef, 0xfd, 0x93, 0xdf, 0xff, 0xbd, 0xf9,
	0xcf, 0xc0, 0x93, 0x3c, 0x2b, 0x4a, 0x74, 0x89, 0xac, 0x32, 0x55, 0xbb, 0xb8, 0xb1, 0x86, 0x0c,
	0x7f, 0x91, 0x2b, 0x6a, 0xf5, 0xb8, 0xaf, 0xe4, 0x32, 0x53, 0x3a, 0x6e, 0xeb, 0xe9, 0xd3, 0x8e,
	0xca, 0xb3, 0x2a, 0xd3, 0x12, 0x3b, 0x6e, 0xba, 0x37, 0xb3, 0x99, 0x2e, 0xf7, 0xe2, 0xcb, 0x1f,
	0x43, 0x38, 0xbe, 0xd8, 0xb9, 0xf3, 0x77, 0x30, 0xde, 0x03, 0x82, 0xcd, 0x86, 0xd1, 0xa3, 0xf3,
	0x28, 0xfe, 0xc7, 0xa4, 0x78, 0xde, 0x02, 0x69, 0x4f, 0xf2, 0x29, 0x8c, 0xa5, 0x29, 0x30, 0x35,
	0x86, 0xc4, 0x83, 0x19, 0x8b, 0x82, 0xb4, 0xef, 0xf9, 0x5b, 0x78, 0x8e, 0x37, 0x0d, 0x4a, 0xc2,
	0xe2, 0x3d, 0xda, 0x2f, 0x15, 0x7e, 0xb4, 0xc6, 0x7c, 0xbe, 0x42, 0x5d, 0xd2, 0x52, 0xc0, 0x8c,
	0x45, 0x47, 0xe9, 0xdf, 0x7f, 0xe0, 0xaf, 0xe0, 0xe4, 0xeb, 0x52, 0x11, 0x56, 0xca, 0x91, 0xb7,
	0x1f, 0x7a, 0xfb, 0xbb, 0x22, 0x7f, 0x0d, 0xa7, 0x4a, 0x4b, 0x8b, 0x35, 0x6a, 0x5a, 0x14, 0x6e,
	0xbe, 0x16, 0x47, 0xde, 0xf8, 0x40, 0xe5, 0xcf, 0x60, 0x94, 0xd5, 0x66, 0xa5, 0x49, 0x1c, 0xfb,
	0xef, 0x5d, 0xd7, 0xa6, 0x50, 0x94, 0xb8, 0x28, 0x9c, 0x18, 0xfd, 0x67, 0x0a, 0x8b, 0x22, 0xdd,
	0x45, 0x9a, 0xf6, 0x24, 0x8f, 0xe0, 0xb1, 0x45, 0x47, 0x56, 0x49, 0xfa, 0xd0, 0x90, 0x32, 0xda,
	0x89, 0x87, 0x7e, 0xcc, 0xa1, 0xcc, 0x27, 0x30, 0x5c, 0x59, 0x25, 0xc6, 0xfe, 0x2c, 0xbb, 0x92,
	0x5f, 0x42, 0x40, 0xaa, 0x46, 0x6f, 0x29, 0x82, 0x19, 0xbb, 0xd7, 0x0a, 0x7f, 0xd0, 0xb3, 0x33,
	0x08, 0xfc, 0xc5, 0x5e, 0xaf, 0x1b, 0xe4, 0xa7, 0x00, 0x6d, 0xa2, 0xd7, 0x16, 0x71, 0x32, 0xe0,
	0x27, 0x10, 0x5c, 0x2a, 0xeb, 0xe8, 0xc2, 0xd4, 0x38, 0x61, 0xf3, 0xab, 0xef, 0x9b, 0x90, 0xdd,
	0x6e, 0x42, 0xf6, 0x6b, 0x13, 0xb2, 0x6f, 0xdb, 0x70, 0x70, 0xbb, 0x0d, 0x07, 0x3f, 0xb7, 0xe1,
	0xe0, 0xd3, 0x79, 0xa9, 0x68, 0xb9, 0xca, 0x63, 0x69, 0xea, 0xa4, 0x1f, 0x9d, 0xdc, 0x5d, 0x22,
	0xb9, 0x49, 0x3a, 0x9d, 0xd6, 0x0d, 0xba, 0x7c, 0xe4, 0x9f, 0xd6, 0x9b, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xb6, 0x2c, 0x0a, 0x3a, 0xbe, 0x02, 0x00, 0x00,
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpectedMerkleProofLength != 0 {
		i = encodeVarintClaims(dAtA, i, uint64(m.ExpectedMerkleProofLength))
		i--
		dAtA[i] = 0x50
	}
	if m.TimeRange != nil {
		{
			size, err := m.TimeRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClaims(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x42
	}
	if m.RestrictOptions != 0 {
		i = encodeVarintClaims(dAtA, i, uint64(m.RestrictOptions))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BadgeIds) > 0 {
		for iNdEx := len(m.BadgeIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Amount != 0 {
		i = encodeVarintClaims(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if m.IncrementIdsBy != 0 {
		i = encodeVarintClaims(dAtA, i, uint64(m.IncrementIdsBy))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WhitelistRoot) > 0 {
		i -= len(m.WhitelistRoot)
		copy(dAtA[i:], m.WhitelistRoot)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.WhitelistRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CodeRoot) > 0 {
		i -= len(m.CodeRoot)
		copy(dAtA[i:], m.CodeRoot)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.CodeRoot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintClaims(dAtA []byte, offset int, v uint64) int {
	offset -= sovClaims(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	l = len(m.CodeRoot)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	l = len(m.WhitelistRoot)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	if m.IncrementIdsBy != 0 {
		n += 1 + sovClaims(uint64(m.IncrementIdsBy))
	}
	if m.Amount != 0 {
		n += 1 + sovClaims(uint64(m.Amount))
	}
	if len(m.BadgeIds) > 0 {
		for _, e := range m.BadgeIds {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	if m.RestrictOptions != 0 {
		n += 1 + sovClaims(uint64(m.RestrictOptions))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	if m.TimeRange != nil {
		l = m.TimeRange.Size()
		n += 1 + l + sovClaims(uint64(l))
	}
	if m.ExpectedMerkleProofLength != 0 {
		n += 1 + sovClaims(uint64(m.ExpectedMerkleProofLength))
	}
	return n
}

func sovClaims(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClaims(x uint64) (n int) {
	return sovClaims(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementIdsBy", wireType)
			}
			m.IncrementIdsBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncrementIdsBy |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeIds = append(m.BadgeIds, &IdRange{})
			if err := m.BadgeIds[len(m.BadgeIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictOptions", wireType)
			}
			m.RestrictOptions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestrictOptions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeRange == nil {
				m.TimeRange = &IdRange{}
			}
			if err := m.TimeRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedMerkleProofLength", wireType)
			}
			m.ExpectedMerkleProofLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedMerkleProofLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClaims(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClaims
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClaims
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClaims
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClaims        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClaims          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClaims = fmt.Errorf("proto: unexpected end of group")
)
